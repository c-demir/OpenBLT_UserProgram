
My_openblt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  0800ec90  0800ec90  0001ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f70c  0800f70c  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800f70c  0800f70c  0001f70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f714  0800f714  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f714  0800f714  0001f714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f718  0800f718  0001f718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800f71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00001aec  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c74  20001c74  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001840c  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000058a9  00000000  00000000  00038607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a70  00000000  00000000  0003deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000138c  00000000  00000000  0003f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027c62  00000000  00000000  00040cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002211a  00000000  00000000  0006890e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d89b1  00000000  00000000  0008aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006810  00000000  00000000  001633dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00169bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ec78 	.word	0x0800ec78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800ec78 	.word	0x0800ec78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* initialize the bootloader */
  BootInit();
 80004c8:	f009 fa14 	bl	80098f4 <BootInit>
} /*** end of AppInit ***/
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Run the bootloader task. */
  BootTask();
 80004d4:	f009 fa20 	bl	8009918 <BootTask>
} /*** end of AppTask ***/
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	691a      	ldr	r2, [r3, #16]
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	4013      	ands	r3, r2
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	bf0c      	ite	eq
 80004f4:	2301      	moveq	r3, #1
 80004f6:	2300      	movne	r3, #0
 80004f8:	b2db      	uxtb	r3, r3
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	619a      	str	r2, [r3, #24]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	041a      	lsls	r2, r3, #16
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	619a      	str	r2, [r3, #24]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000550:	2b40      	cmp	r3, #64	; 0x40
 8000552:	bf0c      	ite	eq
 8000554:	2301      	moveq	r3, #1
 8000556:	2300      	movne	r3, #0
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	2b80      	cmp	r3, #128	; 0x80
 8000578:	bf0c      	ite	eq
 800057a:	2301      	moveq	r3, #1
 800057c:	2300      	movne	r3, #0
 800057e:	b2db      	uxtb	r3, r3
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000598:	78fa      	ldrb	r2, [r7, #3]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	605a      	str	r2, [r3, #4]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b8:	4907      	ldr	r1, [pc, #28]	; (80005d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4013      	ands	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ca:	68fb      	ldr	r3, [r7, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800

080005dc <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 80005e0:	2101      	movs	r1, #1
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <CpuUserProgramStartHook+0x20>)
 80005e4:	f7ff ff7a 	bl	80004dc <LL_GPIO_IsInputPinSet>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <CpuUserProgramStartHook+0x16>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e002      	b.n	80005f8 <CpuUserProgramStartHook+0x1c>
  }

  /* clean up the LED driver */
  LedBlinkExit();
 80005f2:	f000 f98b 	bl	800090c <LedBlinkExit>

  /* okay to start the user program */
  return BLT_TRUE;
 80005f6:	2301      	movs	r3, #1
} /*** end of CpuUserProgramStartHook ***/
 80005f8:	4618      	mov	r0, r3
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40020000 	.word	0x40020000

08000600 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 f941 	bl	800088c <LedBlinkInit>
} /*** end of CopInitHook ***/
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}

0800060e <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8000612:	f000 f94b 	bl	80008ac <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <UsbConnectHook>:
** \param     connect BLT_TRUE to connect and BLT_FALSE to disconnect.
** \return    none.
**
****************************************************************************************/
void UsbConnectHook(blt_bool connect)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  static blt_bool initialized = BLT_FALSE;

  /* the connection to the USB bus is typically controlled by software through a digital
   * output. the GPIO pin for this must be configured as such.
   */
  if (initialized == BLT_FALSE)
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <UsbConnectHook+0x64>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d116      	bne.n	800065c <UsbConnectHook+0x40>
  {
    /* enable the clock for PC11 */
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800062e:	2004      	movs	r0, #4
 8000630:	f7ff ffbc 	bl	80005ac <LL_AHB1_GRP1_EnableClock>
    /* configure DIS pin as open drain digital output */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000638:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000642:	2301      	movs	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <UsbConnectHook+0x68>)
 8000652:	f003 fd11 	bl	8004078 <LL_GPIO_Init>
    /* set to initialized as this part only has to be done once after reset */
    initialized = BLT_TRUE;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <UsbConnectHook+0x64>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
  }

  /* determine if the USB should be connected or disconnected */
  if (connect == BLT_TRUE)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d105      	bne.n	800066e <UsbConnectHook+0x52>
  {
    /* the GPIO has a pull-up so to connect to the USB bus the pin needs to go low */
    LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11);
 8000662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <UsbConnectHook+0x68>)
 8000668:	f7ff ff5b 	bl	8000522 <LL_GPIO_ResetOutputPin>
  else
  {
    /* the GPIO has a pull-up so to disconnect to the USB bus the pin needs to go high */
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
  }
} /*** end of UsbConnect ***/
 800066c:	e004      	b.n	8000678 <UsbConnectHook+0x5c>
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <UsbConnectHook+0x68>)
 8000674:	f7ff ff47 	bl	8000506 <LL_GPIO_SetOutputPin>
} /*** end of UsbConnect ***/
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200003d0 	.word	0x200003d0
 8000684:	40020800 	.word	0x40020800

08000688 <UsbEnterLowPowerModeHook>:
**            to enter a low power mode.
** \return    none.
**
****************************************************************************************/
void UsbEnterLowPowerModeHook(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* support to enter a low power mode can be implemented here */
} /*** end of UsbEnterLowPowerMode ***/
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <UsbLeaveLowPowerModeHook>:
**            exit low power mode.
** \return    none.
**
****************************************************************************************/
void UsbLeaveLowPowerModeHook(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* support to leave a low power mode can be implemented here */
} /*** end of UsbLeaveLowPowerMode ***/
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <FileIsFirmwareUpdateRequestedHook>:
**            storage, etc.
** \return    BLT_TRUE if a firmware update is requested, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileIsFirmwareUpdateRequestedHook(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0c6      	sub	sp, #280	; 0x118
 80006a8:	af00      	add	r7, sp, #0
  FILINFO fileInfoObject = { 0 }; /* needs to be zeroed according to f_stat docs */;
 80006aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80006b2:	4618      	mov	r0, r3
 80006b4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80006b8:	461a      	mov	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f00e faaf 	bl	800ec1e <memset>
   * update is started. When successfully completed, the firmware file is deleted.
   * During the firmware update, progress information is written to a file called
   * bootlog.txt and additionally outputted on UART @57600 bps for debugging purposes.
   */
  /* check if firmware file is present and SD-card is accessible */
  if (f_stat(firmwareFilename, &fileInfoObject) == FR_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <FileIsFirmwareUpdateRequestedHook+0x5c>)
 80006c6:	f00d fa85 	bl	800dbd4 <f_stat>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d111      	bne.n	80006f4 <FileIsFirmwareUpdateRequestedHook+0x50>
  {
    /* check if the filesize is valid and that it is not a directory */
    if ( (fileInfoObject.fsize > 0) && (!(fileInfoObject.fattrib & AM_DIR)) )
 80006d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00a      	beq.n	80006f4 <FileIsFirmwareUpdateRequestedHook+0x50>
 80006de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80006e6:	7a1b      	ldrb	r3, [r3, #8]
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <FileIsFirmwareUpdateRequestedHook+0x50>
    {
      /* all conditions are met to start a firmware update from local file storage */
      return BLT_TRUE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <FileIsFirmwareUpdateRequestedHook+0x52>
    }
  }
  /* still here so no firmware update request is pending */
  return BLT_FALSE;
 80006f4:	2300      	movs	r3, #0
} /*** end of FileIsFirmwareUpdateRequestedHook ***/
 80006f6:	4618      	mov	r0, r3
 80006f8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	0800f0ec 	.word	0x0800f0ec

08000704 <FileGetFirmwareFilenameHook>:
**            local storage sequence.
** \return    valid firmware filename with full path or BLT_NULL.
**
****************************************************************************************/
const blt_char *FileGetFirmwareFilenameHook(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return firmwareFilename;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <FileGetFirmwareFilenameHook+0x10>)
} /*** end of FileGetFirmwareFilenameHook ***/
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	0800f0ec 	.word	0x0800f0ec

08000718 <FileFirmwareUpdateStartedHook>:
**            update from local storage just started.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateStartedHook(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* create/overwrite the logfile */
  logfile.canUse = BLT_FALSE;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <FileFirmwareUpdateStartedHook+0x28>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  if (f_open(&logfile.handle, "/bootlog.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8000724:	220a      	movs	r2, #10
 8000726:	4907      	ldr	r1, [pc, #28]	; (8000744 <FileFirmwareUpdateStartedHook+0x2c>)
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <FileFirmwareUpdateStartedHook+0x28>)
 800072a:	f00c fcc9 	bl	800d0c0 <f_open>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <FileFirmwareUpdateStartedHook+0x24>
  {
    logfile.canUse = BLT_TRUE;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <FileFirmwareUpdateStartedHook+0x28>)
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  }
  #endif
} /*** end of FileFirmwareUpdateStartedHook ***/
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200001a4 	.word	0x200001a4
 8000744:	0800ec90 	.word	0x0800ec90

08000748 <FileFirmwareUpdateCompletedHook>:
**            update was successfully completed.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateCompletedHook(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  blt_int32u timeoutTime;

  /* close the log file */
  if (logfile.canUse == BLT_TRUE)
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <FileFirmwareUpdateCompletedHook+0x4c>)
 8000750:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000754:	2b01      	cmp	r3, #1
 8000756:	d102      	bne.n	800075e <FileFirmwareUpdateCompletedHook+0x16>
  {
    f_close(&logfile.handle);
 8000758:	480e      	ldr	r0, [pc, #56]	; (8000794 <FileFirmwareUpdateCompletedHook+0x4c>)
 800075a:	f00d f8ef 	bl	800d93c <f_close>
  }
  /* wait for all logging related transmission to complete with a maximum wait time of
   * 100ms.
   */
  timeoutTime = TimerGet() + 100;
 800075e:	f008 fd11 	bl	8009184 <TimerGet>
 8000762:	4603      	mov	r3, r0
 8000764:	3364      	adds	r3, #100	; 0x64
 8000766:	607b      	str	r3, [r7, #4]
  while (LL_USART_IsActiveFlag_TC(USART2) == 0)
 8000768:	e005      	b.n	8000776 <FileFirmwareUpdateCompletedHook+0x2e>
  {
    /* check for timeout */
    if (TimerGet() > timeoutTime)
 800076a:	f008 fd0b 	bl	8009184 <TimerGet>
 800076e:	4602      	mov	r2, r0
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4293      	cmp	r3, r2
 8000774:	d306      	bcc.n	8000784 <FileFirmwareUpdateCompletedHook+0x3c>
  while (LL_USART_IsActiveFlag_TC(USART2) == 0)
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <FileFirmwareUpdateCompletedHook+0x50>)
 8000778:	f7ff fee2 	bl	8000540 <LL_USART_IsActiveFlag_TC>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f3      	beq.n	800076a <FileFirmwareUpdateCompletedHook+0x22>
 8000782:	e000      	b.n	8000786 <FileFirmwareUpdateCompletedHook+0x3e>
    {
      break;
 8000784:	bf00      	nop
    }
  }
  #endif
  /* now delete the firmware file from the disk since the update was successful */
  f_unlink(firmwareFilename);
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <FileFirmwareUpdateCompletedHook+0x54>)
 8000788:	f00d fa66 	bl	800dc58 <f_unlink>
} /*** end of FileFirmwareUpdateCompletedHook ***/
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001a4 	.word	0x200001a4
 8000798:	40004400 	.word	0x40004400
 800079c:	0800f0ec 	.word	0x0800f0ec

080007a0 <FileFirmwareUpdateErrorHook>:
**            update. Refer to <file.h> for a list of available error codes.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateErrorHook(blt_int8u error_code)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* error detected which stops the firmware update, so close the log file */
  if (logfile.canUse == BLT_TRUE)
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <FileFirmwareUpdateErrorHook+0x24>)
 80007ac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d102      	bne.n	80007ba <FileFirmwareUpdateErrorHook+0x1a>
  {
    f_close(&logfile.handle);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <FileFirmwareUpdateErrorHook+0x24>)
 80007b6:	f00d f8c1 	bl	800d93c <f_close>
  }
  #endif
} /*** end of FileFirmwareUpdateErrorHook ***/
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200001a4 	.word	0x200001a4

080007c8 <FileFirmwareUpdateLogHook>:
** \param     info_string Pointer to a character array with the log entry info.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateLogHook(blt_char *info_string)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  blt_int32u timeoutTime;

  /* write the string to the log file */
  if (logfile.canUse == BLT_TRUE)
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <FileFirmwareUpdateLogHook+0x80>)
 80007d2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d12d      	bne.n	8000836 <FileFirmwareUpdateLogHook+0x6e>
  {
    if (f_puts(info_string, &logfile.handle) < 0)
 80007da:	491b      	ldr	r1, [pc, #108]	; (8000848 <FileFirmwareUpdateLogHook+0x80>)
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f00d fb5b 	bl	800de98 <f_puts>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	da26      	bge.n	8000836 <FileFirmwareUpdateLogHook+0x6e>
    {
      logfile.canUse = BLT_FALSE;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <FileFirmwareUpdateLogHook+0x80>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
      f_close(&logfile.handle);
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <FileFirmwareUpdateLogHook+0x80>)
 80007f2:	f00d f8a3 	bl	800d93c <f_close>
    }
  }
  /* echo all characters in the string on UART */
  while(*info_string != '\0')
 80007f6:	e01e      	b.n	8000836 <FileFirmwareUpdateLogHook+0x6e>
  {
    /* write byte to transmit holding register */
    LL_USART_TransmitData8(USART2, *info_string);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	4813      	ldr	r0, [pc, #76]	; (800084c <FileFirmwareUpdateLogHook+0x84>)
 8000800:	f7ff fec4 	bl	800058c <LL_USART_TransmitData8>
    /* set timeout time to wait for transmit completion. */
    timeoutTime = TimerGet() + 10;
 8000804:	f008 fcbe 	bl	8009184 <TimerGet>
 8000808:	4603      	mov	r3, r0
 800080a:	330a      	adds	r3, #10
 800080c:	60fb      	str	r3, [r7, #12]
    /* wait for tx holding register to be empty */
    while (LL_USART_IsActiveFlag_TXE(USART2) == 0)
 800080e:	e007      	b.n	8000820 <FileFirmwareUpdateLogHook+0x58>
    {
      /* keep the watchdog happy */
      CopService();
 8000810:	f009 f981 	bl	8009b16 <CopService>
      /* break loop upon timeout. this would indicate a hardware failure. */
      if (TimerGet() > timeoutTime)
 8000814:	f008 fcb6 	bl	8009184 <TimerGet>
 8000818:	4602      	mov	r2, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4293      	cmp	r3, r2
 800081e:	d306      	bcc.n	800082e <FileFirmwareUpdateLogHook+0x66>
    while (LL_USART_IsActiveFlag_TXE(USART2) == 0)
 8000820:	480a      	ldr	r0, [pc, #40]	; (800084c <FileFirmwareUpdateLogHook+0x84>)
 8000822:	f7ff fea0 	bl	8000566 <LL_USART_IsActiveFlag_TXE>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f1      	beq.n	8000810 <FileFirmwareUpdateLogHook+0x48>
 800082c:	e000      	b.n	8000830 <FileFirmwareUpdateLogHook+0x68>
      {
        break;
 800082e:	bf00      	nop
      }
    }
    /* point to the next character in the string */
    info_string++;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3301      	adds	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
  while(*info_string != '\0')
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1dc      	bne.n	80007f8 <FileFirmwareUpdateLogHook+0x30>
  }
} /*** end of FileFirmwareUpdateLogHook ***/
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200001a4 	.word	0x200001a4
 800084c:	40004400 	.word	0x40004400

08000850 <LL_GPIO_SetOutputPin>:
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	619a      	str	r2, [r3, #24]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <LL_GPIO_ResetOutputPin>:
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	041a      	lsls	r2, r3, #16
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	619a      	str	r2, [r3, #24]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <LedBlinkInit>:
** \param     interval_ms Specifies the desired LED blink interval time in milliseconds.
** \return    none.
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <LedBlinkInit+0x1c>)
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	8013      	strh	r3, [r2, #0]
} /*** end of LedBlinkInit ***/
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	200003d2 	.word	0x200003d2

080008ac <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 80008b0:	f008 fc68 	bl	8009184 <TimerGet>
 80008b4:	4602      	mov	r2, r0
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <LedBlinkTask+0x50>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d31c      	bcc.n	80008f8 <LedBlinkTask+0x4c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <LedBlinkTask+0x54>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d108      	bne.n	80008d8 <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <LedBlinkTask+0x54>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
      LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12);
 80008cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LedBlinkTask+0x58>)
 80008d2:	f7ff ffcb 	bl	800086c <LL_GPIO_ResetOutputPin>
 80008d6:	e007      	b.n	80008e8 <LedBlinkTask+0x3c>
    }
    else
    {
      ledOn = BLT_FALSE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <LedBlinkTask+0x54>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
      LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
 80008de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e2:	4808      	ldr	r0, [pc, #32]	; (8000904 <LedBlinkTask+0x58>)
 80008e4:	f7ff ffb4 	bl	8000850 <LL_GPIO_SetOutputPin>
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 80008e8:	f008 fc4c 	bl	8009184 <TimerGet>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a06      	ldr	r2, [pc, #24]	; (8000908 <LedBlinkTask+0x5c>)
 80008f0:	8812      	ldrh	r2, [r2, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a01      	ldr	r2, [pc, #4]	; (80008fc <LedBlinkTask+0x50>)
 80008f6:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200003d4 	.word	0x200003d4
 8000900:	200003d8 	.word	0x200003d8
 8000904:	40020c00 	.word	0x40020c00
 8000908:	200003d2 	.word	0x200003d2

0800090c <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* turn the LED off */
  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <LedBlinkExit+0x14>)
 8000916:	f7ff ff9b 	bl	8000850 <LL_GPIO_SetOutputPin>
} /*** end of LedBlinkExit ***/
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40020c00 	.word	0x40020c00

08000924 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <LL_RCC_HSE_Enable+0x1c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <LL_RCC_HSE_Enable+0x1c>)
 800092e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <LL_RCC_HSE_IsReady+0x24>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000954:	bf0c      	ite	eq
 8000956:	2301      	moveq	r3, #1
 8000958:	2300      	movne	r3, #0
 800095a:	b2db      	uxtb	r3, r3
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <LL_RCC_SetSysClkSource+0x24>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f023 0203 	bic.w	r2, r3, #3
 800097c:	4904      	ldr	r1, [pc, #16]	; (8000990 <LL_RCC_SetSysClkSource+0x24>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	608b      	str	r3, [r1, #8]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40023800 	.word	0x40023800

08000994 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <LL_RCC_GetSysClkSource+0x18>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 030c 	and.w	r3, r3, #12
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009c0:	4904      	ldr	r1, [pc, #16]	; (80009d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	608b      	str	r3, [r1, #8]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40023800 	.word	0x40023800

080009d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80009e8:	4904      	ldr	r1, [pc, #16]	; (80009fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	608b      	str	r3, [r1, #8]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	40023800 	.word	0x40023800

08000a00 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a10:	4904      	ldr	r1, [pc, #16]	; (8000a24 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	608b      	str	r3, [r1, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40023800 	.word	0x40023800

08000a28 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <LL_RCC_PLL_Enable+0x1c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <LL_RCC_PLL_Enable+0x1c>)
 8000a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <LL_RCC_PLL_IsReady+0x24>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a58:	bf0c      	ite	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	68f9      	ldr	r1, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	4311      	orrs	r1, r2
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	0192      	lsls	r2, r2, #6
 8000a90:	430a      	orrs	r2, r1
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a94:	4313      	orrs	r3, r2
 8000a96:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000aa0:	4904      	ldr	r1, [pc, #16]	; (8000ab4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	ffbf8000 	.word	0xffbf8000

08000abc <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	68f9      	ldr	r1, [r7, #12]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	4311      	orrs	r1, r2
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	0192      	lsls	r2, r2, #6
 8000adc:	4311      	orrs	r1, r2
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	4904      	ldr	r1, [pc, #16]	; (8000af4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800
 8000af8:	f0bf8000 	.word	0xf0bf8000

08000afc <LL_AHB1_GRP1_EnableClock>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4013      	ands	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800

08000b2c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b38:	4907      	ldr	r1, [pc, #28]	; (8000b58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800

08000b5c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <LL_FLASH_SetLatency+0x24>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f023 0207 	bic.w	r2, r3, #7
 8000b6c:	4904      	ldr	r1, [pc, #16]	; (8000b80 <LL_FLASH_SetLatency+0x24>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	600b      	str	r3, [r1, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <LL_FLASH_GetLatency+0x18>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000bb0:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <LL_USART_Enable>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60da      	str	r2, [r3, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_USART_ConfigAsyncMode>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	615a      	str	r2, [r3, #20]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_GPIO_SetOutputPin>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	619a      	str	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 faea 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f80a 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f8ac 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 f85a 	bl	8000cf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the bootloader application. */
  AppInit();
 8000c44:	f7ff fc3e 	bl	80004c4 <AppInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Run the bootloader application. */
    AppTask();
 8000c48:	f7ff fc42 	bl	80004d0 <AppTask>
 8000c4c:	e7fc      	b.n	8000c48 <main+0x18>
	...

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000c54:	2005      	movs	r0, #5
 8000c56:	f7ff ff81 	bl	8000b5c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ff92 	bl	8000b84 <LL_FLASH_GetLatency>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b05      	cmp	r3, #5
 8000c64:	d1fa      	bne.n	8000c5c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000c66:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c6a:	f7ff ff99 	bl	8000ba0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000c6e:	f7ff fe59 	bl	8000924 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000c72:	bf00      	nop
 8000c74:	f7ff fe66 	bl	8000944 <LL_RCC_HSE_IsReady>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d1fa      	bne.n	8000c74 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000c84:	2108      	movs	r1, #8
 8000c86:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000c8a:	f7ff fef1 	bl	8000a70 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLQ_DIV_7);
 8000c8e:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8000c92:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000c96:	2108      	movs	r1, #8
 8000c98:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000c9c:	f7ff ff0e 	bl	8000abc <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000ca0:	f7ff fec2 	bl	8000a28 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000ca4:	bf00      	nop
 8000ca6:	f7ff fecf 	bl	8000a48 <LL_RCC_PLL_IsReady>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d1fa      	bne.n	8000ca6 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fe7d 	bl	80009b0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000cb6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000cba:	f7ff fe8d 	bl	80009d8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000cbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cc2:	f7ff fe9d 	bl	8000a00 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff fe50 	bl	800096c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ccc:	bf00      	nop
 8000cce:	f7ff fe61 	bl	8000994 <LL_RCC_GetSysClkSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d1fa      	bne.n	8000cce <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <SystemClock_Config+0xa4>)
 8000cda:	f005 faf7 	bl	80062cc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 fae2 	bl	80012a8 <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cea:	f000 f8ab 	bl	8000e44 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0a037a00 	.word	0x0a037a00

08000cf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000d22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d26:	f7ff ff01 	bl	8000b2c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fee6 	bl	8000afc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000d30:	230c      	movs	r3, #12
 8000d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d34:	2302      	movs	r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000d44:	2307      	movs	r3, #7
 8000d46:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4810      	ldr	r0, [pc, #64]	; (8000d90 <MX_USART2_UART_Init+0x98>)
 8000d4e:	f003 f993 	bl	8004078 <LL_GPIO_Init>
  /* USER CODE BEGIN USART2_Init 1 */
  /* Note that the USART initialization that follows here is don't care. It is
   * reconfigured upon bootloader initialization with function Rs232Init().
   */
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000d52:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d56:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d64:	230c      	movs	r3, #12
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_USART2_UART_Init+0x9c>)
 8000d78:	f003 feb4 	bl	8004ae4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x9c>)
 8000d7e:	f7ff ff33 	bl	8000be8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_USART2_UART_Init+0x9c>)
 8000d84:	f7ff ff20 	bl	8000bc8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3738      	adds	r7, #56	; 0x38
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000dae:	2080      	movs	r0, #128	; 0x80
 8000db0:	f7ff fea4 	bl	8000afc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fea1 	bl	8000afc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f7ff fe9e 	bl	8000afc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	f7ff fe9b 	bl	8000afc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000dc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dca:	481b      	ldr	r0, [pc, #108]	; (8000e38 <MX_GPIO_Init+0xa0>)
 8000dcc:	f7ff ff22 	bl	8000c14 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_12);
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	4819      	ldr	r0, [pc, #100]	; (8000e3c <MX_GPIO_Init+0xa4>)
 8000dd6:	f7ff ff1d 	bl	8000c14 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4815      	ldr	r0, [pc, #84]	; (8000e40 <MX_GPIO_Init+0xa8>)
 8000dec:	f003 f944 	bl	8004078 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000df6:	2301      	movs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_GPIO_Init+0xa0>)
 8000e0c:	f003 f934 	bl	8004078 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_GPIO_Init+0xa4>)
 8000e2c:	f003 f924 	bl	8004078 <LL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020000 	.word	0x40020000

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <LL_AHB1_GRP1_DisableClock>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <LL_AHB1_GRP1_DisableClock+0x24>)
 8000e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4904      	ldr	r1, [pc, #16]	; (8000e78 <LL_AHB1_GRP1_DisableClock+0x24>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <LL_AHB2_GRP1_DisableClock>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_AHB2_GRP1_DisableClock+0x24>)
 8000e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <LL_AHB2_GRP1_DisableClock+0x24>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <LL_APB1_GRP1_DisableClock+0x24>)
 8000eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <LL_APB1_GRP1_DisableClock+0x24>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <LL_APB2_GRP1_DisableClock+0x24>)
 8000ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4904      	ldr	r1, [pc, #16]	; (8000ef0 <LL_APB2_GRP1_DisableClock+0x24>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <LL_USART_Disable>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60da      	str	r2, [r3, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_CAN_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12c      	bne.n	8000fe0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_CAN_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_CAN_MspInit+0x88>)
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_CAN_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_CAN_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_CAN_MspInit+0x88>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_CAN_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fd0:	2309      	movs	r3, #9
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_CAN_MspInit+0x8c>)
 8000fdc:	f001 f9bc 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40006400 	.word	0x40006400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001014:	d132      	bne.n	800107c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_PCD_MspInit+0x90>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_PCD_MspInit+0x90>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_PCD_MspInit+0x90>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001032:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001044:	230a      	movs	r3, #10
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <HAL_PCD_MspInit+0x94>)
 8001050:	f001 f982 	bl	8002358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_PCD_MspInit+0x90>)
 8001056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_PCD_MspInit+0x90>)
 800105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105e:	6353      	str	r3, [r2, #52]	; 0x34
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_PCD_MspInit+0x90>)
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_PCD_MspInit+0x90>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	6453      	str	r3, [r2, #68]	; 0x44
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_PCD_MspInit+0x90>)
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000

0800108c <HAL_PCD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspDeInit(PCD_HandleTypeDef* hpcd)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB_OTG_FS)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109c:	d10a      	bne.n	80010b4 <HAL_PCD_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_PCD_MspDeInit+0x30>)
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_PCD_MspDeInit+0x30>)
 80010a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010a8:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80010aa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <HAL_PCD_MspDeInit+0x34>)
 80010b0:	f001 faee 	bl	8002690 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <HAL_MspDeInit>:
/* USER CODE BEGIN 1 */
/**
  * De-Initializes the Global MSP.
  */
void HAL_MspDeInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 80010c8:	f003 f906 	bl	80042d8 <LL_RCC_DeInit>

  /* USB clock disable. */
  LL_AHB2_GRP1_DisableClock(LL_AHB2_GRP1_PERIPH_OTGFS);
 80010cc:	2080      	movs	r0, #128	; 0x80
 80010ce:	f7ff fed5 	bl	8000e7c <LL_AHB2_GRP1_DisableClock>

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOC);
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <HAL_MspDeInit+0x5c>)
 80010d4:	f002 ff4c 	bl	8003f70 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOB);
 80010d8:	4812      	ldr	r0, [pc, #72]	; (8001124 <HAL_MspDeInit+0x60>)
 80010da:	f002 ff49 	bl	8003f70 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <HAL_MspDeInit+0x64>)
 80010e0:	f002 ff46 	bl	8003f70 <LL_GPIO_DeInit>

  /* CAN clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_CAN1);
 80010e4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80010e8:	f7ff fedc 	bl	8000ea4 <LL_APB1_GRP1_DisableClock>

  /* Disable UART peripheral */
  LL_USART_Disable(USART2);
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <HAL_MspDeInit+0x68>)
 80010ee:	f7ff ff01 	bl	8000ef4 <LL_USART_Disable>
  /* UART clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_USART2);
 80010f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010f6:	f7ff fed5 	bl	8000ea4 <LL_APB1_GRP1_DisableClock>

  /* GPIO ports clock disable. */
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010fa:	2004      	movs	r0, #4
 80010fc:	f7ff feaa 	bl	8000e54 <LL_AHB1_GRP1_DisableClock>
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff fea7 	bl	8000e54 <LL_AHB1_GRP1_DisableClock>
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fea4 	bl	8000e54 <LL_AHB1_GRP1_DisableClock>

  /* SYSCFG and PWR clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
 800110c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001110:	f7ff fec8 	bl	8000ea4 <LL_APB1_GRP1_DisableClock>
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001114:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001118:	f7ff fed8 	bl	8000ecc <LL_APB2_GRP1_DisableClock>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020800 	.word	0x40020800
 8001124:	40020400 	.word	0x40020400
 8001128:	40020000 	.word	0x40020000
 800112c:	40004400 	.word	0x40004400

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f8c0 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <SystemInit+0x28>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <SystemInit+0x28>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SystemInit+0x28>)
 80011a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a6:	609a      	str	r2, [r3, #8]
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011bc:	f7ff ffe6 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f00d fd23 	bl	800ec30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fd21 	bl	8000c30 <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80011fc:	0800f71c 	.word	0x0800f71c
  ldr r2, =_sbss
 8001200:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001204:	20001c74 	.word	0x20001c74

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 fd83 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f834 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fe68 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_DeInit+0x54>)
 8001256:	f04f 32ff 	mov.w	r2, #4294967295
 800125a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_DeInit+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_DeInit+0x54>)
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_DeInit+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_DeInit+0x54>)
 8001272:	f04f 32ff 	mov.w	r2, #4294967295
 8001276:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_DeInit+0x54>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_DeInit+0x54>)
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_DeInit+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_DeInit+0x54>)
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_DeInit+0x54>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800129a:	f7ff ff13 	bl	80010c4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fd61 	bl	8001d8e <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 fd37 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	200007e4 	.word	0x200007e4

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f007 ff2e 	bl	8009198 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f007 ff1e 	bl	8009198 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0ed      	b.n	8001566 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fde4 	bl	8000f64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0202 	bic.w	r2, r2, #2
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ac:	f007 fef4 	bl	8009198 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b2:	e012      	b.n	80013da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013b4:	f007 fef0 	bl	8009198 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d90b      	bls.n	80013da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0c5      	b.n	8001566 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e5      	bne.n	80013b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f8:	f007 fece 	bl	8009198 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013fe:	e012      	b.n	8001426 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001400:	f007 feca 	bl	8009198 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b0a      	cmp	r3, #10
 800140c:	d90b      	bls.n	8001426 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2205      	movs	r2, #5
 800141e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e09f      	b.n	8001566 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0e5      	beq.n	8001400 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7e1b      	ldrb	r3, [r3, #24]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d108      	bne.n	800144e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e007      	b.n	800145e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7e5b      	ldrb	r3, [r3, #25]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e007      	b.n	8001488 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001486:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e9b      	ldrb	r3, [r3, #26]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d108      	bne.n	80014a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0220 	orr.w	r2, r2, #32
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e007      	b.n	80014b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0220 	bic.w	r2, r2, #32
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7edb      	ldrb	r3, [r3, #27]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0210 	bic.w	r2, r2, #16
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e007      	b.n	80014dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0210 	orr.w	r2, r2, #16
 80014da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7f1b      	ldrb	r3, [r3, #28]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0208 	orr.w	r2, r2, #8
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e007      	b.n	8001506 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0208 	bic.w	r2, r2, #8
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7f5b      	ldrb	r3, [r3, #29]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0204 	orr.w	r2, r2, #4
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e007      	b.n	8001530 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0204 	bic.w	r2, r2, #4
 800152e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	ea42 0103 	orr.w	r1, r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	1e5a      	subs	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001586:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001588:	7cfb      	ldrb	r3, [r7, #19]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d003      	beq.n	8001596 <HAL_CAN_ConfigFilter+0x26>
 800158e:	7cfb      	ldrb	r3, [r7, #19]
 8001590:	2b02      	cmp	r3, #2
 8001592:	f040 80be 	bne.w	8001712 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_CAN_ConfigFilter+0x1bc>)
 8001598:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	2201      	movs	r2, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	401a      	ands	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d123      	bne.n	8001640 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800161a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3248      	adds	r2, #72	; 0x48
 8001620:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001634:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001636:	6979      	ldr	r1, [r7, #20]
 8001638:	3348      	adds	r3, #72	; 0x48
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d122      	bne.n	800168e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001668:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3248      	adds	r2, #72	; 0x48
 800166e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001682:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001684:	6979      	ldr	r1, [r7, #20]
 8001686:	3348      	adds	r3, #72	; 0x48
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	401a      	ands	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016a8:	e007      	b.n	80016ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	401a      	ands	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	431a      	orrs	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001704:	f023 0201 	bic.w	r2, r3, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e006      	b.n	8001720 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
  }
}
 8001720:	4618      	mov	r0, r3
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40006400 	.word	0x40006400

08001730 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d12e      	bne.n	80017a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800175c:	f007 fd1c 	bl	8009198 <HAL_GetTick>
 8001760:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001762:	e012      	b.n	800178a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001764:	f007 fd18 	bl	8009198 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b0a      	cmp	r3, #10
 8001770:	d90b      	bls.n	800178a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2205      	movs	r2, #5
 8001782:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e012      	b.n	80017b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1e5      	bne.n	8001764 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e006      	b.n	80017b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
  }
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d003      	beq.n	80017e4 <HAL_CAN_AddTxMessage+0x2c>
 80017dc:	7ffb      	ldrb	r3, [r7, #31]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	f040 80b8 	bne.w	8001954 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a0 	beq.w	8001944 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	0e1b      	lsrs	r3, r3, #24
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d907      	bls.n	8001824 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e09e      	b.n	8001962 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001824:	2201      	movs	r2, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	409a      	lsls	r2, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	6809      	ldr	r1, [r1, #0]
 8001844:	431a      	orrs	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3318      	adds	r3, #24
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	440b      	add	r3, r1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e00f      	b.n	8001872 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800185c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001866:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3318      	adds	r3, #24
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	440b      	add	r3, r1
 8001870:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3318      	adds	r3, #24
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	440b      	add	r3, r1
 8001882:	3304      	adds	r3, #4
 8001884:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	7d1b      	ldrb	r3, [r3, #20]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d111      	bne.n	80018b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3318      	adds	r3, #24
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	3304      	adds	r3, #4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	6811      	ldr	r1, [r2, #0]
 80018a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3318      	adds	r3, #24
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	440b      	add	r3, r1
 80018ae:	3304      	adds	r3, #4
 80018b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3307      	adds	r3, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	061a      	lsls	r2, r3, #24
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3306      	adds	r3, #6
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3305      	adds	r3, #5
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4313      	orrs	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	3204      	adds	r2, #4
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	4610      	mov	r0, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	6811      	ldr	r1, [r2, #0]
 80018da:	ea43 0200 	orr.w	r2, r3, r0
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80018e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3303      	adds	r3, #3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	061a      	lsls	r2, r3, #24
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3302      	adds	r3, #2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3301      	adds	r3, #1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	4313      	orrs	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	4610      	mov	r0, r2
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	6811      	ldr	r1, [r2, #0]
 8001910:	ea43 0200 	orr.w	r2, r3, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	440b      	add	r3, r1
 800191a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800191e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3318      	adds	r3, #24
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	6811      	ldr	r1, [r2, #0]
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3318      	adds	r3, #24
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	440b      	add	r3, r1
 800193e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e00e      	b.n	8001962 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e006      	b.n	8001962 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001982:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d002      	beq.n	8001990 <HAL_CAN_IsTxMessagePending+0x22>
 800198a:	7afb      	ldrb	r3, [r7, #11]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d10b      	bne.n	80019a8 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	069b      	lsls	r3, r3, #26
 800199a:	401a      	ands	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	069b      	lsls	r3, r3, #26
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80019a4:	2301      	movs	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019b6:	b480      	push	{r7}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d003      	beq.n	80019da <HAL_CAN_GetRxMessage+0x24>
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 80f3 	bne.w	8001bc0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10e      	bne.n	80019fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0e7      	b.n	8001bce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d8      	b.n	8001bce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	331b      	adds	r3, #27
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0204 	and.w	r2, r3, #4
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	331b      	adds	r3, #27
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0d5b      	lsrs	r3, r3, #21
 8001a4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	331b      	adds	r3, #27
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	331b      	adds	r3, #27
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0202 	and.w	r2, r3, #2
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	331b      	adds	r3, #27
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3304      	adds	r3, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 020f 	and.w	r2, r3, #15
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	331b      	adds	r3, #27
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	331b      	adds	r3, #27
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	3304      	adds	r3, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0a1a      	lsrs	r2, r3, #8
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0c1a      	lsrs	r2, r3, #16
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0e1a      	lsrs	r2, r3, #24
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3304      	adds	r3, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0a1a      	lsrs	r2, r3, #8
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3305      	adds	r3, #5
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0c1a      	lsrs	r2, r3, #16
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	3306      	adds	r3, #6
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0e1a      	lsrs	r2, r3, #24
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	3307      	adds	r3, #7
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d108      	bne.n	8001bac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e007      	b.n	8001bbc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e006      	b.n	8001bce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff47 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff5c 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff8e 	bl	8001c94 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffb0 	bl	8001cfc <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001dba:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_FLASH_Program+0xa0>)
 8001dbc:	7e1b      	ldrb	r3, [r3, #24]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_FLASH_Program+0x1e>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e03b      	b.n	8001e3e <HAL_FLASH_Program+0x96>
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_FLASH_Program+0xa0>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dd0:	f000 f870 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d12b      	bne.n	8001e36 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001de4:	783b      	ldrb	r3, [r7, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	68b8      	ldr	r0, [r7, #8]
 8001dea:	f000 f91b 	bl	8002024 <FLASH_Program_Byte>
 8001dee:	e016      	b.n	8001e1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d105      	bne.n	8001e02 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001df6:	883b      	ldrh	r3, [r7, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f000 f8ee 	bl	8001fdc <FLASH_Program_HalfWord>
 8001e00:	e00d      	b.n	8001e1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d105      	bne.n	8001e14 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	68b8      	ldr	r0, [r7, #8]
 8001e0e:	f000 f8c3 	bl	8001f98 <FLASH_Program_Word>
 8001e12:	e004      	b.n	8001e1e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e18:	68b8      	ldr	r0, [r7, #8]
 8001e1a:	f000 f88b 	bl	8001f34 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e22:	f000 f847 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8001e26:	4603      	mov	r3, r0
 8001e28:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_FLASH_Program+0xa4>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_FLASH_Program+0xa4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_FLASH_Program+0xa0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200007e8 	.word	0x200007e8
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_FLASH_Unlock+0x38>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da0b      	bge.n	8001e7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_FLASH_Unlock+0x38>)
 8001e64:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_FLASH_Unlock+0x3c>)
 8001e66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_FLASH_Unlock+0x38>)
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_FLASH_Unlock+0x40>)
 8001e6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_FLASH_Unlock+0x38>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da01      	bge.n	8001e7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40023c00 	.word	0x40023c00
 8001e8c:	45670123 	.word	0x45670123
 8001e90:	cdef89ab 	.word	0xcdef89ab

08001e94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_FLASH_Lock+0x1c>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_FLASH_Lock+0x1c>)
 8001e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ea2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <FLASH_WaitForLastOperation+0x78>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec6:	f007 f967 	bl	8009198 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ecc:	e010      	b.n	8001ef0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d00c      	beq.n	8001ef0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <FLASH_WaitForLastOperation+0x38>
 8001edc:	f007 f95c 	bl	8009198 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d201      	bcs.n	8001ef0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e019      	b.n	8001f24 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <FLASH_WaitForLastOperation+0x7c>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e8      	bne.n	8001ece <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <FLASH_WaitForLastOperation+0x7c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <FLASH_WaitForLastOperation+0x7c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <FLASH_WaitForLastOperation+0x7c>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f1a:	f000 f8a5 	bl	8002068 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
  
}  
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200007e8 	.word	0x200007e8
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <FLASH_Program_DoubleWord+0x60>)
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <FLASH_Program_DoubleWord+0x60>)
 8001f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <FLASH_Program_DoubleWord+0x60>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <FLASH_Program_DoubleWord+0x60>)
 8001f52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <FLASH_Program_DoubleWord+0x60>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <FLASH_Program_DoubleWord+0x60>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001f6a:	f3bf 8f6f 	isb	sy
}
 8001f6e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	2300      	movs	r3, #0
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	3104      	adds	r1, #4
 8001f84:	4613      	mov	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023c00 	.word	0x40023c00

08001f98 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <FLASH_Program_Word+0x40>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <FLASH_Program_Word+0x40>)
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <FLASH_Program_Word+0x40>)
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <FLASH_Program_Word+0x40>)
 8001fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <FLASH_Program_Word+0x40>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <FLASH_Program_Word+0x40>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	601a      	str	r2, [r3, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40023c00 	.word	0x40023c00

08001fdc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <FLASH_Program_HalfWord+0x44>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <FLASH_Program_HalfWord+0x44>)
 8001fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <FLASH_Program_HalfWord+0x44>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	4a09      	ldr	r2, [pc, #36]	; (8002020 <FLASH_Program_HalfWord+0x44>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <FLASH_Program_HalfWord+0x44>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <FLASH_Program_HalfWord+0x44>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	801a      	strh	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00

08002024 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <FLASH_Program_Byte+0x40>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <FLASH_Program_Byte+0x40>)
 8002036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <FLASH_Program_Byte+0x40>)
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <FLASH_Program_Byte+0x40>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <FLASH_Program_Byte+0x40>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <FLASH_Program_Byte+0x40>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	701a      	strb	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00

08002068 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <FLASH_SetErrorCode+0xa4>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f043 0310 	orr.w	r3, r3, #16
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 8002082:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <FLASH_SetErrorCode+0xa4>)
 8002086:	2210      	movs	r2, #16
 8002088:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <FLASH_SetErrorCode+0xa4>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 80020a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <FLASH_SetErrorCode+0xa4>)
 80020a4:	2220      	movs	r2, #32
 80020a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <FLASH_SetErrorCode+0xa4>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 80020be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <FLASH_SetErrorCode+0xa4>)
 80020c2:	2240      	movs	r2, #64	; 0x40
 80020c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <FLASH_SetErrorCode+0xa4>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 80020dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <FLASH_SetErrorCode+0xa4>)
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <FLASH_SetErrorCode+0xa4>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	4a05      	ldr	r2, [pc, #20]	; (8002110 <FLASH_SetErrorCode+0xa8>)
 80020fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <FLASH_SetErrorCode+0xa4>)
 80020fe:	2202      	movs	r2, #2
 8002100:	60da      	str	r2, [r3, #12]
  }
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40023c00 	.word	0x40023c00
 8002110:	200007e8 	.word	0x200007e8

08002114 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_FLASHEx_Erase+0xd8>)
 8002128:	7e1b      	ldrb	r3, [r3, #24]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_FLASHEx_Erase+0x1e>
 800212e:	2302      	movs	r3, #2
 8002130:	e058      	b.n	80021e4 <HAL_FLASHEx_Erase+0xd0>
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_FLASHEx_Erase+0xd8>)
 8002134:	2201      	movs	r2, #1
 8002136:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002138:	f24c 3050 	movw	r0, #50000	; 0xc350
 800213c:	f7ff feba 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8002140:	4603      	mov	r3, r0
 8002142:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d148      	bne.n	80021dc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d115      	bne.n	8002186 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f000 f844 	bl	80021f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800216c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002170:	f7ff fea0 	bl	8001eb4 <FLASH_WaitForLastOperation>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_FLASHEx_Erase+0xdc>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_FLASHEx_Erase+0xdc>)
 800217e:	f023 0304 	bic.w	r3, r3, #4
 8002182:	6113      	str	r3, [r2, #16]
 8002184:	e028      	b.n	80021d8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	e01c      	b.n	80021c8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	68b8      	ldr	r0, [r7, #8]
 8002198:	f000 f850 	bl	800223c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800219c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021a0:	f7ff fe88 	bl	8001eb4 <FLASH_WaitForLastOperation>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_FLASHEx_Erase+0xdc>)
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_FLASHEx_Erase+0xdc>)
 80021ae:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80021b2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	601a      	str	r2, [r3, #0]
          break;
 80021c0:	e00a      	b.n	80021d8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3301      	adds	r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4413      	add	r3, r2
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3da      	bcc.n	800218e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80021d8:	f000 f878 	bl	80022cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_FLASHEx_Erase+0xd8>)
 80021de:	2200      	movs	r2, #0
 80021e0:	761a      	strb	r2, [r3, #24]

  return status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200007e8 	.word	0x200007e8
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <FLASH_MassErase+0x44>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <FLASH_MassErase+0x44>)
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <FLASH_MassErase+0x44>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	4a09      	ldr	r2, [pc, #36]	; (8002238 <FLASH_MassErase+0x44>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <FLASH_MassErase+0x44>)
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	4313      	orrs	r3, r2
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <FLASH_MassErase+0x44>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6113      	str	r3, [r2, #16]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00

0800223c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e010      	b.n	800227a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d103      	bne.n	8002266 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800225e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e009      	b.n	800227a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d103      	bne.n	8002274 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800226c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e002      	b.n	800227a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002274:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002278:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	490f      	ldr	r1, [pc, #60]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 8002298:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800229c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <FLASH_Erase_Sector+0x8c>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	6113      	str	r3, [r2, #16]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40023c00 	.word	0x40023c00

080022cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <FLASH_FlushCaches+0x88>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d017      	beq.n	800230c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <FLASH_FlushCaches+0x88>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <FLASH_FlushCaches+0x88>)
 80022e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <FLASH_FlushCaches+0x88>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <FLASH_FlushCaches+0x88>)
 80022ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <FLASH_FlushCaches+0x88>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <FLASH_FlushCaches+0x88>)
 80022fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <FLASH_FlushCaches+0x88>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a13      	ldr	r2, [pc, #76]	; (8002354 <FLASH_FlushCaches+0x88>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <FLASH_FlushCaches+0x88>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d017      	beq.n	8002348 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <FLASH_FlushCaches+0x88>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <FLASH_FlushCaches+0x88>)
 800231e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002322:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <FLASH_FlushCaches+0x88>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <FLASH_FlushCaches+0x88>)
 800232a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <FLASH_FlushCaches+0x88>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <FLASH_FlushCaches+0x88>)
 8002336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800233a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <FLASH_FlushCaches+0x88>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <FLASH_FlushCaches+0x88>)
 8002342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002346:	6013      	str	r3, [r2, #0]
  }
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023c00 	.word	0x40023c00

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e16b      	b.n	800264c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 815a 	bne.w	8002646 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d00b      	beq.n	80023b2 <HAL_GPIO_Init+0x5a>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a6:	2b11      	cmp	r3, #17
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d130      	bne.n	8002414 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0xfc>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b12      	cmp	r3, #18
 8002452:	d123      	bne.n	800249c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80b4 	beq.w	8002646 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b60      	ldr	r3, [pc, #384]	; (8002664 <HAL_GPIO_Init+0x30c>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a5f      	ldr	r2, [pc, #380]	; (8002664 <HAL_GPIO_Init+0x30c>)
 80024e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_GPIO_Init+0x30c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fa:	4a5b      	ldr	r2, [pc, #364]	; (8002668 <HAL_GPIO_Init+0x310>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_GPIO_Init+0x314>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x226>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_GPIO_Init+0x318>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x222>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <HAL_GPIO_Init+0x31c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x21e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4f      	ldr	r2, [pc, #316]	; (8002678 <HAL_GPIO_Init+0x320>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x21a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4e      	ldr	r2, [pc, #312]	; (800267c <HAL_GPIO_Init+0x324>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x216>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4d      	ldr	r2, [pc, #308]	; (8002680 <HAL_GPIO_Init+0x328>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x212>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4c      	ldr	r2, [pc, #304]	; (8002684 <HAL_GPIO_Init+0x32c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x20e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4b      	ldr	r2, [pc, #300]	; (8002688 <HAL_GPIO_Init+0x330>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x20a>
 800255e:	2307      	movs	r3, #7
 8002560:	e00e      	b.n	8002580 <HAL_GPIO_Init+0x228>
 8002562:	2308      	movs	r3, #8
 8002564:	e00c      	b.n	8002580 <HAL_GPIO_Init+0x228>
 8002566:	2306      	movs	r3, #6
 8002568:	e00a      	b.n	8002580 <HAL_GPIO_Init+0x228>
 800256a:	2305      	movs	r3, #5
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x228>
 800256e:	2304      	movs	r3, #4
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x228>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x228>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x228>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x228>
 800257e:	2300      	movs	r3, #0
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002590:	4935      	ldr	r1, [pc, #212]	; (8002668 <HAL_GPIO_Init+0x310>)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_GPIO_Init+0x334>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c2:	4a32      	ldr	r2, [pc, #200]	; (800268c <HAL_GPIO_Init+0x334>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c8:	4b30      	ldr	r3, [pc, #192]	; (800268c <HAL_GPIO_Init+0x334>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_GPIO_Init+0x334>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_GPIO_Init+0x334>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_GPIO_Init+0x334>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_GPIO_Init+0x334>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_GPIO_Init+0x334>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	f67f ae90 	bls.w	8002374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	40013800 	.word	0x40013800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	40020800 	.word	0x40020800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40021000 	.word	0x40021000
 8002680:	40021400 	.word	0x40021400
 8002684:	40021800 	.word	0x40021800
 8002688:	40021c00 	.word	0x40021c00
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e0cd      	b.n	8002848 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	f040 80bd 	bne.w	8002842 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80026c8:	4a65      	ldr	r2, [pc, #404]	; (8002860 <HAL_GPIO_DeInit+0x1d0>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	4013      	ands	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_GPIO_DeInit+0x1d4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02b      	beq.n	800274a <HAL_GPIO_DeInit+0xba>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a5c      	ldr	r2, [pc, #368]	; (8002868 <HAL_GPIO_DeInit+0x1d8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d025      	beq.n	8002746 <HAL_GPIO_DeInit+0xb6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a5b      	ldr	r2, [pc, #364]	; (800286c <HAL_GPIO_DeInit+0x1dc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01f      	beq.n	8002742 <HAL_GPIO_DeInit+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a5a      	ldr	r2, [pc, #360]	; (8002870 <HAL_GPIO_DeInit+0x1e0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d019      	beq.n	800273e <HAL_GPIO_DeInit+0xae>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a59      	ldr	r2, [pc, #356]	; (8002874 <HAL_GPIO_DeInit+0x1e4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_DeInit+0xaa>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_GPIO_DeInit+0x1e8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_GPIO_DeInit+0xa6>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a57      	ldr	r2, [pc, #348]	; (800287c <HAL_GPIO_DeInit+0x1ec>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_GPIO_DeInit+0xa2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_GPIO_DeInit+0x1f0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_GPIO_DeInit+0x9e>
 800272a:	2307      	movs	r3, #7
 800272c:	e00e      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 800272e:	2308      	movs	r3, #8
 8002730:	e00c      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 8002732:	2306      	movs	r3, #6
 8002734:	e00a      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_DeInit+0xbc>
 800274a:	2300      	movs	r3, #0
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	d132      	bne.n	80027c2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800275c:	4b49      	ldr	r3, [pc, #292]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	4947      	ldr	r1, [pc, #284]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 8002766:	4013      	ands	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	4944      	ldr	r1, [pc, #272]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 8002774:	4013      	ands	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	4940      	ldr	r1, [pc, #256]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 8002782:	4013      	ands	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	493d      	ldr	r1, [pc, #244]	; (8002884 <HAL_GPIO_DeInit+0x1f4>)
 8002790:	4013      	ands	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80027a4:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <HAL_GPIO_DeInit+0x1d0>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	43da      	mvns	r2, r3
 80027b4:	482a      	ldr	r0, [pc, #168]	; (8002860 <HAL_GPIO_DeInit+0x1d0>)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	400a      	ands	r2, r1
 80027bc:	3302      	adds	r3, #2
 80027be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2103      	movs	r1, #3
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	08d2      	lsrs	r2, r2, #3
 80027f8:	4019      	ands	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2103      	movs	r1, #3
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	401a      	ands	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	2101      	movs	r1, #1
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	401a      	ands	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2103      	movs	r1, #3
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f af2e 	bls.w	80026ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40013c00 	.word	0x40013c00

08002888 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	b08f      	sub	sp, #60	; 0x3c
 800288c:	af0a      	add	r7, sp, #40	; 0x28
 800288e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e10f      	b.n	8002aba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fb9d 	bl	8000ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 fa98 	bl	8004e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	687e      	ldr	r6, [r7, #4]
 80028e6:	466d      	mov	r5, sp
 80028e8:	f106 0410 	add.w	r4, r6, #16
 80028ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80028fc:	1d33      	adds	r3, r6, #4
 80028fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002900:	6838      	ldr	r0, [r7, #0]
 8002902:	f002 f96f 	bl	8004be4 <USB_CoreInit>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0d0      	b.n	8002aba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fa86 	bl	8004e30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e04a      	b.n	80029c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	333d      	adds	r3, #61	; 0x3d
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	333c      	adds	r3, #60	; 0x3c
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	b298      	uxth	r0, r3
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3342      	adds	r3, #66	; 0x42
 8002966:	4602      	mov	r2, r0
 8002968:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	333f      	adds	r3, #63	; 0x3f
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3344      	adds	r3, #68	; 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3348      	adds	r3, #72	; 0x48
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3350      	adds	r3, #80	; 0x50
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	3301      	adds	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3af      	bcc.n	800292a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	e044      	b.n	8002a5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	3301      	adds	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d3b5      	bcc.n	80029d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	687e      	ldr	r6, [r7, #4]
 8002a6c:	466d      	mov	r5, sp
 8002a6e:	f106 0410 	add.w	r4, r6, #16
 8002a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a82:	1d33      	adds	r3, r6, #4
 8002a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a86:	6838      	ldr	r0, [r7, #0]
 8002a88:	f002 f9fc 	bl	8004e84 <USB_DevInit>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00d      	b.n	8002aba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fa93 	bl	8005fde <USB_DevDisconnect>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac2 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e015      	b.n	8002b00 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 f9e6 	bl	8005eb2 <USB_StopDevice>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e007      	b.n	8002b00 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe facb 	bl	800108c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_Start+0x1c>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e020      	b.n	8002b66 <HAL_PCD_Start+0x5e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d109      	bne.n	8002b48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d005      	beq.n	8002b48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 f94d 	bl	8004dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fa20 	bl	8005f9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_PCD_Stop+0x1c>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e026      	b.n	8002bd8 <HAL_PCD_Stop+0x6a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 f939 	bl	8004e0e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fa1c 	bl	8005fde <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2110      	movs	r1, #16
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 facd 	bl	800514c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d109      	bne.n	8002bce <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d005      	beq.n	8002bce <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b08d      	sub	sp, #52	; 0x34
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 faa5 	bl	8006146 <USB_GetMode>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 839d 	bne.w	800333e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 fa09 	bl	8006020 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8393 	beq.w	800333c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fa00 	bl	8006020 <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d107      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f002 0202 	and.w	r2, r2, #2
 8002c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 f9ee 	bl	8006020 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d161      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0210 	bic.w	r2, r2, #16
 8002c5c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	0c5b      	lsrs	r3, r3, #17
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d124      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d035      	beq.n	8002d02 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6a38      	ldr	r0, [r7, #32]
 8002caa:	f003 f805 	bl	8005cb8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cba:	441a      	add	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ccc:	441a      	add	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	619a      	str	r2, [r3, #24]
 8002cd2:	e016      	b.n	8002d02 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	0c5b      	lsrs	r3, r3, #17
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d110      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6a38      	ldr	r0, [r7, #32]
 8002cec:	f002 ffe4 	bl	8005cb8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	441a      	add	r2, r3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0210 	orr.w	r2, r2, #16
 8002d10:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 f982 	bl	8006020 <USB_ReadInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d26:	d16e      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 f988 	bl	8006046 <USB_ReadDevAllOutEpInterrupt>
 8002d36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d38:	e062      	b.n	8002e00 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d057      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 f9ad 	bl	80060ae <USB_ReadDevOutEPInterrupt>
 8002d54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00c      	beq.n	8002d7a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2301      	movs	r3, #1
 8002d70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fe0d 	bl	8003994 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00c      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d90:	461a      	mov	r2, r3
 8002d92:	2308      	movs	r3, #8
 8002d94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 ff07 	bl	8003bac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db4:	461a      	mov	r2, r3
 8002db6:	2310      	movs	r3, #16
 8002db8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dec:	461a      	mov	r2, r3
 8002dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	3301      	adds	r3, #1
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d199      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 f908 	bl	8006020 <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e1a:	f040 80c0 	bne.w	8002f9e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 f929 	bl	800607a <USB_ReadDevAllInEpInterrupt>
 8002e28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e2e:	e0b2      	b.n	8002f96 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a7 	beq.w	8002f8a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 f94f 	bl	80060ea <USB_ReadDevInEPInterrupt>
 8002e4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d057      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	2201      	movs	r2, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69f9      	ldr	r1, [r7, #28]
 8002e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e78:	4013      	ands	r3, r2
 8002e7a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d132      	bne.n	8002efc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3348      	adds	r3, #72	; 0x48
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4403      	add	r3, r0
 8002eb6:	3344      	adds	r3, #68	; 0x44
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4419      	add	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4403      	add	r3, r0
 8002eca:	3348      	adds	r3, #72	; 0x48
 8002ecc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d113      	bne.n	8002efc <HAL_PCD_IRQHandler+0x31c>
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3350      	adds	r3, #80	; 0x50
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	f003 f956 	bl	80061a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f00b fb10 	bl	800e528 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2308      	movs	r3, #8
 8002f22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f56:	461a      	mov	r2, r3
 8002f58:	2340      	movs	r3, #64	; 0x40
 8002f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f72:	461a      	mov	r2, r3
 8002f74:	2302      	movs	r3, #2
 8002f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fc77 	bl	8003878 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f af49 	bne.w	8002e30 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 f83c 	bl	8006020 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fb2:	d122      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fe83 	bl	8003ce8 <HAL_PCDEx_LPM_Callback>
 8002fe2:	e002      	b.n	8002fea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f00b fb17 	bl	800e618 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 f80e 	bl	8006020 <USB_ReadInterrupts>
 8003004:	4603      	mov	r3, r0
 8003006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300e:	d112      	bne.n	8003036 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f00b fad1 	bl	800e5c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003034:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fff0 	bl	8006020 <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	f040 80c7 	bne.w	80031dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2110      	movs	r1, #16
 8003068:	4618      	mov	r0, r3
 800306a:	f002 f86f 	bl	800514c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306e:	2300      	movs	r3, #0
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003072:	e056      	b.n	8003122 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003080:	461a      	mov	r2, r3
 8003082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003086:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003098:	0151      	lsls	r1, r2, #5
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	440a      	add	r2, r1
 800309e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d4:	461a      	mov	r2, r3
 80030d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ec:	0151      	lsls	r1, r2, #5
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	440a      	add	r2, r1
 80030f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310c:	0151      	lsls	r1, r2, #5
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	440a      	add	r2, r1
 8003112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003116:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800311a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311e:	3301      	adds	r3, #1
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003128:	429a      	cmp	r2, r3
 800312a:	d3a3      	bcc.n	8003074 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800313e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	2b00      	cmp	r3, #0
 8003146:	d016      	beq.n	8003176 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003158:	f043 030b 	orr.w	r3, r3, #11
 800315c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316e:	f043 030b 	orr.w	r3, r3, #11
 8003172:	6453      	str	r3, [r2, #68]	; 0x44
 8003174:	e015      	b.n	80031a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003184:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003188:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800318c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319c:	f043 030b 	orr.w	r3, r3, #11
 80031a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031c6:	461a      	mov	r2, r3
 80031c8:	f002 ffee 	bl	80061a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f002 ff1d 	bl	8006020 <USB_ReadInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f0:	d124      	bne.n	800323c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 ffb3 	bl	8006162 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f002 f804 	bl	800520e <USB_GetDevSpeed>
 8003206:	4603      	mov	r3, r0
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681c      	ldr	r4, [r3, #0]
 8003212:	f000 fd75 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003216:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	4620      	mov	r0, r4
 8003222:	f001 fd41 	bl	8004ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f00b f9a6 	bl	800e578 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800323a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f002 feed 	bl	8006020 <USB_ReadInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b08      	cmp	r3, #8
 800324e:	d10a      	bne.n	8003266 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f00b f983 	bl	800e55c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f002 0208 	and.w	r2, r2, #8
 8003264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f002 fed8 	bl	8006020 <USB_ReadInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d10f      	bne.n	800329c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f00b f9e8 	bl	800e65c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800329a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 febd 	bl	8006020 <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b0:	d10f      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f00b f9bb 	bl	800e638 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fea2 	bl	8006020 <USB_ReadInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e6:	d10a      	bne.n	80032fe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f00b f9c9 	bl	800e680 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f002 fe8c 	bl	8006020 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d115      	bne.n	800333e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f00b f9bc 	bl	800e6a2 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e000      	b.n	800333e <HAL_PCD_IRQHandler+0x75e>
      return;
 800333c:	bf00      	nop
    }
  }
}
 800333e:	3734      	adds	r7, #52	; 0x34
 8003340:	46bd      	mov	sp, r7
 8003342:	bd90      	pop	{r4, r7, pc}

08003344 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_PCD_DevConnect+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e01b      	b.n	8003398 <HAL_PCD_DevConnect+0x54>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	2b01      	cmp	r3, #1
 800336e:	d109      	bne.n	8003384 <HAL_PCD_DevConnect+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003374:	2b01      	cmp	r3, #1
 8003376:	d005      	beq.n	8003384 <HAL_PCD_DevConnect+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fe07 	bl	8005f9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_PCD_DevDisconnect+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e01b      	b.n	80033f4 <HAL_PCD_DevDisconnect+0x54>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevDisconnect(hpcd->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f002 fe08 	bl	8005fde <USB_DevDisconnect>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d109      	bne.n	80033ea <HAL_PCD_DevDisconnect+0x4a>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d005      	beq.n	80033ea <HAL_PCD_DevDisconnect+0x4a>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_PCD_SetAddress+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e013      	b.n	800343e <HAL_PCD_SetAddress+0x42>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f002 fd8e 	bl	8005f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	4608      	mov	r0, r1
 8003450:	4611      	mov	r1, r2
 8003452:	461a      	mov	r2, r3
 8003454:	4603      	mov	r3, r0
 8003456:	70fb      	strb	r3, [r7, #3]
 8003458:	460b      	mov	r3, r1
 800345a:	803b      	strh	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da0f      	bge.n	800348c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3338      	adds	r3, #56	; 0x38
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
 800348a:	e00f      	b.n	80034ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b8:	883a      	ldrh	r2, [r7, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	78ba      	ldrb	r2, [r7, #2]
 80034c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034d6:	78bb      	ldrb	r3, [r7, #2]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d102      	bne.n	80034e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_EP_Open+0xaa>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_Open+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 feaa 	bl	8005258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800350c:	7afb      	ldrb	r3, [r7, #11]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	da0f      	bge.n	800354a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3338      	adds	r3, #56	; 0x38
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	705a      	strb	r2, [r3, #1]
 8003548:	e00f      	b.n	800356a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	3304      	adds	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_PCD_EP_Close+0x6e>
 8003580:	2302      	movs	r3, #2
 8003582:	e00e      	b.n	80035a2 <HAL_PCD_EP_Close+0x8c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fee8 	bl	8005368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	460b      	mov	r3, r1
 80035b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	f002 f9c3 	bl	80059a8 <USB_EP0StartXfer>
 8003622:	e008      	b.n	8003636 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	f001 ff75 	bl	8005520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	460b      	mov	r3, r1
 800367e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	3338      	adds	r3, #56	; 0x38
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2201      	movs	r2, #1
 80036ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d102      	bne.n	80036ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	f002 f961 	bl	80059a8 <USB_EP0StartXfer>
 80036e6:	e008      	b.n	80036fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6979      	ldr	r1, [r7, #20]
 80036f6:	f001 ff13 	bl	8005520 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d901      	bls.n	8003722 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e050      	b.n	80037c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0f      	bge.n	800374a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3338      	adds	r3, #56	; 0x38
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	705a      	strb	r2, [r3, #1]
 8003748:	e00d      	b.n	8003766 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_PCD_EP_SetStall+0x82>
 8003782:	2302      	movs	r3, #2
 8003784:	e01e      	b.n	80037c4 <HAL_PCD_EP_SetStall+0xc0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	4618      	mov	r0, r3
 8003796:	f002 fab8 	bl	8005d0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	b2d9      	uxtb	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037b4:	461a      	mov	r2, r3
 80037b6:	f002 fcf7 	bl	80061a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d901      	bls.n	80037ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e042      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da0f      	bge.n	8003812 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	3338      	adds	r3, #56	; 0x38
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	705a      	strb	r2, [r3, #1]
 8003810:	e00f      	b.n	8003832 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_PCD_EP_ClrStall+0x86>
 800384e:	2302      	movs	r3, #2
 8003850:	e00e      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa4>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f002 fac0 	bl	8005de6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af02      	add	r7, sp, #8
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	3338      	adds	r3, #56	; 0x38
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	3304      	adds	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d901      	bls.n	80038b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e06c      	b.n	800398a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d902      	bls.n	80038cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3303      	adds	r3, #3
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038d4:	e02b      	b.n	800392e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d902      	bls.n	80038f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3303      	adds	r3, #3
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800390a:	b2db      	uxtb	r3, r3
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	4603      	mov	r3, r0
 8003910:	6978      	ldr	r0, [r7, #20]
 8003912:	f002 f99c 	bl	8005c4e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	441a      	add	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	429a      	cmp	r2, r3
 8003942:	d809      	bhi.n	8003958 <PCD_WriteEmptyTxFifo+0xe0>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394c:	429a      	cmp	r2, r3
 800394e:	d203      	bcs.n	8003958 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1be      	bne.n	80038d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	429a      	cmp	r2, r3
 8003962:	d811      	bhi.n	8003988 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2201      	movs	r2, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	43db      	mvns	r3, r3
 800397e:	6939      	ldr	r1, [r7, #16]
 8003980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003984:	4013      	ands	r3, r2
 8003986:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	333c      	adds	r3, #60	; 0x3c
 80039ac:	3304      	adds	r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 80a0 	bne.w	8003b0c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d015      	beq.n	8003a02 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a72      	ldr	r2, [pc, #456]	; (8003ba4 <PCD_EP_OutXfrComplete_int+0x210>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f240 80dd 	bls.w	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80d7 	beq.w	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	6093      	str	r3, [r2, #8]
 8003a00:	e0cb      	b.n	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	6093      	str	r3, [r2, #8]
 8003a1e:	e0bc      	b.n	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 80b7 	bne.w	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ba4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d90f      	bls.n	8003a54 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a50:	6093      	str	r3, [r2, #8]
 8003a52:	e0a2      	b.n	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a66:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	440b      	add	r3, r1
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a7a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4403      	add	r3, r0
 8003a8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a8e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4403      	add	r3, r0
 8003ab2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4419      	add	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4403      	add	r3, r0
 8003ac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003acc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d114      	bne.n	8003afe <PCD_EP_OutXfrComplete_int+0x16a>
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d108      	bne.n	8003afe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af6:	461a      	mov	r2, r3
 8003af8:	2101      	movs	r1, #1
 8003afa:	f002 fb55 	bl	80061a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f00a fcf4 	bl	800e4f2 <HAL_PCD_DataOutStageCallback>
 8003b0a:	e046      	b.n	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d124      	bne.n	8003b5e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b30:	6093      	str	r3, [r2, #8]
 8003b32:	e032      	b.n	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f00a fccb 	bl	800e4f2 <HAL_PCD_DataOutStageCallback>
 8003b5c:	e01d      	b.n	8003b9a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d114      	bne.n	8003b8e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b86:	461a      	mov	r2, r3
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f002 fb0d 	bl	80061a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f00a fcac 	bl	800e4f2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	4f54300a 	.word	0x4f54300a
 8003ba8:	4f54310a 	.word	0x4f54310a

08003bac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	333c      	adds	r3, #60	; 0x3c
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d90e      	bls.n	8003c00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f00a fc64 	bl	800e4ce <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d90c      	bls.n	8003c28 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d108      	bne.n	8003c28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c20:	461a      	mov	r2, r3
 8003c22:	2101      	movs	r1, #1
 8003c24:	f002 fac0 	bl	80061a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	4f54300a 	.word	0x4f54300a

08003c38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
 8003c44:	4613      	mov	r3, r2
 8003c46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d107      	bne.n	8003c66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c56:	883b      	ldrh	r3, [r7, #0]
 8003c58:	0419      	lsls	r1, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
 8003c64:	e028      	b.n	8003cb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e00d      	b.n	8003c96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	3340      	adds	r3, #64	; 0x40
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	3301      	adds	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d3ec      	bcc.n	8003c7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ca0:	883b      	ldrh	r3, [r7, #0]
 8003ca2:	0418      	lsls	r0, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4302      	orrs	r2, r0
 8003cb0:	3340      	adds	r3, #64	; 0x40
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000

08003d18 <LL_GPIO_SetPinMode>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2103      	movs	r1, #3
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	61bb      	str	r3, [r7, #24]
  return result;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	601a      	str	r2, [r3, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_GPIO_SetPinOutputType>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	605a      	str	r2, [r3, #4]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_GPIO_SetPinSpeed>:
{
 8003da6:	b480      	push	{r7}
 8003da8:	b089      	sub	sp, #36	; 0x24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	613b      	str	r3, [r7, #16]
  return result;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	2103      	movs	r1, #3
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	61bb      	str	r3, [r7, #24]
  return result;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3724      	adds	r7, #36	; 0x24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_GPIO_SetPinPull>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	; 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	613b      	str	r3, [r7, #16]
  return result;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	401a      	ands	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	61bb      	str	r3, [r7, #24]
  return result;
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	60da      	str	r2, [r3, #12]
}
 8003e56:	bf00      	nop
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_GPIO_SetAFPin_0_7>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b089      	sub	sp, #36	; 0x24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	613b      	str	r3, [r7, #16]
  return result;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	210f      	movs	r1, #15
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	401a      	ands	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	61bb      	str	r3, [r7, #24]
  return result;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	3724      	adds	r7, #36	; 0x24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_GPIO_SetAFPin_8_15>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	613b      	str	r3, [r7, #16]
  return result;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	210f      	movs	r1, #15
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	61bb      	str	r3, [r7, #24]
  return result;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f16:	bf00      	nop
 8003f18:	3724      	adds	r7, #36	; 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <LL_AHB1_GRP1_ForceReset>:
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <LL_AHB1_GRP1_ForceReset+0x20>)
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	4904      	ldr	r1, [pc, #16]	; (8003f44 <LL_AHB1_GRP1_ForceReset+0x20>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	610b      	str	r3, [r1, #16]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40023800 	.word	0x40023800

08003f48 <LL_AHB1_GRP1_ReleaseReset>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <LL_AHB1_GRP1_ReleaseReset+0x24>)
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	4904      	ldr	r1, [pc, #16]	; (8003f6c <LL_AHB1_GRP1_ReleaseReset+0x24>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	610b      	str	r3, [r1, #16]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800

08003f70 <LL_GPIO_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are de-initialized
  *          - ERROR:   Wrong GPIO Port
  */
ErrorStatus LL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a35      	ldr	r2, [pc, #212]	; (8004054 <LL_GPIO_DeInit+0xe4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d106      	bne.n	8003f92 <LL_GPIO_DeInit+0x22>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7ff ffcd 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7ff ffdc 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8003f90:	e05b      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
  else if (GPIOx == GPIOB)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a30      	ldr	r2, [pc, #192]	; (8004058 <LL_GPIO_DeInit+0xe8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d106      	bne.n	8003fa8 <LL_GPIO_DeInit+0x38>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003f9a:	2002      	movs	r0, #2
 8003f9c:	f7ff ffc2 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	f7ff ffd1 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8003fa6:	e050      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
  else if (GPIOx == GPIOC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a2c      	ldr	r2, [pc, #176]	; (800405c <LL_GPIO_DeInit+0xec>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d106      	bne.n	8003fbe <LL_GPIO_DeInit+0x4e>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003fb0:	2004      	movs	r0, #4
 8003fb2:	f7ff ffb7 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003fb6:	2004      	movs	r0, #4
 8003fb8:	f7ff ffc6 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8003fbc:	e045      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <LL_GPIO_DeInit+0xf0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d106      	bne.n	8003fd4 <LL_GPIO_DeInit+0x64>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003fc6:	2008      	movs	r0, #8
 8003fc8:	f7ff ffac 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003fcc:	2008      	movs	r0, #8
 8003fce:	f7ff ffbb 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8003fd2:	e03a      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a23      	ldr	r2, [pc, #140]	; (8004064 <LL_GPIO_DeInit+0xf4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d106      	bne.n	8003fea <LL_GPIO_DeInit+0x7a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003fdc:	2010      	movs	r0, #16
 8003fde:	f7ff ffa1 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003fe2:	2010      	movs	r0, #16
 8003fe4:	f7ff ffb0 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8003fe8:	e02f      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <LL_GPIO_DeInit+0xf8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d106      	bne.n	8004000 <LL_GPIO_DeInit+0x90>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
 8003ff2:	2020      	movs	r0, #32
 8003ff4:	f7ff ff96 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
 8003ff8:	2020      	movs	r0, #32
 8003ffa:	f7ff ffa5 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8003ffe:	e024      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
#endif /* GPIOF */
#if defined(GPIOG)
  else if (GPIOx == GPIOG)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a1a      	ldr	r2, [pc, #104]	; (800406c <LL_GPIO_DeInit+0xfc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d106      	bne.n	8004016 <LL_GPIO_DeInit+0xa6>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
 8004008:	2040      	movs	r0, #64	; 0x40
 800400a:	f7ff ff8b 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
 800400e:	2040      	movs	r0, #64	; 0x40
 8004010:	f7ff ff9a 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8004014:	e019      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
#endif /* GPIOG */
#if defined(GPIOH)
  else if (GPIOx == GPIOH)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a15      	ldr	r2, [pc, #84]	; (8004070 <LL_GPIO_DeInit+0x100>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d106      	bne.n	800402c <LL_GPIO_DeInit+0xbc>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOH);
 800401e:	2080      	movs	r0, #128	; 0x80
 8004020:	f7ff ff80 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004024:	2080      	movs	r0, #128	; 0x80
 8004026:	f7ff ff8f 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 800402a:	e00e      	b.n	800404a <LL_GPIO_DeInit+0xda>
  }
#endif /* GPIOH */
#if defined(GPIOI)
  else if (GPIOx == GPIOI)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <LL_GPIO_DeInit+0x104>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <LL_GPIO_DeInit+0xd6>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOI);
 8004034:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004038:	f7ff ff74 	bl	8003f24 <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOI);
 800403c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004040:	f7ff ff82 	bl	8003f48 <LL_AHB1_GRP1_ReleaseReset>
 8004044:	e001      	b.n	800404a <LL_GPIO_DeInit+0xda>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOK);
  }
#endif /* GPIOK */
  else
  {
    status = ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40020000 	.word	0x40020000
 8004058:	40020400 	.word	0x40020400
 800405c:	40020800 	.word	0x40020800
 8004060:	40020c00 	.word	0x40020c00
 8004064:	40021000 	.word	0x40021000
 8004068:	40021400 	.word	0x40021400
 800406c:	40021800 	.word	0x40021800
 8004070:	40021c00 	.word	0x40021c00
 8004074:	40022000 	.word	0x40022000

08004078 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	613b      	str	r3, [r7, #16]
  return result;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80040a2:	e050      	b.n	8004146 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d042      	beq.n	8004140 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d003      	beq.n	80040ca <LL_GPIO_Init+0x52>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d10d      	bne.n	80040e6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	461a      	mov	r2, r3
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fe67 	bl	8003da6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	461a      	mov	r2, r3
 80040de:	69b9      	ldr	r1, [r7, #24]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fe48 	bl	8003d76 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	461a      	mov	r2, r3
 80040ec:	69b9      	ldr	r1, [r7, #24]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fe88 	bl	8003e04 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d11a      	bne.n	8004132 <LL_GPIO_Init+0xba>
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	60bb      	str	r3, [r7, #8]
  return result;
 8004108:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b07      	cmp	r3, #7
 8004112:	d807      	bhi.n	8004124 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	461a      	mov	r2, r3
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff fea0 	bl	8003e62 <LL_GPIO_SetAFPin_0_7>
 8004122:	e006      	b.n	8004132 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	461a      	mov	r2, r3
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff fec7 	bl	8003ec0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	461a      	mov	r2, r3
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdec 	bl	8003d18 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3301      	adds	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1a7      	bne.n	80040a4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <LL_RCC_HSI_Enable>:
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <LL_RCC_HSI_Enable+0x1c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a04      	ldr	r2, [pc, #16]	; (800417c <LL_RCC_HSI_Enable+0x1c>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800

08004180 <LL_RCC_HSI_IsReady>:
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <LL_RCC_HSI_IsReady+0x20>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40023800 	.word	0x40023800

080041a4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80041ac:	4b07      	ldr	r3, [pc, #28]	; (80041cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4904      	ldr	r1, [pc, #16]	; (80041cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800

080041d0 <LL_RCC_GetSysClkSource>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <LL_RCC_GetSysClkSource+0x18>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 030c 	and.w	r3, r3, #12
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800

080041ec <LL_RCC_GetAHBPrescaler>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <LL_RCC_GetAHBPrescaler+0x18>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <LL_RCC_GetAPB1Prescaler>:
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <LL_RCC_GetAPB1Prescaler+0x18>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800

08004224 <LL_RCC_GetAPB2Prescaler>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <LL_RCC_GetAPB2Prescaler+0x18>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <LL_RCC_PLL_IsReady>:
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <LL_RCC_PLL_IsReady+0x24>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800

08004268 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <LL_RCC_PLL_GetMainSource+0x18>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800

08004284 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <LL_RCC_PLL_GetN+0x18>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	099b      	lsrs	r3, r3, #6
 800428e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40023800 	.word	0x40023800

080042a0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <LL_RCC_PLL_GetP+0x18>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800

080042bc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <LL_RCC_PLL_GetDivider+0x18>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  __IO uint32_t vl_mask;

  /* Set HSION bit */
  LL_RCC_HSI_Enable();
 80042de:	f7ff ff3f 	bl	8004160 <LL_RCC_HSI_Enable>

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 80042e2:	bf00      	nop
 80042e4:	f7ff ff4c 	bl	8004180 <LL_RCC_HSI_IsReady>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d1fa      	bne.n	80042e4 <LL_RCC_DeInit+0xc>
  {}

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <LL_RCC_DeInit+0xb0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 80042f4:	4b24      	ldr	r3, [pc, #144]	; (8004388 <LL_RCC_DeInit+0xb0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	607b      	str	r3, [r7, #4]

  /* Reset HSEON, HSEBYP, PLLON, CSSON bits */
  CLEAR_BIT(vl_mask,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f023 7386 	bic.w	r3, r3, #17563648	; 0x10c0000
 8004300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004304:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(vl_mask, RCC_CR_PLLSAION);
#endif /* RCC_PLLSAI_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SON bit */
  CLEAR_BIT(vl_mask, RCC_CR_PLLI2SON);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800430c:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLI2S_SUPPORT */

  /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6013      	str	r3, [r2, #0]

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);
 8004314:	2010      	movs	r0, #16
 8004316:	f7ff ff45 	bl	80041a4 <LL_RCC_HSI_SetCalibTrimming>

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 800431a:	bf00      	nop
 800431c:	f7ff ff90 	bl	8004240 <LL_RCC_PLL_IsReady>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1fa      	bne.n	800431c <LL_RCC_DeInit+0x44>
  {}

  /* Reset PLLCFGR register */
  LL_RCC_WriteReg(PLLCFGR, RCC_PLLCFGR_RST_VALUE);
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <LL_RCC_DeInit+0xb4>)
 800432a:	605a      	str	r2, [r3, #4]

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SCFGR register */
  LL_RCC_WriteReg(PLLI2SCFGR, RCC_PLLI2SCFGR_RST_VALUE);
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <LL_RCC_DeInit+0xb0>)
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <LL_RCC_DeInit+0xb8>)
 8004330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Reset PLLSAICFGR register */
  LL_RCC_WriteReg(PLLSAICFGR, RCC_PLLSAICFGR_RST_VALUE);
#endif /* RCC_PLLSAI_SUPPORT */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <LL_RCC_DeInit+0xb0>)
 800433a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800433e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a10      	ldr	r2, [pc, #64]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800434a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <LL_RCC_DeInit+0xb0>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a0d      	ldr	r2, [pc, #52]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004352:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8004356:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <LL_RCC_DeInit+0xb0>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <LL_RCC_DeInit+0xb0>)
 800435e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004362:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	4a07      	ldr	r2, [pc, #28]	; (8004388 <LL_RCC_DeInit+0xb0>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	4a04      	ldr	r2, [pc, #16]	; (8004388 <LL_RCC_DeInit+0xb0>)
 8004376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437a:	6753      	str	r3, [r2, #116]	; 0x74

  return SUCCESS;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	24003010 	.word	0x24003010
 8004390:	20003000 	.word	0x20003000

08004394 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800439c:	f000 f820 	bl	80043e0 <RCC_GetSystemClockFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f840 	bl	8004430 <RCC_GetHCLKClockFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 f84e 	bl	800445c <RCC_GetPCLK1ClockFreq>
 80043c0:	4602      	mov	r2, r0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f85a 	bl	8004484 <RCC_GetPCLK2ClockFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80043ea:	f7ff fef1 	bl	80041d0 <LL_RCC_GetSysClkSource>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d00c      	beq.n	800440e <RCC_GetSystemClockFreq+0x2e>
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d80f      	bhi.n	8004418 <RCC_GetSystemClockFreq+0x38>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <RCC_GetSystemClockFreq+0x22>
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d003      	beq.n	8004408 <RCC_GetSystemClockFreq+0x28>
 8004400:	e00a      	b.n	8004418 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <RCC_GetSystemClockFreq+0x48>)
 8004404:	607b      	str	r3, [r7, #4]
      break;
 8004406:	e00a      	b.n	800441e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <RCC_GetSystemClockFreq+0x4c>)
 800440a:	607b      	str	r3, [r7, #4]
      break;
 800440c:	e007      	b.n	800441e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800440e:	2008      	movs	r0, #8
 8004410:	f000 f84c 	bl	80044ac <RCC_PLL_GetFreqDomain_SYS>
 8004414:	6078      	str	r0, [r7, #4]
      break;
 8004416:	e002      	b.n	800441e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <RCC_GetSystemClockFreq+0x48>)
 800441a:	607b      	str	r3, [r7, #4]
      break;
 800441c:	bf00      	nop
  }

  return frequency;
 800441e:	687b      	ldr	r3, [r7, #4]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200

08004430 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004438:	f7ff fed8 	bl	80041ec <LL_RCC_GetAHBPrescaler>
 800443c:	4603      	mov	r3, r0
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <RCC_GetHCLKClockFreq+0x28>)
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	461a      	mov	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	40d3      	lsrs	r3, r2
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	0800f10c 	.word	0x0800f10c

0800445c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004464:	f7ff fed0 	bl	8004208 <LL_RCC_GetAPB1Prescaler>
 8004468:	4603      	mov	r3, r0
 800446a:	0a9b      	lsrs	r3, r3, #10
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <RCC_GetPCLK1ClockFreq+0x24>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	40d3      	lsrs	r3, r2
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	0800f11c 	.word	0x0800f11c

08004484 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800448c:	f7ff feca 	bl	8004224 <LL_RCC_GetAPB2Prescaler>
 8004490:	4603      	mov	r3, r0
 8004492:	0b5b      	lsrs	r3, r3, #13
 8004494:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	461a      	mov	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	40d3      	lsrs	r3, r2
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	0800f11c 	.word	0x0800f11c

080044ac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80044c0:	f7ff fed2 	bl	8004268 <LL_RCC_PLL_GetMainSource>
 80044c4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d2:	d003      	beq.n	80044dc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80044d4:	e005      	b.n	80044e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80044d8:	617b      	str	r3, [r7, #20]
      break;
 80044da:	e005      	b.n	80044e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80044de:	617b      	str	r3, [r7, #20]
      break;
 80044e0:	e002      	b.n	80044e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80044e4:	617b      	str	r3, [r7, #20]
      break;
 80044e6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d113      	bne.n	8004516 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80044ee:	f7ff fee5 	bl	80042bc <LL_RCC_PLL_GetDivider>
 80044f2:	4602      	mov	r2, r0
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fbb3 f4f2 	udiv	r4, r3, r2
 80044fa:	f7ff fec3 	bl	8004284 <LL_RCC_PLL_GetN>
 80044fe:	4603      	mov	r3, r0
 8004500:	fb03 f404 	mul.w	r4, r3, r4
 8004504:	f7ff fecc 	bl	80042a0 <LL_RCC_PLL_GetP>
 8004508:	4603      	mov	r3, r0
 800450a:	0c1b      	lsrs	r3, r3, #16
 800450c:	3301      	adds	r3, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fbb4 f3f3 	udiv	r3, r4, r3
 8004514:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004516:	693b      	ldr	r3, [r7, #16]
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	00f42400 	.word	0x00f42400
 8004524:	007a1200 	.word	0x007a1200

08004528 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d101      	bne.n	8004540 <LL_SPI_IsEnabled+0x18>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <LL_SPI_IsEnabled+0x1a>
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ffd3 	bl	8004528 <LL_SPI_IsEnabled>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d139      	bne.n	80045fc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004590:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	6811      	ldr	r1, [r2, #0]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	6852      	ldr	r2, [r2, #4]
 800459c:	4311      	orrs	r1, r2
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	6892      	ldr	r2, [r2, #8]
 80045a2:	4311      	orrs	r1, r2
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	68d2      	ldr	r2, [r2, #12]
 80045a8:	4311      	orrs	r1, r2
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	6912      	ldr	r2, [r2, #16]
 80045ae:	4311      	orrs	r1, r2
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	6952      	ldr	r2, [r2, #20]
 80045b4:	4311      	orrs	r1, r2
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	6992      	ldr	r2, [r2, #24]
 80045ba:	4311      	orrs	r1, r2
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	69d2      	ldr	r2, [r2, #28]
 80045c0:	4311      	orrs	r1, r2
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	6a12      	ldr	r2, [r2, #32]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f023 0204 	bic.w	r2, r3, #4
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ea:	d105      	bne.n	80045f8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff ffab 	bl	800454e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80045f8:	2300      	movs	r3, #0
 80045fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	61da      	str	r2, [r3, #28]
  return status;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <LL_USART_IsEnabled>:
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <LL_USART_SetStopBitsLength>:
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	611a      	str	r2, [r3, #16]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_USART_SetHWFlowCtrl>:
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	615a      	str	r2, [r3, #20]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <LL_USART_SetBaudRate>:
{
 8004688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800468c:	b0c0      	sub	sp, #256	; 0x100
 800468e:	af00      	add	r7, sp, #0
 8004690:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004694:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004698:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800469c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a8:	f040 810c 	bne.w	80048c4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80046ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	6639      	str	r1, [r7, #96]	; 0x60
 80046c6:	415b      	adcs	r3, r3
 80046c8:	667b      	str	r3, [r7, #100]	; 0x64
 80046ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80046ce:	4621      	mov	r1, r4
 80046d0:	eb12 0801 	adds.w	r8, r2, r1
 80046d4:	4629      	mov	r1, r5
 80046d6:	eb43 0901 	adc.w	r9, r3, r1
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ee:	4690      	mov	r8, r2
 80046f0:	4699      	mov	r9, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	eb18 0303 	adds.w	r3, r8, r3
 80046f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046fc:	462b      	mov	r3, r5
 80046fe:	eb49 0303 	adc.w	r3, r9, r3
 8004702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800470a:	2200      	movs	r2, #0
 800470c:	469a      	mov	sl, r3
 800470e:	4693      	mov	fp, r2
 8004710:	eb1a 030a 	adds.w	r3, sl, sl
 8004714:	65bb      	str	r3, [r7, #88]	; 0x58
 8004716:	eb4b 030b 	adc.w	r3, fp, fp
 800471a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800471c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004724:	f7fb fd50 	bl	80001c8 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4b64      	ldr	r3, [pc, #400]	; (80048c0 <LL_USART_SetBaudRate+0x238>)
 800472e:	fba3 2302 	umull	r2, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	b29b      	uxth	r3, r3
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	b29c      	uxth	r4, r3
 800473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004744:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004748:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	6539      	str	r1, [r7, #80]	; 0x50
 8004754:	415b      	adcs	r3, r3
 8004756:	657b      	str	r3, [r7, #84]	; 0x54
 8004758:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800475c:	4641      	mov	r1, r8
 800475e:	1851      	adds	r1, r2, r1
 8004760:	64b9      	str	r1, [r7, #72]	; 0x48
 8004762:	4649      	mov	r1, r9
 8004764:	414b      	adcs	r3, r1
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004774:	4659      	mov	r1, fp
 8004776:	00cb      	lsls	r3, r1, #3
 8004778:	4651      	mov	r1, sl
 800477a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477e:	4651      	mov	r1, sl
 8004780:	00ca      	lsls	r2, r1, #3
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	4603      	mov	r3, r0
 8004788:	4642      	mov	r2, r8
 800478a:	189b      	adds	r3, r3, r2
 800478c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004790:	464b      	mov	r3, r9
 8004792:	460a      	mov	r2, r1
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800479c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047a6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80047aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80047ae:	460b      	mov	r3, r1
 80047b0:	18db      	adds	r3, r3, r3
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40
 80047b4:	4613      	mov	r3, r2
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
 80047bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80047c4:	f7fb fd00 	bl	80001c8 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	4b3c      	ldr	r3, [pc, #240]	; (80048c0 <LL_USART_SetBaudRate+0x238>)
 80047d0:	fba3 2301 	umull	r2, r3, r3, r1
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2264      	movs	r2, #100	; 0x64
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	1acb      	subs	r3, r1, r3
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <LL_USART_SetBaudRate+0x238>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	4423      	add	r3, r4
 80047fa:	b29c      	uxth	r4, r3
 80047fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004800:	2200      	movs	r2, #0
 8004802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004806:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800480a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800480e:	4642      	mov	r2, r8
 8004810:	464b      	mov	r3, r9
 8004812:	1891      	adds	r1, r2, r2
 8004814:	63b9      	str	r1, [r7, #56]	; 0x38
 8004816:	415b      	adcs	r3, r3
 8004818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800481e:	4641      	mov	r1, r8
 8004820:	1851      	adds	r1, r2, r1
 8004822:	6339      	str	r1, [r7, #48]	; 0x30
 8004824:	4649      	mov	r1, r9
 8004826:	414b      	adcs	r3, r1
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004836:	4659      	mov	r1, fp
 8004838:	00cb      	lsls	r3, r1, #3
 800483a:	4651      	mov	r1, sl
 800483c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004840:	4651      	mov	r1, sl
 8004842:	00ca      	lsls	r2, r1, #3
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	4603      	mov	r3, r0
 800484a:	4642      	mov	r2, r8
 800484c:	189b      	adds	r3, r3, r2
 800484e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004852:	464b      	mov	r3, r9
 8004854:	460a      	mov	r2, r1
 8004856:	eb42 0303 	adc.w	r3, r2, r3
 800485a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800485e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004862:	2200      	movs	r2, #0
 8004864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004868:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800486c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004870:	460b      	mov	r3, r1
 8004872:	18db      	adds	r3, r3, r3
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
 8004876:	4613      	mov	r3, r2
 8004878:	eb42 0303 	adc.w	r3, r2, r3
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004882:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004886:	f7fb fc9f 	bl	80001c8 <__aeabi_uldivmod>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <LL_USART_SetBaudRate+0x238>)
 8004890:	fba3 1302 	umull	r1, r3, r3, r2
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	2164      	movs	r1, #100	; 0x64
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	3332      	adds	r3, #50	; 0x32
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <LL_USART_SetBaudRate+0x238>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4423      	add	r3, r4
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048bc:	609a      	str	r2, [r3, #8]
}
 80048be:	e108      	b.n	8004ad2 <LL_USART_SetBaudRate+0x44a>
 80048c0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80048c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048ce:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048d2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80048d6:	4642      	mov	r2, r8
 80048d8:	464b      	mov	r3, r9
 80048da:	1891      	adds	r1, r2, r2
 80048dc:	6239      	str	r1, [r7, #32]
 80048de:	415b      	adcs	r3, r3
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048e6:	4641      	mov	r1, r8
 80048e8:	1854      	adds	r4, r2, r1
 80048ea:	4649      	mov	r1, r9
 80048ec:	eb43 0501 	adc.w	r5, r3, r1
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	00eb      	lsls	r3, r5, #3
 80048fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048fe:	00e2      	lsls	r2, r4, #3
 8004900:	4614      	mov	r4, r2
 8004902:	461d      	mov	r5, r3
 8004904:	4643      	mov	r3, r8
 8004906:	18e3      	adds	r3, r4, r3
 8004908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800490c:	464b      	mov	r3, r9
 800490e:	eb45 0303 	adc.w	r3, r5, r3
 8004912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004916:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004920:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004930:	4629      	mov	r1, r5
 8004932:	008b      	lsls	r3, r1, #2
 8004934:	4621      	mov	r1, r4
 8004936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493a:	4621      	mov	r1, r4
 800493c:	008a      	lsls	r2, r1, #2
 800493e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004942:	f7fb fc41 	bl	80001c8 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <LL_USART_SetBaudRate+0x458>)
 800494c:	fba3 2302 	umull	r2, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	b29b      	uxth	r3, r3
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	b29c      	uxth	r4, r3
 8004958:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004962:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004966:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800496a:	4642      	mov	r2, r8
 800496c:	464b      	mov	r3, r9
 800496e:	1891      	adds	r1, r2, r2
 8004970:	61b9      	str	r1, [r7, #24]
 8004972:	415b      	adcs	r3, r3
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800497a:	4641      	mov	r1, r8
 800497c:	1851      	adds	r1, r2, r1
 800497e:	6139      	str	r1, [r7, #16]
 8004980:	4649      	mov	r1, r9
 8004982:	414b      	adcs	r3, r1
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004992:	4659      	mov	r1, fp
 8004994:	00cb      	lsls	r3, r1, #3
 8004996:	4651      	mov	r1, sl
 8004998:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499c:	4651      	mov	r1, sl
 800499e:	00ca      	lsls	r2, r1, #3
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	4603      	mov	r3, r0
 80049a6:	4642      	mov	r2, r8
 80049a8:	189b      	adds	r3, r3, r2
 80049aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049ae:	464b      	mov	r3, r9
 80049b0:	460a      	mov	r2, r1
 80049b2:	eb42 0303 	adc.w	r3, r2, r3
 80049b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80049d4:	4649      	mov	r1, r9
 80049d6:	008b      	lsls	r3, r1, #2
 80049d8:	4641      	mov	r1, r8
 80049da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049de:	4641      	mov	r1, r8
 80049e0:	008a      	lsls	r2, r1, #2
 80049e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80049e6:	f7fb fbef 	bl	80001c8 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <LL_USART_SetBaudRate+0x458>)
 80049f2:	fba3 2301 	umull	r2, r3, r3, r1
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2264      	movs	r2, #100	; 0x64
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	1acb      	subs	r3, r1, r3
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a36      	ldr	r2, [pc, #216]	; (8004ae0 <LL_USART_SetBaudRate+0x458>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4423      	add	r3, r4
 8004a16:	b29c      	uxth	r4, r3
 8004a18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a20:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a22:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a26:	4642      	mov	r2, r8
 8004a28:	464b      	mov	r3, r9
 8004a2a:	1891      	adds	r1, r2, r2
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	415b      	adcs	r3, r3
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a36:	4641      	mov	r1, r8
 8004a38:	1851      	adds	r1, r2, r1
 8004a3a:	6039      	str	r1, [r7, #0]
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	414b      	adcs	r3, r1
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a4e:	4659      	mov	r1, fp
 8004a50:	00cb      	lsls	r3, r1, #3
 8004a52:	4651      	mov	r1, sl
 8004a54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a58:	4651      	mov	r1, sl
 8004a5a:	00ca      	lsls	r2, r1, #3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4603      	mov	r3, r0
 8004a62:	4642      	mov	r2, r8
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	673b      	str	r3, [r7, #112]	; 0x70
 8004a68:	464b      	mov	r3, r9
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	eb42 0303 	adc.w	r3, r2, r3
 8004a70:	677b      	str	r3, [r7, #116]	; 0x74
 8004a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a76:	2200      	movs	r2, #0
 8004a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004a88:	4649      	mov	r1, r9
 8004a8a:	008b      	lsls	r3, r1, #2
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a92:	4641      	mov	r1, r8
 8004a94:	008a      	lsls	r2, r1, #2
 8004a96:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004a9a:	f7fb fb95 	bl	80001c8 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <LL_USART_SetBaudRate+0x458>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	2164      	movs	r1, #100	; 0x64
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	3332      	adds	r3, #50	; 0x32
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <LL_USART_SetBaudRate+0x458>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	4423      	add	r3, r4
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad0:	609a      	str	r2, [r3, #8]
}
 8004ad2:	bf00      	nop
 8004ad4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ade:	bf00      	nop
 8004ae0:	51eb851f 	.word	0x51eb851f

08004ae4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fd8b 	bl	8004612 <LL_USART_IsEnabled>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d15e      	bne.n	8004bc0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b0a:	f023 030c 	bic.w	r3, r3, #12
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	6851      	ldr	r1, [r2, #4]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	68d2      	ldr	r2, [r2, #12]
 8004b16:	4311      	orrs	r1, r2
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	6912      	ldr	r2, [r2, #16]
 8004b1c:	4311      	orrs	r1, r2
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	6992      	ldr	r2, [r2, #24]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fd82 	bl	800463a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fd8f 	bl	8004660 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004b42:	f107 0308 	add.w	r3, r7, #8
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fc24 	bl	8004394 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <LL_USART_Init+0xe8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d102      	bne.n	8004b5a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	e021      	b.n	8004b9e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <LL_USART_Init+0xec>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d102      	bne.n	8004b68 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e01a      	b.n	8004b9e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <LL_USART_Init+0xf0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d102      	bne.n	8004b76 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e013      	b.n	8004b9e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <LL_USART_Init+0xf4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d102      	bne.n	8004b84 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e00c      	b.n	8004b9e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <LL_USART_Init+0xf8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d102      	bne.n	8004b92 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e005      	b.n	8004b9e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <LL_USART_Init+0xfc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00d      	beq.n	8004bc0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004bac:	2300      	movs	r3, #0
 8004bae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fd64 	bl	8004688 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40004400 	.word	0x40004400
 8004bd4:	40004800 	.word	0x40004800
 8004bd8:	40011400 	.word	0x40011400
 8004bdc:	40004c00 	.word	0x40004c00
 8004be0:	40005000 	.word	0x40005000

08004be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004be4:	b084      	sub	sp, #16
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	f107 001c 	add.w	r0, r7, #28
 8004bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d122      	bne.n	8004c42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 fb14 	bl	8006264 <USB_CoreReset>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	e01a      	b.n	8004c78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f001 fb08 	bl	8006264 <USB_CoreReset>
 8004c54:	4603      	mov	r3, r0
 8004c56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
 8004c6a:	e005      	b.n	8004c78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10b      	bne.n	8004c96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f043 0206 	orr.w	r2, r3, #6
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f043 0220 	orr.w	r2, r3, #32
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ca2:	b004      	add	sp, #16
 8004ca4:	4770      	bx	lr
	...

08004ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d165      	bne.n	8004d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4a41      	ldr	r2, [pc, #260]	; (8004dc4 <USB_SetTurnaroundTime+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d906      	bls.n	8004cd2 <USB_SetTurnaroundTime+0x2a>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <USB_SetTurnaroundTime+0x120>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d202      	bcs.n	8004cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ccc:	230f      	movs	r3, #15
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e062      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <USB_SetTurnaroundTime+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d306      	bcc.n	8004ce8 <USB_SetTurnaroundTime+0x40>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <USB_SetTurnaroundTime+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d202      	bcs.n	8004ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ce2:	230e      	movs	r3, #14
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e057      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a38      	ldr	r2, [pc, #224]	; (8004dcc <USB_SetTurnaroundTime+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d306      	bcc.n	8004cfe <USB_SetTurnaroundTime+0x56>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a37      	ldr	r2, [pc, #220]	; (8004dd0 <USB_SetTurnaroundTime+0x128>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d202      	bcs.n	8004cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004cf8:	230d      	movs	r3, #13
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e04c      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4a33      	ldr	r2, [pc, #204]	; (8004dd0 <USB_SetTurnaroundTime+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d306      	bcc.n	8004d14 <USB_SetTurnaroundTime+0x6c>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a32      	ldr	r2, [pc, #200]	; (8004dd4 <USB_SetTurnaroundTime+0x12c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d802      	bhi.n	8004d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d0e:	230c      	movs	r3, #12
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e041      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a2f      	ldr	r2, [pc, #188]	; (8004dd4 <USB_SetTurnaroundTime+0x12c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d906      	bls.n	8004d2a <USB_SetTurnaroundTime+0x82>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a2e      	ldr	r2, [pc, #184]	; (8004dd8 <USB_SetTurnaroundTime+0x130>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d802      	bhi.n	8004d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d24:	230b      	movs	r3, #11
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e036      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <USB_SetTurnaroundTime+0x130>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d906      	bls.n	8004d40 <USB_SetTurnaroundTime+0x98>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a29      	ldr	r2, [pc, #164]	; (8004ddc <USB_SetTurnaroundTime+0x134>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d802      	bhi.n	8004d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e02b      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <USB_SetTurnaroundTime+0x134>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d906      	bls.n	8004d56 <USB_SetTurnaroundTime+0xae>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a25      	ldr	r2, [pc, #148]	; (8004de0 <USB_SetTurnaroundTime+0x138>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d202      	bcs.n	8004d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d50:	2309      	movs	r3, #9
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e020      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <USB_SetTurnaroundTime+0x138>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d306      	bcc.n	8004d6c <USB_SetTurnaroundTime+0xc4>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <USB_SetTurnaroundTime+0x13c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d802      	bhi.n	8004d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d66:	2308      	movs	r3, #8
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e015      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <USB_SetTurnaroundTime+0x13c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d906      	bls.n	8004d82 <USB_SetTurnaroundTime+0xda>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <USB_SetTurnaroundTime+0x140>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d202      	bcs.n	8004d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d7c:	2307      	movs	r3, #7
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e00a      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d82:	2306      	movs	r3, #6
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e007      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d8e:	2309      	movs	r3, #9
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e001      	b.n	8004d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d94:	2309      	movs	r3, #9
 8004d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	00d8acbf 	.word	0x00d8acbf
 8004dc8:	00e4e1c0 	.word	0x00e4e1c0
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	01067380 	.word	0x01067380
 8004dd4:	011a499f 	.word	0x011a499f
 8004dd8:	01312cff 	.word	0x01312cff
 8004ddc:	014ca43f 	.word	0x014ca43f
 8004de0:	016e3600 	.word	0x016e3600
 8004de4:	01a6ab1f 	.word	0x01a6ab1f
 8004de8:	01e84800 	.word	0x01e84800

08004dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d106      	bne.n	8004e5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60da      	str	r2, [r3, #12]
 8004e5a:	e00b      	b.n	8004e74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e001      	b.n	8004e74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e003      	b.n	8004e7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e74:	2032      	movs	r0, #50	; 0x32
 8004e76:	f7fc fa5b 	bl	8001330 <HAL_Delay>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e84:	b084      	sub	sp, #16
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b086      	sub	sp, #24
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e009      	b.n	8004eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3340      	adds	r3, #64	; 0x40
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b0e      	cmp	r3, #14
 8004ebc:	d9f2      	bls.n	8004ea4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d11c      	bne.n	8004efe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed2:	f043 0302 	orr.w	r3, r3, #2
 8004ed6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
 8004efc:	e00b      	b.n	8004f16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f28:	4619      	mov	r1, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	461a      	mov	r2, r3
 8004f32:	680b      	ldr	r3, [r1, #0]
 8004f34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10c      	bne.n	8004f56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d104      	bne.n	8004f4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f42:	2100      	movs	r1, #0
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f949 	bl	80051dc <USB_SetDevSpeed>
 8004f4a:	e008      	b.n	8004f5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f944 	bl	80051dc <USB_SetDevSpeed>
 8004f54:	e003      	b.n	8004f5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f56:	2103      	movs	r1, #3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f93f 	bl	80051dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f5e:	2110      	movs	r1, #16
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8f3 	bl	800514c <USB_FlushTxFifo>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f911 	bl	8005198 <USB_FlushRxFifo>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	461a      	mov	r2, r3
 8004f94:	2300      	movs	r3, #0
 8004f96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	e043      	b.n	8005032 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc0:	d118      	bne.n	8004ff4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e013      	b.n	8005006 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	461a      	mov	r2, r3
 8004fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e008      	b.n	8005006 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	461a      	mov	r2, r3
 8005002:	2300      	movs	r3, #0
 8005004:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	461a      	mov	r2, r3
 8005014:	2300      	movs	r3, #0
 8005016:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	461a      	mov	r2, r3
 8005026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800502a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	3301      	adds	r3, #1
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	d3b7      	bcc.n	8004faa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	e043      	b.n	80050c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005056:	d118      	bne.n	800508a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	461a      	mov	r2, r3
 800506c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e013      	b.n	800509c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	461a      	mov	r2, r3
 8005082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e008      	b.n	800509c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	461a      	mov	r2, r3
 8005098:	2300      	movs	r3, #0
 800509a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	461a      	mov	r2, r3
 80050bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3301      	adds	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d3b7      	bcc.n	8005040 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f043 0210 	orr.w	r2, r3, #16
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <USB_DevInit+0x2c4>)
 800510a:	4313      	orrs	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f043 0208 	orr.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d107      	bne.n	8005138 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005130:	f043 0304 	orr.w	r3, r3, #4
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005144:	b004      	add	sp, #16
 8005146:	4770      	bx	lr
 8005148:	803c3800 	.word	0x803c3800

0800514c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <USB_FlushTxFifo+0x48>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e006      	b.n	8005186 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b20      	cmp	r3, #32
 8005182:	d0f0      	beq.n	8005166 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	00030d40 	.word	0x00030d40

08005198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2210      	movs	r2, #16
 80051a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3301      	adds	r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <USB_FlushRxFifo+0x40>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d901      	bls.n	80051bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e006      	b.n	80051ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d0f0      	beq.n	80051aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	00030d40 	.word	0x00030d40

080051dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	68f9      	ldr	r1, [r7, #12]
 80051f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0306 	and.w	r3, r3, #6
 8005226:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d102      	bne.n	8005234 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
 8005232:	e00a      	b.n	800524a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d002      	beq.n	8005240 <USB_GetDevSpeed+0x32>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b06      	cmp	r3, #6
 800523e:	d102      	bne.n	8005246 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005240:	2302      	movs	r3, #2
 8005242:	75fb      	strb	r3, [r7, #23]
 8005244:	e001      	b.n	800524a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005246:	230f      	movs	r3, #15
 8005248:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d13a      	bne.n	80052ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	2101      	movs	r1, #1
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005292:	4313      	orrs	r3, r2
 8005294:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d155      	bne.n	8005358 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	78db      	ldrb	r3, [r3, #3]
 80052c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	059b      	lsls	r3, r3, #22
 80052ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052d0:	4313      	orrs	r3, r2
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e036      	b.n	8005358 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11a      	bne.n	8005358 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	78db      	ldrb	r3, [r3, #3]
 800533c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800533e:	430b      	orrs	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005356:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d161      	bne.n	8005448 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539a:	d11f      	bne.n	80053dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fc:	4013      	ands	r3, r2
 80053fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	b29b      	uxth	r3, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005420:	4013      	ands	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0159      	lsls	r1, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	440b      	add	r3, r1
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	4619      	mov	r1, r3
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <USB_DeactivateEndpoint+0x1b0>)
 8005442:	4013      	ands	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
 8005446:	e060      	b.n	800550a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800545a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545e:	d11f      	bne.n	80054a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800547e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800549e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	2101      	movs	r1, #1
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	43db      	mvns	r3, r3
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c0:	4013      	ands	r3, r2
 80054c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	43db      	mvns	r3, r3
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e4:	4013      	ands	r3, r2
 80054e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0159      	lsls	r1, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	440b      	add	r3, r1
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	4619      	mov	r1, r3
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <USB_DeactivateEndpoint+0x1b4>)
 8005506:	4013      	ands	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	ec337800 	.word	0xec337800
 800551c:	eff37800 	.word	0xeff37800

08005520 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 815c 	bne.w	80057fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d132      	bne.n	80055b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800556c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800558c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a8:	0cdb      	lsrs	r3, r3, #19
 80055aa:	04db      	lsls	r3, r3, #19
 80055ac:	6113      	str	r3, [r2, #16]
 80055ae:	e074      	b.n	800569a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	0cdb      	lsrs	r3, r3, #19
 80055cc:	04db      	lsls	r3, r3, #19
 80055ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6959      	ldr	r1, [r3, #20]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	440b      	add	r3, r1
 800560c:	1e59      	subs	r1, r3, #1
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	fbb1 f3f3 	udiv	r3, r1, r3
 8005616:	04d9      	lsls	r1, r3, #19
 8005618:	4b9d      	ldr	r3, [pc, #628]	; (8005890 <USB_EPStartXfer+0x370>)
 800561a:	400b      	ands	r3, r1
 800561c:	69b9      	ldr	r1, [r7, #24]
 800561e:	0148      	lsls	r0, r1, #5
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	4401      	add	r1, r0
 8005624:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005642:	69b9      	ldr	r1, [r7, #24]
 8005644:	0148      	lsls	r0, r1, #5
 8005646:	69f9      	ldr	r1, [r7, #28]
 8005648:	4401      	add	r1, r0
 800564a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800564e:	4313      	orrs	r3, r2
 8005650:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	78db      	ldrb	r3, [r3, #3]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d11f      	bne.n	800569a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005678:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005698:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d14b      	bne.n	8005738 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	78db      	ldrb	r3, [r3, #3]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d128      	bne.n	8005716 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d110      	bne.n	80056f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e00f      	b.n	8005716 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e12f      	b.n	8005998 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005756:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	78db      	ldrb	r3, [r3, #3]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d015      	beq.n	800578c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8117 	beq.w	8005998 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	69f9      	ldr	r1, [r7, #28]
 8005782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005786:	4313      	orrs	r3, r2
 8005788:	634b      	str	r3, [r1, #52]	; 0x34
 800578a:	e105      	b.n	8005998 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d110      	bne.n	80057be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	e00f      	b.n	80057de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68d9      	ldr	r1, [r3, #12]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	b298      	uxth	r0, r3
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	4603      	mov	r3, r0
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fa2b 	bl	8005c4e <USB_WritePacket>
 80057f8:	e0ce      	b.n	8005998 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005814:	0cdb      	lsrs	r3, r3, #19
 8005816:	04db      	lsls	r3, r3, #19
 8005818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800583c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d126      	bne.n	8005894 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	0148      	lsls	r0, r1, #5
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	4401      	add	r1, r0
 8005864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005868:	4313      	orrs	r3, r2
 800586a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800588a:	6113      	str	r3, [r2, #16]
 800588c:	e036      	b.n	80058fc <USB_EPStartXfer+0x3dc>
 800588e:	bf00      	nop
 8005890:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4413      	add	r3, r2
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	8afb      	ldrh	r3, [r7, #22]
 80058ba:	04d9      	lsls	r1, r3, #19
 80058bc:	4b39      	ldr	r3, [pc, #228]	; (80059a4 <USB_EPStartXfer+0x484>)
 80058be:	400b      	ands	r3, r1
 80058c0:	69b9      	ldr	r1, [r7, #24]
 80058c2:	0148      	lsls	r0, r1, #5
 80058c4:	69f9      	ldr	r1, [r7, #28]
 80058c6:	4401      	add	r1, r0
 80058c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058cc:	4313      	orrs	r3, r2
 80058ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	8af9      	ldrh	r1, [r7, #22]
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	0148      	lsls	r0, r1, #5
 80058f0:	69f9      	ldr	r1, [r7, #28]
 80058f2:	4401      	add	r1, r0
 80058f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058f8:	4313      	orrs	r3, r2
 80058fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d10d      	bne.n	800591e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	68d9      	ldr	r1, [r3, #12]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	460a      	mov	r2, r1
 800591c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	78db      	ldrb	r3, [r3, #3]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d128      	bne.n	8005978 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005932:	2b00      	cmp	r3, #0
 8005934:	d110      	bne.n	8005958 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005950:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e00f      	b.n	8005978 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005996:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	1ff80000 	.word	0x1ff80000

080059a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	f040 80cd 	bne.w	8005b64 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d132      	bne.n	8005a38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	0cdb      	lsrs	r3, r3, #19
 8005a32:	04db      	lsls	r3, r3, #19
 8005a34:	6113      	str	r3, [r2, #16]
 8005a36:	e04e      	b.n	8005ad6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a52:	0cdb      	lsrs	r3, r3, #19
 8005a54:	04db      	lsls	r3, r3, #19
 8005a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	0151      	lsls	r1, r2, #5
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d903      	bls.n	8005a90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac6:	6939      	ldr	r1, [r7, #16]
 8005ac8:	0148      	lsls	r0, r1, #5
 8005aca:	6979      	ldr	r1, [r7, #20]
 8005acc:	4401      	add	r1, r0
 8005ace:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d11e      	bne.n	8005b1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	e092      	b.n	8005c40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d07e      	beq.n	8005c40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	2101      	movs	r1, #1
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	634b      	str	r3, [r1, #52]	; 0x34
 8005b62:	e06d      	b.n	8005c40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7e:	0cdb      	lsrs	r3, r3, #19
 8005b80:	04db      	lsls	r3, r3, #19
 8005b82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bee:	6939      	ldr	r1, [r7, #16]
 8005bf0:	0148      	lsls	r0, r1, #5
 8005bf2:	6979      	ldr	r1, [r7, #20]
 8005bf4:	4401      	add	r1, r0
 8005bf6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10d      	bne.n	8005c20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68d9      	ldr	r1, [r3, #12]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	460a      	mov	r2, r1
 8005c1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b089      	sub	sp, #36	; 0x24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	71fb      	strb	r3, [r7, #7]
 8005c60:	4613      	mov	r3, r2
 8005c62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005c6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11a      	bne.n	8005caa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	3303      	adds	r3, #3
 8005c78:	089b      	lsrs	r3, r3, #2
 8005c7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e00f      	b.n	8005ca2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	031a      	lsls	r2, r3, #12
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	461a      	mov	r2, r3
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3eb      	bcc.n	8005c82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3724      	adds	r7, #36	; 0x24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b089      	sub	sp, #36	; 0x24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	3303      	adds	r3, #3
 8005cd2:	089b      	lsrs	r3, r3, #2
 8005cd4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	e00b      	b.n	8005cf4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	3304      	adds	r3, #4
 8005cec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61bb      	str	r3, [r7, #24]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d3ef      	bcc.n	8005cdc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3724      	adds	r7, #36	; 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d12c      	bne.n	8005d80 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db12      	blt.n	8005d5e <USB_EPSetStall+0x54>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00f      	beq.n	8005d5e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e02b      	b.n	8005dd8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	db12      	blt.n	8005db8 <USB_EPSetStall+0xae>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00f      	beq.n	8005db8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d128      	bne.n	8005e54 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	78db      	ldrb	r3, [r3, #3]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d003      	beq.n	8005e32 <USB_EPClearStall+0x4c>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	78db      	ldrb	r3, [r3, #3]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d138      	bne.n	8005ea4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e027      	b.n	8005ea4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	78db      	ldrb	r3, [r3, #3]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d003      	beq.n	8005e84 <USB_EPClearStall+0x9e>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d10f      	bne.n	8005ea4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b086      	sub	sp, #24
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e016      	b.n	8005ef2 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ed6:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b0e      	cmp	r3, #14
 8005ef6:	d9e5      	bls.n	8005ec4 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	461a      	mov	r2, r3
 8005f00:	2300      	movs	r3, #0
 8005f02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f16:	461a      	mov	r2, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff f93b 	bl	8005198 <USB_FlushRxFifo>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <USB_StopDevice+0x7e>
  {
    return ret;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	e00b      	b.n	8005f48 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8005f30:	2110      	movs	r1, #16
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff f90a 	bl	800514c <USB_FlushTxFifo>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <USB_StopDevice+0x94>
  {
    return ret;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	e000      	b.n	8005f48 <USB_StopDevice+0x96>
  }

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fca:	f023 0302 	bic.w	r3, r3, #2
 8005fce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ff8:	f023 0303 	bic.w	r3, r3, #3
 8005ffc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600c:	f043 0302 	orr.w	r3, r3, #2
 8006010:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4013      	ands	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006038:	68fb      	ldr	r3, [r7, #12]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	0c1b      	lsrs	r3, r3, #16
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	b29b      	uxth	r3, r3
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060dc:	68bb      	ldr	r3, [r7, #8]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	b2db      	uxtb	r3, r3
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4013      	ands	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006138:	68bb      	ldr	r3, [r7, #8]
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0301 	and.w	r3, r3, #1
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006180:	f023 0307 	bic.w	r3, r3, #7
 8006184:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	460b      	mov	r3, r1
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	333c      	adds	r3, #60	; 0x3c
 80061be:	3304      	adds	r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4a26      	ldr	r2, [pc, #152]	; (8006260 <USB_EP0_OutStart+0xb8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d90a      	bls.n	80061e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061dc:	d101      	bne.n	80061e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e037      	b.n	8006252 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	461a      	mov	r2, r3
 80061ea:	2300      	movs	r3, #0
 80061ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006210:	f043 0318 	orr.w	r3, r3, #24
 8006214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006228:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10f      	bne.n	8006250 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800624e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	4f54300a 	.word	0x4f54300a

08006264 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <USB_CoreReset+0x64>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e01b      	b.n	80062ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	daf2      	bge.n	8006270 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f043 0201 	orr.w	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <USB_CoreReset+0x64>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e006      	b.n	80062ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d0f0      	beq.n	800629a <USB_CoreReset+0x36>

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	00030d40 	.word	0x00030d40

080062cc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80062d4:	4a04      	ldr	r2, [pc, #16]	; (80062e8 <LL_SetSystemCoreClock+0x1c>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6013      	str	r3, [r2, #0]
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000000 	.word	0x20000000

080062ec <LL_AHB1_GRP1_EnableClock>:
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80062f4:	4b08      	ldr	r3, [pc, #32]	; (8006318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80062f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f8:	4907      	ldr	r1, [pc, #28]	; (8006318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4013      	ands	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40023800 	.word	0x40023800

0800631c <LL_APB1_GRP1_EnableClock>:
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006328:	4907      	ldr	r1, [pc, #28]	; (8006348 <LL_APB1_GRP1_EnableClock+0x2c>)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4313      	orrs	r3, r2
 800632e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4013      	ands	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800633a:	68fb      	ldr	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40023800 	.word	0x40023800

0800634c <LL_GPIO_SetOutputPin>:
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	619a      	str	r2, [r3, #24]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <LL_GPIO_ResetOutputPin>:
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	041a      	lsls	r2, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	619a      	str	r2, [r3, #24]
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <LL_SPI_Enable>:
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <LL_SPI_Disable>:
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <LL_SPI_SetStandard>:
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f023 0210 	bic.w	r2, r3, #16
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	605a      	str	r2, [r3, #4]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d101      	bne.n	800642a <LL_SPI_IsActiveFlag_TXE+0x18>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <LL_SPI_IsActiveFlag_TXE+0x1a>
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	b2db      	uxtb	r3, r3
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	330c      	adds	r3, #12
 8006462:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
	...

08006478 <send_initial_clock_train>:
/* Send 80 or so clock transitions with CS and DI held high. This is     */
/* required after card power up to get it into SPI mode                  */
/*-----------------------------------------------------------------------*/
static
void send_initial_clock_train(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct;
  unsigned int i;
  DWORD timeoutTime;

  /* Ensure CS is held high. */
  CS_HIGH();
 800647e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006482:	4831      	ldr	r0, [pc, #196]	; (8006548 <send_initial_clock_train+0xd0>)
 8006484:	f7ff ff62 	bl	800634c <LL_GPIO_SetOutputPin>

  /* Switch the SSI TX line to a GPIO and drive it high too. */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8006488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800648e:	2301      	movs	r3, #1
 8006490:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006492:	2302      	movs	r3, #2
 8006494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800649e:	463b      	mov	r3, r7
 80064a0:	4619      	mov	r1, r3
 80064a2:	4829      	ldr	r0, [pc, #164]	; (8006548 <send_initial_clock_train+0xd0>)
 80064a4:	f7fd fde8 	bl	8004078 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80064a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064ac:	4826      	ldr	r0, [pc, #152]	; (8006548 <send_initial_clock_train+0xd0>)
 80064ae:	f7ff ff4d 	bl	800634c <LL_GPIO_SetOutputPin>

  /* Send 10 bytes over the SSI. This causes the clock to wiggle the */
  /* required number of times. */
  for(i = 0 ; i < 10 ; i++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	e02e      	b.n	8006516 <send_initial_clock_train+0x9e>
  {
    /* Set timeout time to wait for DR register empty */
    timeoutTime = TimerGet() + 100;
 80064b8:	f002 fe64 	bl	8009184 <TimerGet>
 80064bc:	4603      	mov	r3, r0
 80064be:	3364      	adds	r3, #100	; 0x64
 80064c0:	61bb      	str	r3, [r7, #24]
    /* Loop while DR register in not empty */
    while (LL_SPI_IsActiveFlag_TXE(SPI2) == 0)
 80064c2:	e005      	b.n	80064d0 <send_initial_clock_train+0x58>
    {
      /* Break wait loop upon timeout */
      if (TimerGet() > timeoutTime)
 80064c4:	f002 fe5e 	bl	8009184 <TimerGet>
 80064c8:	4602      	mov	r2, r0
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d306      	bcc.n	80064de <send_initial_clock_train+0x66>
    while (LL_SPI_IsActiveFlag_TXE(SPI2) == 0)
 80064d0:	481e      	ldr	r0, [pc, #120]	; (800654c <send_initial_clock_train+0xd4>)
 80064d2:	f7ff ff9e 	bl	8006412 <LL_SPI_IsActiveFlag_TXE>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f3      	beq.n	80064c4 <send_initial_clock_train+0x4c>
 80064dc:	e000      	b.n	80064e0 <send_initial_clock_train+0x68>
      {
        break;
 80064de:	bf00      	nop
      }
    }

    /* Send byte through the SPI peripheral */
    LL_SPI_TransmitData8(SPI2, 0xff);
 80064e0:	21ff      	movs	r1, #255	; 0xff
 80064e2:	481a      	ldr	r0, [pc, #104]	; (800654c <send_initial_clock_train+0xd4>)
 80064e4:	f7ff ffb5 	bl	8006452 <LL_SPI_TransmitData8>

    /* Set timeout time to wait for byte reception */
    timeoutTime = TimerGet() + 100;
 80064e8:	f002 fe4c 	bl	8009184 <TimerGet>
 80064ec:	4603      	mov	r3, r0
 80064ee:	3364      	adds	r3, #100	; 0x64
 80064f0:	61bb      	str	r3, [r7, #24]
    /* Wait to receive a byte */
    while (LL_SPI_IsActiveFlag_RXNE(SPI2) == 0)
 80064f2:	e005      	b.n	8006500 <send_initial_clock_train+0x88>
    {
      /* Break wait loop upon timeout */
      if (TimerGet() > timeoutTime)
 80064f4:	f002 fe46 	bl	8009184 <TimerGet>
 80064f8:	4602      	mov	r2, r0
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d306      	bcc.n	800650e <send_initial_clock_train+0x96>
    while (LL_SPI_IsActiveFlag_RXNE(SPI2) == 0)
 8006500:	4812      	ldr	r0, [pc, #72]	; (800654c <send_initial_clock_train+0xd4>)
 8006502:	f7ff ff73 	bl	80063ec <LL_SPI_IsActiveFlag_RXNE>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f3      	beq.n	80064f4 <send_initial_clock_train+0x7c>
 800650c:	e000      	b.n	8006510 <send_initial_clock_train+0x98>
      {
        break;
 800650e:	bf00      	nop
  for(i = 0 ; i < 10 ; i++)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b09      	cmp	r3, #9
 800651a:	d9cd      	bls.n	80064b8 <send_initial_clock_train+0x40>
      }
    }
  }

  /* Revert to hardware control of the SSI TX line. */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800651c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006520:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006522:	2302      	movs	r3, #2
 8006524:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006526:	2303      	movs	r3, #3
 8006528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800652e:	2300      	movs	r3, #0
 8006530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8006532:	2305      	movs	r3, #5
 8006534:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006536:	463b      	mov	r3, r7
 8006538:	4619      	mov	r1, r3
 800653a:	4803      	ldr	r0, [pc, #12]	; (8006548 <send_initial_clock_train+0xd0>)
 800653c:	f7fd fd9c 	bl	8004078 <LL_GPIO_Init>
}
 8006540:	bf00      	nop
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40020400 	.word	0x40020400
 800654c:	40003800 	.word	0x40003800

08006550 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions.                                  */
static
void power_on (void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b090      	sub	sp, #64	; 0x40
 8006554:	af00      	add	r7, sp, #0
  /*
   * This doesn't really turn the power on, but initializes the
   * SSI port and pins needed to talk to the card.
   */
  /* Enable SPI and GPIO peripheral clocks. */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006556:	2002      	movs	r0, #2
 8006558:	f7ff fec8 	bl	80062ec <LL_AHB1_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800655c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006560:	f7ff fedc 	bl	800631c <LL_APB1_GRP1_EnableClock>

  /* Configure I/O for Chip select (PB12) */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8006564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006568:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800656a:	2301      	movs	r3, #1
 800656c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800656e:	2302      	movs	r3, #2
 8006570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800657a:	463b      	mov	r3, r7
 800657c:	4619      	mov	r1, r3
 800657e:	4821      	ldr	r0, [pc, #132]	; (8006604 <power_on+0xb4>)
 8006580:	f7fd fd7a 	bl	8004078 <LL_GPIO_Init>

  /* De-select the Card: Chip Select high */
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8006584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006588:	481e      	ldr	r0, [pc, #120]	; (8006604 <power_on+0xb4>)
 800658a:	f7ff fedf 	bl	800634c <LL_GPIO_SetOutputPin>

  /* Configure SPI pins: SCK (PB13), MOSI (PB15) and MISO (PB14) */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800658e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006592:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006594:	2302      	movs	r3, #2
 8006596:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006598:	2303      	movs	r3, #3
 800659a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80065a4:	2305      	movs	r3, #5
 80065a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065a8:	463b      	mov	r3, r7
 80065aa:	4619      	mov	r1, r3
 80065ac:	4815      	ldr	r0, [pc, #84]	; (8006604 <power_on+0xb4>)
 80065ae:	f7fd fd63 	bl	8004078 <LL_GPIO_Init>

  /* SPI2 parameter configuration */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80065b6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80065ba:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80065bc:	2300      	movs	r3, #0
 80065be:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80065c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; // 168MHz/4/128=328kHz < 400kHz
 80065ce:	2330      	movs	r3, #48	; 0x30
 80065d0:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80065da:	2307      	movs	r3, #7
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80065de:	f107 0318 	add.w	r3, r7, #24
 80065e2:	4619      	mov	r1, r3
 80065e4:	4808      	ldr	r0, [pc, #32]	; (8006608 <power_on+0xb8>)
 80065e6:	f7fd ffc2 	bl	800456e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80065ea:	2100      	movs	r1, #0
 80065ec:	4806      	ldr	r0, [pc, #24]	; (8006608 <power_on+0xb8>)
 80065ee:	f7ff feea 	bl	80063c6 <LL_SPI_SetStandard>
  LL_SPI_Enable(SPI2);
 80065f2:	4805      	ldr	r0, [pc, #20]	; (8006608 <power_on+0xb8>)
 80065f4:	f7ff fec7 	bl	8006386 <LL_SPI_Enable>

  /* Set DI and CS high and apply more than 74 pulses to SCLK for the card */
  /* to be able to accept a native command. */
  send_initial_clock_train();
 80065f8:	f7ff ff3e 	bl	8006478 <send_initial_clock_train>
}
 80065fc:	bf00      	nop
 80065fe:	3740      	adds	r7, #64	; 0x40
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40020400 	.word	0x40020400
 8006608:	40003800 	.word	0x40003800

0800660c <set_max_speed>:

// set the SSI speed to the max setting
static
void set_max_speed(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	; 0x28
 8006610:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef  SPI_InitStruct;

  /* Disable the SPI system */
  LL_SPI_Disable(SPI2);
 8006612:	4814      	ldr	r0, [pc, #80]	; (8006664 <set_max_speed+0x58>)
 8006614:	f7ff fec7 	bl	80063a6 <LL_SPI_Disable>

  /* MMC/SDC can work at the clock frequency up to 20/25MHz so pick a speed close to
   * this but not higher
   */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8006618:	2300      	movs	r3, #0
 800661a:	603b      	str	r3, [r7, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800661c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006620:	607b      	str	r3, [r7, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800662e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006632:	617b      	str	r3, [r7, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4; // 168MHz/4/4=10.5MHz < 25MHz
 8006634:	2308      	movs	r3, #8
 8006636:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800663c:	2300      	movs	r3, #0
 800663e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.CRCPoly = 7;
 8006640:	2307      	movs	r3, #7
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8006644:	463b      	mov	r3, r7
 8006646:	4619      	mov	r1, r3
 8006648:	4806      	ldr	r0, [pc, #24]	; (8006664 <set_max_speed+0x58>)
 800664a:	f7fd ff90 	bl	800456e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800664e:	2100      	movs	r1, #0
 8006650:	4804      	ldr	r0, [pc, #16]	; (8006664 <set_max_speed+0x58>)
 8006652:	f7ff feb8 	bl	80063c6 <LL_SPI_SetStandard>
  LL_SPI_Enable(SPI2);
 8006656:	4803      	ldr	r0, [pc, #12]	; (8006664 <set_max_speed+0x58>)
 8006658:	f7ff fe95 	bl	8006386 <LL_SPI_Enable>
}
 800665c:	bf00      	nop
 800665e:	3728      	adds	r7, #40	; 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40003800 	.word	0x40003800

08006668 <power_off>:

static
void power_off (void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
	Stat |= STA_NOINIT;	/* Force uninitialized */
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <power_off+0x20>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	b2da      	uxtb	r2, r3
 8006678:	4b03      	ldr	r3, [pc, #12]	; (8006688 <power_off+0x20>)
 800667a:	701a      	strb	r2, [r3, #0]
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20000009 	.word	0x20000009

0800668c <xchg_spi>:
/* Transmit/Receive data to/from MMC via SPI  (Platform dependent)       */
/*-----------------------------------------------------------------------*/

static
BYTE xchg_spi (BYTE dat)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
  BYTE result = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  DWORD timeOutTime;
  BYTE timeoutDetected = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	73bb      	strb	r3, [r7, #14]

  /* Send byte through the SPI peripheral */
  LL_SPI_TransmitData8(SPI2, dat);
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	4619      	mov	r1, r3
 80066a2:	4813      	ldr	r0, [pc, #76]	; (80066f0 <xchg_spi+0x64>)
 80066a4:	f7ff fed5 	bl	8006452 <LL_SPI_TransmitData8>

  /* Set timeout for 50 ms from now */
  timeOutTime = TimerGet() + 50;
 80066a8:	f002 fd6c 	bl	8009184 <TimerGet>
 80066ac:	4603      	mov	r3, r0
 80066ae:	3332      	adds	r3, #50	; 0x32
 80066b0:	60bb      	str	r3, [r7, #8]

  /* Wait to receive a byte with timeout */
  while (LL_SPI_IsActiveFlag_RXNE(SPI2) == 0)
 80066b2:	e00a      	b.n	80066ca <xchg_spi+0x3e>
  {
    /* Service the watchdog */
    CopService();
 80066b4:	f003 fa2f 	bl	8009b16 <CopService>

    /* Check for timeout */
    if (TimerGet() > timeOutTime)
 80066b8:	f002 fd64 	bl	8009184 <TimerGet>
 80066bc:	4602      	mov	r2, r0
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d202      	bcs.n	80066ca <xchg_spi+0x3e>
    {
      /* Set flag to remember that a timeout occurred and nothing was received */
      timeoutDetected = 1;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73bb      	strb	r3, [r7, #14]
      /* Stop waiting */
      break;
 80066c8:	e005      	b.n	80066d6 <xchg_spi+0x4a>
  while (LL_SPI_IsActiveFlag_RXNE(SPI2) == 0)
 80066ca:	4809      	ldr	r0, [pc, #36]	; (80066f0 <xchg_spi+0x64>)
 80066cc:	f7ff fe8e 	bl	80063ec <LL_SPI_IsActiveFlag_RXNE>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0ee      	beq.n	80066b4 <xchg_spi+0x28>
    }
  }

  /* Read the value of the received byte */
  if (timeoutDetected == 0)
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <xchg_spi+0x5a>
  {
    result = LL_SPI_ReceiveData8(SPI2);
 80066dc:	4804      	ldr	r0, [pc, #16]	; (80066f0 <xchg_spi+0x64>)
 80066de:	f7ff feab 	bl	8006438 <LL_SPI_ReceiveData8>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Give the result back to the caller */
  return result;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40003800 	.word	0x40003800

080066f4 <rcvr_spi_m>:

static
void rcvr_spi_m (BYTE *dst)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
    *dst = xchg_spi(0xFF);
 80066fc:	20ff      	movs	r0, #255	; 0xff
 80066fe:	f7ff ffc5 	bl	800668c <xchg_spi>
 8006702:	4603      	mov	r3, r0
 8006704:	461a      	mov	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	701a      	strb	r2, [r3, #0]
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
	BYTE d;
  DWORD timeOutTime;

  /* set timeout for 500 ms from now */
  timeOutTime = TimerGet() + 500;
 8006718:	f002 fd34 	bl	8009184 <TimerGet>
 800671c:	4603      	mov	r3, r0
 800671e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006722:	607b      	str	r3, [r7, #4]

	do {
		d = xchg_spi(0xFF);
 8006724:	20ff      	movs	r0, #255	; 0xff
 8006726:	f7ff ffb1 	bl	800668c <xchg_spi>
 800672a:	4603      	mov	r3, r0
 800672c:	70fb      	strb	r3, [r7, #3]
    /* Service the watchdog */
    CopService();
 800672e:	f003 f9f2 	bl	8009b16 <CopService>
	} while ((d != 0xFF) && (TimerGet() < timeOutTime));
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	2bff      	cmp	r3, #255	; 0xff
 8006736:	d005      	beq.n	8006744 <wait_ready+0x32>
 8006738:	f002 fd24 	bl	8009184 <TimerGet>
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4293      	cmp	r3, r2
 8006742:	d8ef      	bhi.n	8006724 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	2bff      	cmp	r3, #255	; 0xff
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <deselect_card>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect_card (void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
	CS_HIGH();
 800675c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006760:	4803      	ldr	r0, [pc, #12]	; (8006770 <deselect_card+0x18>)
 8006762:	f7ff fdf3 	bl	800634c <LL_GPIO_SetOutputPin>
	xchg_spi(0xFF);		/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006766:	20ff      	movs	r0, #255	; 0xff
 8006768:	f7ff ff90 	bl	800668c <xchg_spi>
}
 800676c:	bf00      	nop
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40020400 	.word	0x40020400

08006774 <select_card>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
int select_card (void)	/* 1:Successful, 0:Timeout */
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
	CS_LOW();
 8006778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800677c:	4808      	ldr	r0, [pc, #32]	; (80067a0 <select_card+0x2c>)
 800677e:	f7ff fdf3 	bl	8006368 <LL_GPIO_ResetOutputPin>
	xchg_spi(0xFF);		/* Dummy clock (force DO enabled) */
 8006782:	20ff      	movs	r0, #255	; 0xff
 8006784:	f7ff ff82 	bl	800668c <xchg_spi>

	if (wait_ready()) return 1;	/* OK */
 8006788:	f7ff ffc3 	bl	8006712 <wait_ready>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <select_card+0x22>
 8006792:	2301      	movs	r3, #1
 8006794:	e002      	b.n	800679c <select_card+0x28>
	deselect_card();
 8006796:	f7ff ffdf 	bl	8006758 <deselect_card>
	return 0;	/* Timeout */
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40020400 	.word	0x40020400

080067a4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
	BYTE token;
  DWORD timeOutTime;

  /* set timeout for 100 ms from now */
  timeOutTime = TimerGet() + 100;
 80067ae:	f002 fce9 	bl	8009184 <TimerGet>
 80067b2:	4603      	mov	r3, r0
 80067b4:	3364      	adds	r3, #100	; 0x64
 80067b6:	60fb      	str	r3, [r7, #12]

	do {							/* Wait for data packet in timeout of 100ms */
		token = xchg_spi(0xFF);
 80067b8:	20ff      	movs	r0, #255	; 0xff
 80067ba:	f7ff ff67 	bl	800668c <xchg_spi>
 80067be:	4603      	mov	r3, r0
 80067c0:	72fb      	strb	r3, [r7, #11]
    /* Service the watchdog */
    CopService();
 80067c2:	f003 f9a8 	bl	8009b16 <CopService>

	} while ((token == 0xFF) && (TimerGet() < timeOutTime));
 80067c6:	7afb      	ldrb	r3, [r7, #11]
 80067c8:	2bff      	cmp	r3, #255	; 0xff
 80067ca:	d105      	bne.n	80067d8 <rcvr_datablock+0x34>
 80067cc:	f002 fcda 	bl	8009184 <TimerGet>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d8ef      	bhi.n	80067b8 <rcvr_datablock+0x14>

	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	2bfe      	cmp	r3, #254	; 0xfe
 80067dc:	d001      	beq.n	80067e2 <rcvr_datablock+0x3e>
 80067de:	2300      	movs	r3, #0
 80067e0:	e01a      	b.n	8006818 <rcvr_datablock+0x74>

    do {                            /* Receive the data block into buffer */
        rcvr_spi_m(buff++);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff ff83 	bl	80066f4 <rcvr_spi_m>
        rcvr_spi_m(buff++);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff ff7d 	bl	80066f4 <rcvr_spi_m>
        /* Service the watchdog */
        CopService();
 80067fa:	f003 f98c 	bl	8009b16 <CopService>
    } while (btr -= 2);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	3b02      	subs	r3, #2
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1eb      	bne.n	80067e2 <rcvr_datablock+0x3e>
	xchg_spi(0xFF);					/* Discard CRC */
 800680a:	20ff      	movs	r0, #255	; 0xff
 800680c:	f7ff ff3e 	bl	800668c <xchg_spi>
	xchg_spi(0xFF);
 8006810:	20ff      	movs	r0, #255	; 0xff
 8006812:	f7ff ff3b 	bl	800668c <xchg_spi>

	return 1;						/* Return with success */
 8006816:	2301      	movs	r3, #1
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data token */
)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
    BYTE resp;
    UINT wc;


	if (!wait_ready()) return 0;
 800682c:	f7ff ff71 	bl	8006712 <wait_ready>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <xmit_datablock+0x1a>
 8006836:	2300      	movs	r3, #0
 8006838:	e032      	b.n	80068a0 <xmit_datablock+0x80>

	xchg_spi(token);		/* Xmit a token */
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff ff25 	bl	800668c <xchg_spi>
	if (token != 0xFD) {	/* Not StopTran token */
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	2bfd      	cmp	r3, #253	; 0xfd
 8006846:	d02a      	beq.n	800689e <xmit_datablock+0x7e>
        wc = 512;
 8006848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800684c:	60fb      	str	r3, [r7, #12]
        do {                            /* Xmit the 512 byte data block to MMC */
            xchg_spi(*buff++);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff ff18 	bl	800668c <xchg_spi>
            xchg_spi(*buff++);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff ff11 	bl	800668c <xchg_spi>
            /* Service the watchdog */
            CopService();
 800686a:	f003 f954 	bl	8009b16 <CopService>
        } while (wc -= 2);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3b02      	subs	r3, #2
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e9      	bne.n	800684e <xmit_datablock+0x2e>
		xchg_spi(0xFF);				/* CRC (Dummy) */
 800687a:	20ff      	movs	r0, #255	; 0xff
 800687c:	f7ff ff06 	bl	800668c <xchg_spi>
		xchg_spi(0xFF);
 8006880:	20ff      	movs	r0, #255	; 0xff
 8006882:	f7ff ff03 	bl	800668c <xchg_spi>
		resp = xchg_spi(0xFF);		/* Receive a data response */
 8006886:	20ff      	movs	r0, #255	; 0xff
 8006888:	f7ff ff00 	bl	800668c <xchg_spi>
 800688c:	4603      	mov	r3, r0
 800688e:	72fb      	strb	r3, [r7, #11]
		if ((resp & 0x1F) != 0x05)	/* If not accepted, return with error */
 8006890:	7afb      	ldrb	r3, [r7, #11]
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2b05      	cmp	r3, #5
 8006898:	d001      	beq.n	800689e <xmit_datablock+0x7e>
			return 0;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <xmit_datablock+0x80>
	}

	return 1;
 800689e:	2301      	movs	r3, #1
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 80068b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	da0e      	bge.n	80068da <send_cmd+0x32>
		cmd &= 0x7F;
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80068c4:	2100      	movs	r1, #0
 80068c6:	2037      	movs	r0, #55	; 0x37
 80068c8:	f7ff ffee 	bl	80068a8 <send_cmd>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d901      	bls.n	80068da <send_cmd+0x32>
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	e050      	b.n	800697c <send_cmd+0xd4>
	}

	/* Select the card and wait for ready */
	deselect_card();
 80068da:	f7ff ff3d 	bl	8006758 <deselect_card>
	if (!select_card()) return 0xFF;
 80068de:	f7ff ff49 	bl	8006774 <select_card>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <send_cmd+0x44>
 80068e8:	23ff      	movs	r3, #255	; 0xff
 80068ea:	e047      	b.n	800697c <send_cmd+0xd4>

	/* Send command packet */
	xchg_spi(0x40 | cmd);			/* Start + Command index */
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fec9 	bl	800668c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));	/* Argument[31..24] */
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	0e1b      	lsrs	r3, r3, #24
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff fec3 	bl	800668c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));	/* Argument[23..16] */
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	b2db      	uxtb	r3, r3
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff febd 	bl	800668c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));		/* Argument[15..8] */
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	b2db      	uxtb	r3, r3
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff feb7 	bl	800668c <xchg_spi>
	xchg_spi((BYTE)arg);			/* Argument[7..0] */
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff feb2 	bl	800668c <xchg_spi>
	n = 0x01;						/* Dummy CRC + Stop */
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) + Stop */
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <send_cmd+0x8e>
 8006932:	2395      	movs	r3, #149	; 0x95
 8006934:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) + Stop */
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d101      	bne.n	8006940 <send_cmd+0x98>
 800693c:	2387      	movs	r3, #135	; 0x87
 800693e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fea2 	bl	800668c <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Skip a stuff byte on stop to read */
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b0c      	cmp	r3, #12
 800694c:	d102      	bne.n	8006954 <send_cmd+0xac>
 800694e:	20ff      	movs	r0, #255	; 0xff
 8006950:	f7ff fe9c 	bl	800668c <xchg_spi>
	n = 10;							/* Wait for a valid response in timeout of 10 attempts */
 8006954:	230a      	movs	r3, #10
 8006956:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006958:	20ff      	movs	r0, #255	; 0xff
 800695a:	f7ff fe97 	bl	800668c <xchg_spi>
 800695e:	4603      	mov	r3, r0
 8006960:	73bb      	strb	r3, [r7, #14]
    /* Service the watchdog */
    CopService();
 8006962:	f003 f8d8 	bl	8009b16 <CopService>
	} while ((res & 0x80) && --n);
 8006966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800696a:	2b00      	cmp	r3, #0
 800696c:	da05      	bge.n	800697a <send_cmd+0xd2>
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	3b01      	subs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1ee      	bne.n	8006958 <send_cmd+0xb0>

	return res;			/* Return with the response value */
 800697a:	7bbb      	ldrb	r3, [r7, #14]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];
  DWORD timeOutTime;


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <disk_initialize+0x14>
 8006994:	2301      	movs	r3, #1
 8006996:	e0c6      	b.n	8006b26 <disk_initialize+0x1a2>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 8006998:	4b65      	ldr	r3, [pc, #404]	; (8006b30 <disk_initialize+0x1ac>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <disk_initialize+0x2a>
 80069a6:	4b62      	ldr	r3, [pc, #392]	; (8006b30 <disk_initialize+0x1ac>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	e0bb      	b.n	8006b26 <disk_initialize+0x1a2>

    power_on();                            /* Force socket power on */
 80069ae:	f7ff fdcf 	bl	8006550 <power_on>

     CS_LOW();                /* CS = L */
 80069b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069b6:	485f      	ldr	r0, [pc, #380]	; (8006b34 <disk_initialize+0x1b0>)
 80069b8:	f7ff fcd6 	bl	8006368 <LL_GPIO_ResetOutputPin>

	ty = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	757b      	strb	r3, [r7, #21]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 80069c0:	2100      	movs	r1, #0
 80069c2:	2000      	movs	r0, #0
 80069c4:	f7ff ff70 	bl	80068a8 <send_cmd>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	f040 8093 	bne.w	8006af6 <disk_initialize+0x172>
    timeOutTime = TimerGet() + 1000; /* Initialization timeout of 1000 msec */
 80069d0:	f002 fbd8 	bl	8009184 <TimerGet>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80069da:	613b      	str	r3, [r7, #16]

		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80069dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069e0:	2008      	movs	r0, #8
 80069e2:	f7ff ff61 	bl	80068a8 <send_cmd>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d153      	bne.n	8006a94 <disk_initialize+0x110>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);			/* Get trailing return value of R7 resp */
 80069ec:	2300      	movs	r3, #0
 80069ee:	75fb      	strb	r3, [r7, #23]
 80069f0:	e00d      	b.n	8006a0e <disk_initialize+0x8a>
 80069f2:	7dfc      	ldrb	r4, [r7, #23]
 80069f4:	20ff      	movs	r0, #255	; 0xff
 80069f6:	f7ff fe49 	bl	800668c <xchg_spi>
 80069fa:	4603      	mov	r3, r0
 80069fc:	461a      	mov	r2, r3
 80069fe:	f104 0318 	add.w	r3, r4, #24
 8006a02:	443b      	add	r3, r7
 8006a04:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d9ee      	bls.n	80069f2 <disk_initialize+0x6e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d16d      	bne.n	8006af6 <disk_initialize+0x172>
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2baa      	cmp	r3, #170	; 0xaa
 8006a1e:	d16a      	bne.n	8006af6 <disk_initialize+0x172>
				while ((TimerGet() < timeOutTime) && send_cmd(ACMD41, 0x40000000));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 8006a20:	bf00      	nop
 8006a22:	f002 fbaf 	bl	8009184 <TimerGet>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d907      	bls.n	8006a3e <disk_initialize+0xba>
 8006a2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a32:	20a9      	movs	r0, #169	; 0xa9
 8006a34:	f7ff ff38 	bl	80068a8 <send_cmd>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f1      	bne.n	8006a22 <disk_initialize+0x9e>
				if ((TimerGet() < timeOutTime) && send_cmd(CMD58, 0) == 0) {			/* Check CCS bit in the OCR */
 8006a3e:	f002 fba1 	bl	8009184 <TimerGet>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d955      	bls.n	8006af6 <disk_initialize+0x172>
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	203a      	movs	r0, #58	; 0x3a
 8006a4e:	f7ff ff2b 	bl	80068a8 <send_cmd>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d14e      	bne.n	8006af6 <disk_initialize+0x172>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	75fb      	strb	r3, [r7, #23]
 8006a5c:	e00d      	b.n	8006a7a <disk_initialize+0xf6>
 8006a5e:	7dfc      	ldrb	r4, [r7, #23]
 8006a60:	20ff      	movs	r0, #255	; 0xff
 8006a62:	f7ff fe13 	bl	800668c <xchg_spi>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f104 0318 	add.w	r3, r4, #24
 8006a6e:	443b      	add	r3, r7
 8006a70:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	3301      	adds	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d9ee      	bls.n	8006a5e <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? CT_SD2|CT_BLOCK : CT_SD2;	/* SDv2 */
 8006a80:	7b3b      	ldrb	r3, [r7, #12]
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <disk_initialize+0x10a>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	e000      	b.n	8006a90 <disk_initialize+0x10c>
 8006a8e:	2304      	movs	r3, #4
 8006a90:	757b      	strb	r3, [r7, #21]
 8006a92:	e030      	b.n	8006af6 <disk_initialize+0x172>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 8006a94:	2100      	movs	r1, #0
 8006a96:	20a9      	movs	r0, #169	; 0xa9
 8006a98:	f7ff ff06 	bl	80068a8 <send_cmd>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d804      	bhi.n	8006aac <disk_initialize+0x128>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	757b      	strb	r3, [r7, #21]
 8006aa6:	23a9      	movs	r3, #169	; 0xa9
 8006aa8:	75bb      	strb	r3, [r7, #22]
 8006aaa:	e006      	b.n	8006aba <disk_initialize+0x136>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 8006aac:	2301      	movs	r3, #1
 8006aae:	757b      	strb	r3, [r7, #21]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75bb      	strb	r3, [r7, #22]
			}
			while ((TimerGet() < timeOutTime) && send_cmd(cmd, 0)) {	/* Wait for leaving idle state */
 8006ab4:	e001      	b.n	8006aba <disk_initialize+0x136>
		    /* Service the watchdog */
		    CopService();
 8006ab6:	f003 f82e 	bl	8009b16 <CopService>
			while ((TimerGet() < timeOutTime) && send_cmd(cmd, 0)) {	/* Wait for leaving idle state */
 8006aba:	f002 fb63 	bl	8009184 <TimerGet>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d907      	bls.n	8006ad6 <disk_initialize+0x152>
 8006ac6:	7dbb      	ldrb	r3, [r7, #22]
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff feec 	bl	80068a8 <send_cmd>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ef      	bne.n	8006ab6 <disk_initialize+0x132>
			}
			if (!(TimerGet() < timeOutTime) || send_cmd(CMD16, 512) != 0)	/* Set read/write block length to 512 */
 8006ad6:	f002 fb55 	bl	8009184 <TimerGet>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d907      	bls.n	8006af2 <disk_initialize+0x16e>
 8006ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ae6:	2010      	movs	r0, #16
 8006ae8:	f7ff fede 	bl	80068a8 <send_cmd>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <disk_initialize+0x172>
				ty = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	757b      	strb	r3, [r7, #21]
		}
	}
	CardType = ty;
 8006af6:	7d7b      	ldrb	r3, [r7, #21]
 8006af8:	4a0f      	ldr	r2, [pc, #60]	; (8006b38 <disk_initialize+0x1b4>)
 8006afa:	6013      	str	r3, [r2, #0]
	deselect_card();
 8006afc:	f7ff fe2c 	bl	8006758 <deselect_card>

	if (ty) {			/* Initialization succeded */
 8006b00:	7d7b      	ldrb	r3, [r7, #21]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <disk_initialize+0x198>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT */
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <disk_initialize+0x1ac>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <disk_initialize+0x1ac>)
 8006b14:	701a      	strb	r2, [r3, #0]
		FCLK_FAST();
 8006b16:	f7ff fd79 	bl	800660c <set_max_speed>
 8006b1a:	e001      	b.n	8006b20 <disk_initialize+0x19c>
	} else {			/* Initialization failed */
		power_off();
 8006b1c:	f7ff fda4 	bl	8006668 <power_off>
	}

	return Stat;
 8006b20:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <disk_initialize+0x1ac>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b2db      	uxtb	r3, r3
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd90      	pop	{r4, r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000009 	.word	0x20000009
 8006b34:	40020400 	.word	0x40020400
 8006b38:	20000808 	.word	0x20000808

08006b3c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <disk_status+0x14>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e002      	b.n	8006b56 <disk_status+0x1a>
	return Stat;
 8006b50:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <disk_status+0x28>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	b2db      	uxtb	r3, r3
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000009 	.word	0x20000009

08006b68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count) return RES_PARERR;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <disk_read+0x1c>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <disk_read+0x20>
 8006b84:	2304      	movs	r3, #4
 8006b86:	e04f      	b.n	8006c28 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b88:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <disk_read+0xc8>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <disk_read+0x32>
 8006b96:	2303      	movs	r3, #3
 8006b98:	e046      	b.n	8006c28 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8006b9a:	4b26      	ldr	r3, [pc, #152]	; (8006c34 <disk_read+0xcc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <disk_read+0x44>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	025b      	lsls	r3, r3, #9
 8006baa:	607b      	str	r3, [r7, #4]

	if (count == 1) {		/* Single block read */
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d111      	bne.n	8006bd6 <disk_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	2011      	movs	r0, #17
 8006bb6:	f7ff fe77 	bl	80068a8 <send_cmd>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d12b      	bne.n	8006c18 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 8006bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bc4:	68b8      	ldr	r0, [r7, #8]
 8006bc6:	f7ff fded 	bl	80067a4 <rcvr_datablock>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d023      	beq.n	8006c18 <disk_read+0xb0>
			count = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	e020      	b.n	8006c18 <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	2012      	movs	r0, #18
 8006bda:	f7ff fe65 	bl	80068a8 <send_cmd>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d119      	bne.n	8006c18 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006be8:	68b8      	ldr	r0, [r7, #8]
 8006bea:	f7ff fddb 	bl	80067a4 <rcvr_datablock>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00c      	beq.n	8006c0e <disk_read+0xa6>
				buff += 512;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006bfa:	60bb      	str	r3, [r7, #8]
		    /* Service the watchdog */
		    CopService();
 8006bfc:	f002 ff8b 	bl	8009b16 <CopService>
			} while (--count);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1eb      	bne.n	8006be4 <disk_read+0x7c>
 8006c0c:	e000      	b.n	8006c10 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 8006c0e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006c10:	2100      	movs	r1, #0
 8006c12:	200c      	movs	r0, #12
 8006c14:	f7ff fe48 	bl	80068a8 <send_cmd>
		}
	}
	deselect_card();
 8006c18:	f7ff fd9e 	bl	8006758 <deselect_card>

	return count ? RES_ERROR : RES_OK;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bf14      	ite	ne
 8006c22:	2301      	movne	r3, #1
 8006c24:	2300      	moveq	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000009 	.word	0x20000009
 8006c34:	20000808 	.word	0x20000808

08006c38 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count) return RES_PARERR;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <disk_write+0x1c>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <disk_write+0x20>
 8006c54:	2304      	movs	r3, #4
 8006c56:	e065      	b.n	8006d24 <disk_write+0xec>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c58:	4b34      	ldr	r3, [pc, #208]	; (8006d2c <disk_write+0xf4>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <disk_write+0x32>
 8006c66:	2303      	movs	r3, #3
 8006c68:	e05c      	b.n	8006d24 <disk_write+0xec>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8006c6a:	4b30      	ldr	r3, [pc, #192]	; (8006d2c <disk_write+0xf4>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <disk_write+0x44>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e053      	b.n	8006d24 <disk_write+0xec>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8006c7c:	4b2c      	ldr	r3, [pc, #176]	; (8006d30 <disk_write+0xf8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <disk_write+0x56>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	025b      	lsls	r3, r3, #9
 8006c8c:	607b      	str	r3, [r7, #4]

	if (count == 1) {		/* Single block write */
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d110      	bne.n	8006cb6 <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	2018      	movs	r0, #24
 8006c98:	f7ff fe06 	bl	80068a8 <send_cmd>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d138      	bne.n	8006d14 <disk_write+0xdc>
			&& xmit_datablock(buff, 0xFE))
 8006ca2:	21fe      	movs	r1, #254	; 0xfe
 8006ca4:	68b8      	ldr	r0, [r7, #8]
 8006ca6:	f7ff fdbb 	bl	8006820 <xmit_datablock>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d031      	beq.n	8006d14 <disk_write+0xdc>
			count = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	e02e      	b.n	8006d14 <disk_write+0xdc>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8006cb6:	4b1e      	ldr	r3, [pc, #120]	; (8006d30 <disk_write+0xf8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0306 	and.w	r3, r3, #6
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <disk_write+0x92>
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	2097      	movs	r0, #151	; 0x97
 8006cc6:	f7ff fdef 	bl	80068a8 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	2019      	movs	r0, #25
 8006cce:	f7ff fdeb 	bl	80068a8 <send_cmd>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11d      	bne.n	8006d14 <disk_write+0xdc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006cd8:	21fc      	movs	r1, #252	; 0xfc
 8006cda:	68b8      	ldr	r0, [r7, #8]
 8006cdc:	f7ff fda0 	bl	8006820 <xmit_datablock>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00c      	beq.n	8006d00 <disk_write+0xc8>
				buff += 512;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006cec:	60bb      	str	r3, [r7, #8]
		    /* Service the watchdog */
		    CopService();
 8006cee:	f002 ff12 	bl	8009b16 <CopService>
			} while (--count);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1ec      	bne.n	8006cd8 <disk_write+0xa0>
 8006cfe:	e000      	b.n	8006d02 <disk_write+0xca>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006d00:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8006d02:	21fd      	movs	r1, #253	; 0xfd
 8006d04:	2000      	movs	r0, #0
 8006d06:	f7ff fd8b 	bl	8006820 <xmit_datablock>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <disk_write+0xdc>
				count = 1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	603b      	str	r3, [r7, #0]
		}
	}
	deselect_card();
 8006d14:	f7ff fd20 	bl	8006758 <deselect_card>

	return count ? RES_ERROR : RES_OK;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000009 	.word	0x20000009
 8006d30:	20000808 	.word	0x20000808

08006d34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive data block */
)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b08b      	sub	sp, #44	; 0x2c
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	603a      	str	r2, [r7, #0]
 8006d3e:	71fb      	strb	r3, [r7, #7]
 8006d40:	460b      	mov	r3, r1
 8006d42:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	623b      	str	r3, [r7, #32]
	DWORD csz;


	if (pdrv) return RES_PARERR;
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <disk_ioctl+0x1e>
 8006d4e:	2304      	movs	r3, #4
 8006d50:	e18f      	b.n	8007072 <disk_ioctl+0x33e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006d52:	4bc2      	ldr	r3, [pc, #776]	; (800705c <disk_ioctl+0x328>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <disk_ioctl+0x30>
 8006d60:	2303      	movs	r3, #3
 8006d62:	e186      	b.n	8007072 <disk_ioctl+0x33e>

	res = RES_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (cmd) {
 8006d6a:	79bb      	ldrb	r3, [r7, #6]
 8006d6c:	2b0e      	cmp	r3, #14
 8006d6e:	f200 8167 	bhi.w	8007040 <disk_ioctl+0x30c>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <disk_ioctl+0x44>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006db5 	.word	0x08006db5
 8006d7c:	08006dc9 	.word	0x08006dc9
 8006d80:	08007041 	.word	0x08007041
 8006d84:	08006e75 	.word	0x08006e75
 8006d88:	08007041 	.word	0x08007041
 8006d8c:	08007041 	.word	0x08007041
 8006d90:	08007041 	.word	0x08007041
 8006d94:	08007041 	.word	0x08007041
 8006d98:	08007041 	.word	0x08007041
 8006d9c:	08007041 	.word	0x08007041
 8006da0:	08006f6b 	.word	0x08006f6b
 8006da4:	08006f7d 	.word	0x08006f7d
 8006da8:	08006fa1 	.word	0x08006fa1
 8006dac:	08006fc5 	.word	0x08006fc5
 8006db0:	0800700b 	.word	0x0800700b
	case CTRL_SYNC :	/* Flush write-back cache, Wait for end of internal process */
		if (select_card()) res = RES_OK;
 8006db4:	f7ff fcde 	bl	8006774 <select_card>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8144 	beq.w	8007048 <disk_ioctl+0x314>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8006dc6:	e13f      	b.n	8007048 <disk_ioctl+0x314>

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (WORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006dc8:	2100      	movs	r1, #0
 8006dca:	2009      	movs	r0, #9
 8006dcc:	f7ff fd6c 	bl	80068a8 <send_cmd>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 813a 	bne.w	800704c <disk_ioctl+0x318>
 8006dd8:	f107 030c 	add.w	r3, r7, #12
 8006ddc:	2110      	movs	r1, #16
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff fce0 	bl	80067a4 <rcvr_datablock>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 8130 	beq.w	800704c <disk_ioctl+0x318>
			if ((csd[0] >> 6) == 1) {	/* SDv2? */
 8006dec:	7b3b      	ldrb	r3, [r7, #12]
 8006dee:	099b      	lsrs	r3, r3, #6
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d111      	bne.n	8006e1a <disk_ioctl+0xe6>
				csz = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006df6:	7d7b      	ldrb	r3, [r7, #21]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	7d3b      	ldrb	r3, [r7, #20]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	4413      	add	r3, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	7cfb      	ldrb	r3, [r7, #19]
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csz << 10;
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	029a      	lsls	r2, r3, #10
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e028      	b.n	8006e6c <disk_ioctl+0x138>
			} else {					/* SDv1 or MMCv3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006e1a:	7c7b      	ldrb	r3, [r7, #17]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	7dbb      	ldrb	r3, [r7, #22]
 8006e24:	09db      	lsrs	r3, r3, #7
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	4413      	add	r3, r2
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	7d7b      	ldrb	r3, [r7, #21]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 0306 	and.w	r3, r3, #6
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				csz = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006e42:	7d3b      	ldrb	r3, [r7, #20]
 8006e44:	099b      	lsrs	r3, r3, #6
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	7cfb      	ldrb	r3, [r7, #19]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	441a      	add	r2, r3
 8006e50:	7cbb      	ldrb	r3, [r7, #18]
 8006e52:	029b      	lsls	r3, r3, #10
 8006e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e58:	4413      	add	r3, r2
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csz << (n - 9);
 8006e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e62:	3b09      	subs	r3, #9
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	409a      	lsls	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		break;
 8006e72:	e0eb      	b.n	800704c <disk_ioctl+0x318>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sectors (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
 8006e74:	4b7a      	ldr	r3, [pc, #488]	; (8007060 <disk_ioctl+0x32c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d031      	beq.n	8006ee4 <disk_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {		/* Read SD status */
 8006e80:	2100      	movs	r1, #0
 8006e82:	208d      	movs	r0, #141	; 0x8d
 8006e84:	f7ff fd10 	bl	80068a8 <send_cmd>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 80e0 	bne.w	8007050 <disk_ioctl+0x31c>
				xchg_spi(0xFF);
 8006e90:	20ff      	movs	r0, #255	; 0xff
 8006e92:	f7ff fbfb 	bl	800668c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006e96:	f107 030c 	add.w	r3, r7, #12
 8006e9a:	2110      	movs	r1, #16
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fc81 	bl	80067a4 <rcvr_datablock>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80d3 	beq.w	8007050 <disk_ioctl+0x31c>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006eaa:	2330      	movs	r3, #48	; 0x30
 8006eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006eb0:	e007      	b.n	8006ec2 <disk_ioctl+0x18e>
 8006eb2:	20ff      	movs	r0, #255	; 0xff
 8006eb4:	f7ff fbea 	bl	800668c <xchg_spi>
 8006eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f3      	bne.n	8006eb2 <disk_ioctl+0x17e>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006eca:	7dbb      	ldrb	r3, [r7, #22]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	fa03 f202 	lsl.w	r2, r3, r2
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006ee2:	e0b5      	b.n	8007050 <disk_ioctl+0x31c>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	2009      	movs	r0, #9
 8006ee8:	f7ff fcde 	bl	80068a8 <send_cmd>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 80ae 	bne.w	8007050 <disk_ioctl+0x31c>
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	2110      	movs	r1, #16
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fc52 	bl	80067a4 <rcvr_datablock>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80a4 	beq.w	8007050 <disk_ioctl+0x31c>
				if (CardType & CT_SD1) {	/* SDv1 */
 8006f08:	4b55      	ldr	r3, [pc, #340]	; (8007060 <disk_ioctl+0x32c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <disk_ioctl+0x206>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006f14:	7dbb      	ldrb	r3, [r7, #22]
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006f1c:	7dfa      	ldrb	r2, [r7, #23]
 8006f1e:	09d2      	lsrs	r2, r2, #7
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	4413      	add	r3, r2
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	7e7b      	ldrb	r3, [r7, #25]
 8006f28:	099b      	lsrs	r3, r3, #6
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e013      	b.n	8006f62 <disk_ioctl+0x22e>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006f3a:	7dbb      	ldrb	r3, [r7, #22]
 8006f3c:	109b      	asrs	r3, r3, #2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	3301      	adds	r3, #1
 8006f46:	7dfa      	ldrb	r2, [r7, #23]
 8006f48:	00d2      	lsls	r2, r2, #3
 8006f4a:	f002 0218 	and.w	r2, r2, #24
 8006f4e:	7df9      	ldrb	r1, [r7, #23]
 8006f50:	0949      	lsrs	r1, r1, #5
 8006f52:	b2c9      	uxtb	r1, r1
 8006f54:	440a      	add	r2, r1
 8006f56:	3201      	adds	r2, #1
 8006f58:	fb02 f303 	mul.w	r3, r2, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8006f68:	e072      	b.n	8007050 <disk_ioctl+0x31c>

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
 8006f6a:	4b3d      	ldr	r3, [pc, #244]	; (8007060 <disk_ioctl+0x32c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8006f7a:	e076      	b.n	800706a <disk_ioctl+0x336>

	case MMC_GET_CSD :	/* Receive CSD as a data block (16 bytes) */
		if ((send_cmd(CMD9, 0) == 0)	/* READ_CSD */
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	2009      	movs	r0, #9
 8006f80:	f7ff fc92 	bl	80068a8 <send_cmd>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d164      	bne.n	8007054 <disk_ioctl+0x320>
			&& rcvr_datablock(buff, 16))
 8006f8a:	2110      	movs	r1, #16
 8006f8c:	6838      	ldr	r0, [r7, #0]
 8006f8e:	f7ff fc09 	bl	80067a4 <rcvr_datablock>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d05d      	beq.n	8007054 <disk_ioctl+0x320>
			res = RES_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8006f9e:	e059      	b.n	8007054 <disk_ioctl+0x320>

	case MMC_GET_CID :	/* Receive CID as a data block (16 bytes) */
		if ((send_cmd(CMD10, 0) == 0)	/* READ_CID */
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	200a      	movs	r0, #10
 8006fa4:	f7ff fc80 	bl	80068a8 <send_cmd>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d154      	bne.n	8007058 <disk_ioctl+0x324>
			&& rcvr_datablock(buff, 16))
 8006fae:	2110      	movs	r1, #16
 8006fb0:	6838      	ldr	r0, [r7, #0]
 8006fb2:	f7ff fbf7 	bl	80067a4 <rcvr_datablock>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d04d      	beq.n	8007058 <disk_ioctl+0x324>
			res = RES_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 8006fc2:	e049      	b.n	8007058 <disk_ioctl+0x324>

	case MMC_GET_OCR :	/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	203a      	movs	r0, #58	; 0x3a
 8006fc8:	f7ff fc6e 	bl	80068a8 <send_cmd>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d148      	bne.n	8007064 <disk_ioctl+0x330>
			for (n = 0; n < 4; n++) {
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fd8:	e00f      	b.n	8006ffa <disk_ioctl+0x2c6>
				*((BYTE*)buff+n) = xchg_spi(0xFF);
 8006fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	18d4      	adds	r4, r2, r3
 8006fe2:	20ff      	movs	r0, #255	; 0xff
 8006fe4:	f7ff fb52 	bl	800668c <xchg_spi>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	7023      	strb	r3, [r4, #0]
		    /* Service the watchdog */
		    CopService();
 8006fec:	f002 fd93 	bl	8009b16 <CopService>
			for (n = 0; n < 4; n++) {
 8006ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d9eb      	bls.n	8006fda <disk_ioctl+0x2a6>
			}
			res = RES_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		break;
 8007008:	e02c      	b.n	8007064 <disk_ioctl+0x330>

	case MMC_GET_SDSTAT :	/* Receive SD status as a data block (64 bytes) */
		if ((CardType & CT_SD2) && send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 800700a:	4b15      	ldr	r3, [pc, #84]	; (8007060 <disk_ioctl+0x32c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d028      	beq.n	8007068 <disk_ioctl+0x334>
 8007016:	2100      	movs	r1, #0
 8007018:	208d      	movs	r0, #141	; 0x8d
 800701a:	f7ff fc45 	bl	80068a8 <send_cmd>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d121      	bne.n	8007068 <disk_ioctl+0x334>
			xchg_spi(0xFF);
 8007024:	20ff      	movs	r0, #255	; 0xff
 8007026:	f7ff fb31 	bl	800668c <xchg_spi>
			if (rcvr_datablock(buff, 64))
 800702a:	2140      	movs	r1, #64	; 0x40
 800702c:	6838      	ldr	r0, [r7, #0]
 800702e:	f7ff fbb9 	bl	80067a4 <rcvr_datablock>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d017      	beq.n	8007068 <disk_ioctl+0x334>
				res = RES_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		break;
 800703e:	e013      	b.n	8007068 <disk_ioctl+0x334>

	default:
		res = RES_PARERR;
 8007040:	2304      	movs	r3, #4
 8007042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007046:	e010      	b.n	800706a <disk_ioctl+0x336>
		break;
 8007048:	bf00      	nop
 800704a:	e00e      	b.n	800706a <disk_ioctl+0x336>
		break;
 800704c:	bf00      	nop
 800704e:	e00c      	b.n	800706a <disk_ioctl+0x336>
		break;
 8007050:	bf00      	nop
 8007052:	e00a      	b.n	800706a <disk_ioctl+0x336>
		break;
 8007054:	bf00      	nop
 8007056:	e008      	b.n	800706a <disk_ioctl+0x336>
		break;
 8007058:	bf00      	nop
 800705a:	e006      	b.n	800706a <disk_ioctl+0x336>
 800705c:	20000009 	.word	0x20000009
 8007060:	20000808 	.word	0x20000808
		break;
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <disk_ioctl+0x336>
		break;
 8007068:	bf00      	nop
	}

	deselect_card();
 800706a:	f7ff fb75 	bl	8006758 <deselect_card>

	return res;
 800706e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007072:	4618      	mov	r0, r3
 8007074:	372c      	adds	r7, #44	; 0x2c
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}
 800707a:	bf00      	nop

0800707c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	e025      	b.n	80070e0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	79fa      	ldrb	r2, [r7, #7]
 80070d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f007 faf5 	bl	800e6c4 <USBD_LL_Init>
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <USBD_DeInit+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6852      	ldr	r2, [r2, #4]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	4611      	mov	r1, r2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <USBD_DeInit+0x40>
  {
    pdev->pConfDesc = NULL;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver  */
  ret = USBD_LL_Stop(pdev);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f007 fb81 	bl	800e830 <USBD_LL_Stop>
 800712e:	4603      	mov	r3, r0
 8007130:	73fb      	strb	r3, [r7, #15]

  if (ret != USBD_OK)
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <USBD_DeInit+0x54>
  {
    return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	e005      	b.n	8007148 <USBD_DeInit+0x60>
  }

  /* Initialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f007 fb13 	bl	800e768 <USBD_LL_DeInit>
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]

  return ret;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	e010      	b.n	800718a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	f107 020e 	add.w	r2, r7, #14
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	4602      	mov	r2, r0
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f007 fb16 	bl	800e7cc <USBD_LL_Start>
 80071a0:	4603      	mov	r3, r0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	78fa      	ldrb	r2, [r7, #3]
 80071e4:	4611      	mov	r1, r2
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4611      	mov	r1, r2
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
  }

  return USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 ff65 	bl	800810a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2b02      	cmp	r3, #2
 8007262:	d01a      	beq.n	800729a <USBD_LL_SetupStage+0x72>
 8007264:	2b02      	cmp	r3, #2
 8007266:	d822      	bhi.n	80072ae <USBD_LL_SetupStage+0x86>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <USBD_LL_SetupStage+0x4a>
 800726c:	2b01      	cmp	r3, #1
 800726e:	d00a      	beq.n	8007286 <USBD_LL_SetupStage+0x5e>
 8007270:	e01d      	b.n	80072ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa18 	bl	80076b0 <USBD_StdDevReq>
 8007280:	4603      	mov	r3, r0
 8007282:	73fb      	strb	r3, [r7, #15]
      break;
 8007284:	e020      	b.n	80072c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa7c 	bl	800778c <USBD_StdItfReq>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]
      break;
 8007298:	e016      	b.n	80072c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 faba 	bl	800781c <USBD_StdEPReq>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]
      break;
 80072ac:	e00c      	b.n	80072c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f007 fb5d 	bl	800e97c <USBD_LL_StallEP>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
      break;
 80072c6:	bf00      	nop
  }

  return ret;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	460b      	mov	r3, r1
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d137      	bne.n	8007356 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d14a      	bne.n	800738e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	429a      	cmp	r2, r3
 8007302:	d913      	bls.n	800732c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	1ad2      	subs	r2, r2, r3
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	4293      	cmp	r3, r2
 800731c:	bf28      	it	cs
 800731e:	4613      	movcs	r3, r2
 8007320:	461a      	mov	r2, r3
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 ffc7 	bl	80082b8 <USBD_CtlContinueRx>
 800732a:	e030      	b.n	800738e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800733e:	2b03      	cmp	r3, #3
 8007340:	d105      	bne.n	800734e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 ffc3 	bl	80082da <USBD_CtlSendStatus>
 8007354:	e01b      	b.n	800738e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d013      	beq.n	800738a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007368:	2b03      	cmp	r3, #3
 800736a:	d10e      	bne.n	800738a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	7afa      	ldrb	r2, [r7, #11]
 8007376:	4611      	mov	r1, r2
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	4798      	blx	r3
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	e002      	b.n	8007390 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	e000      	b.n	8007390 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	460b      	mov	r3, r1
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d16a      	bne.n	8007482 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3314      	adds	r3, #20
 80073b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d155      	bne.n	8007468 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d914      	bls.n	80073f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	461a      	mov	r2, r3
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 ff59 	bl	8008296 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073e4:	2300      	movs	r3, #0
 80073e6:	2200      	movs	r2, #0
 80073e8:	2100      	movs	r1, #0
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f007 fbcc 	bl	800eb88 <USBD_LL_PrepareReceive>
 80073f0:	e03a      	b.n	8007468 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d11c      	bne.n	8007438 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007406:	429a      	cmp	r2, r3
 8007408:	d316      	bcc.n	8007438 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007414:	429a      	cmp	r2, r3
 8007416:	d20f      	bcs.n	8007438 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007418:	2200      	movs	r2, #0
 800741a:	2100      	movs	r1, #0
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 ff3a 	bl	8008296 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800742a:	2300      	movs	r3, #0
 800742c:	2200      	movs	r2, #0
 800742e:	2100      	movs	r1, #0
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f007 fba9 	bl	800eb88 <USBD_LL_PrepareReceive>
 8007436:	e017      	b.n	8007468 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800744a:	2b03      	cmp	r3, #3
 800744c:	d105      	bne.n	800745a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f007 fa8d 	bl	800e97c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 ff4c 	bl	8008300 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800746e:	2b01      	cmp	r3, #1
 8007470:	d123      	bne.n	80074ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff fe99 	bl	80071aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007480:	e01b      	b.n	80074ba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d013      	beq.n	80074b6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007494:	2b03      	cmp	r3, #3
 8007496:	d10e      	bne.n	80074b6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	7afa      	ldrb	r2, [r7, #11]
 80074a2:	4611      	mov	r1, r2
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	4798      	blx	r3
 80074a8:	4603      	mov	r3, r0
 80074aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	e002      	b.n	80074bc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e000      	b.n	80074bc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d009      	beq.n	8007508 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6852      	ldr	r2, [r2, #4]
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	4611      	mov	r1, r2
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f007 f9c0 	bl	800e894 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2240      	movs	r2, #64	; 0x40
 8007520:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	2200      	movs	r2, #0
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f007 f9b2 	bl	800e894 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2240      	movs	r2, #64	; 0x40
 800753a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2204      	movs	r2, #4
 800757e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d105      	bne.n	80075ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d10b      	bne.n	80075e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d009      	beq.n	8007668 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6852      	ldr	r2, [r2, #4]
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	4611      	mov	r1, r2
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	4798      	blx	r3
  }

  return USBD_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007672:	b480      	push	{r7}
 8007674:	b087      	sub	sp, #28
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	3301      	adds	r3, #1
 8007688:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007690:	8a3b      	ldrh	r3, [r7, #16]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	b21a      	sxth	r2, r3
 8007696:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800769a:	4313      	orrs	r3, r2
 800769c:	b21b      	sxth	r3, r3
 800769e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076a0:	89fb      	ldrh	r3, [r7, #14]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
	...

080076b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d005      	beq.n	80076d6 <USBD_StdDevReq+0x26>
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d853      	bhi.n	8007776 <USBD_StdDevReq+0xc6>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <USBD_StdDevReq+0x3a>
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d14f      	bne.n	8007776 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]
    break;
 80076e8:	e04a      	b.n	8007780 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d83b      	bhi.n	800776a <USBD_StdDevReq+0xba>
 80076f2:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <USBD_StdDevReq+0x48>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	0800774d 	.word	0x0800774d
 80076fc:	08007761 	.word	0x08007761
 8007700:	0800776b 	.word	0x0800776b
 8007704:	08007757 	.word	0x08007757
 8007708:	0800776b 	.word	0x0800776b
 800770c:	0800772b 	.word	0x0800772b
 8007710:	08007721 	.word	0x08007721
 8007714:	0800776b 	.word	0x0800776b
 8007718:	08007743 	.word	0x08007743
 800771c:	08007735 	.word	0x08007735
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9d8 	bl	8007ad8 <USBD_GetDescriptor>
      break;
 8007728:	e024      	b.n	8007774 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fb67 	bl	8007e00 <USBD_SetAddress>
      break;
 8007732:	e01f      	b.n	8007774 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fba6 	bl	8007e88 <USBD_SetConfig>
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]
      break;
 8007740:	e018      	b.n	8007774 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc43 	bl	8007fd0 <USBD_GetConfig>
      break;
 800774a:	e013      	b.n	8007774 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fc73 	bl	800803a <USBD_GetStatus>
      break;
 8007754:	e00e      	b.n	8007774 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fca1 	bl	80080a0 <USBD_SetFeature>
      break;
 800775e:	e009      	b.n	8007774 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fcb0 	bl	80080c8 <USBD_ClrFeature>
      break;
 8007768:	e004      	b.n	8007774 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fd06 	bl	800817e <USBD_CtlError>
      break;
 8007772:	bf00      	nop
    }
    break;
 8007774:	e004      	b.n	8007780 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fd00 	bl	800817e <USBD_CtlError>
    break;
 800777e:	bf00      	nop
  }

  return ret;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop

0800778c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077a2:	2b40      	cmp	r3, #64	; 0x40
 80077a4:	d005      	beq.n	80077b2 <USBD_StdItfReq+0x26>
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d82e      	bhi.n	8007808 <USBD_StdItfReq+0x7c>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <USBD_StdItfReq+0x26>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d12a      	bne.n	8007808 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	3b01      	subs	r3, #1
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d81d      	bhi.n	80077fa <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	889b      	ldrh	r3, [r3, #4]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d813      	bhi.n	80077f0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d110      	bne.n	8007804 <USBD_StdItfReq+0x78>
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10d      	bne.n	8007804 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fd76 	bl	80082da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077ee:	e009      	b.n	8007804 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fcc3 	bl	800817e <USBD_CtlError>
      break;
 80077f8:	e004      	b.n	8007804 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fcbe 	bl	800817e <USBD_CtlError>
      break;
 8007802:	e000      	b.n	8007806 <USBD_StdItfReq+0x7a>
      break;
 8007804:	bf00      	nop
    }
    break;
 8007806:	e004      	b.n	8007812 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fcb7 	bl	800817e <USBD_CtlError>
    break;
 8007810:	bf00      	nop
  }

  return ret;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	889b      	ldrh	r3, [r3, #4]
 800782e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007838:	2b40      	cmp	r3, #64	; 0x40
 800783a:	d007      	beq.n	800784c <USBD_StdEPReq+0x30>
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	f200 8140 	bhi.w	8007ac2 <USBD_StdEPReq+0x2a6>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00c      	beq.n	8007860 <USBD_StdEPReq+0x44>
 8007846:	2b20      	cmp	r3, #32
 8007848:	f040 813b 	bne.w	8007ac2 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
 800785a:	4603      	mov	r3, r0
 800785c:	73fb      	strb	r3, [r7, #15]
    break;
 800785e:	e135      	b.n	8007acc <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d007      	beq.n	8007878 <USBD_StdEPReq+0x5c>
 8007868:	2b03      	cmp	r3, #3
 800786a:	f300 8124 	bgt.w	8007ab6 <USBD_StdEPReq+0x29a>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d07b      	beq.n	800796a <USBD_StdEPReq+0x14e>
 8007872:	2b01      	cmp	r3, #1
 8007874:	d03b      	beq.n	80078ee <USBD_StdEPReq+0xd2>
 8007876:	e11e      	b.n	8007ab6 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787e:	2b02      	cmp	r3, #2
 8007880:	d002      	beq.n	8007888 <USBD_StdEPReq+0x6c>
 8007882:	2b03      	cmp	r3, #3
 8007884:	d016      	beq.n	80078b4 <USBD_StdEPReq+0x98>
 8007886:	e02c      	b.n	80078e2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <USBD_StdEPReq+0x8e>
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b80      	cmp	r3, #128	; 0x80
 8007892:	d00a      	beq.n	80078aa <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f007 f86f 	bl	800e97c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800789e:	2180      	movs	r1, #128	; 0x80
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f007 f86b 	bl	800e97c <USBD_LL_StallEP>
 80078a6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078a8:	e020      	b.n	80078ec <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fc66 	bl	800817e <USBD_CtlError>
        break;
 80078b2:	e01b      	b.n	80078ec <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	885b      	ldrh	r3, [r3, #2]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10e      	bne.n	80078da <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <USBD_StdEPReq+0xbe>
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	d008      	beq.n	80078da <USBD_StdEPReq+0xbe>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	88db      	ldrh	r3, [r3, #6]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f007 f851 	bl	800e97c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fcfd 	bl	80082da <USBD_CtlSendStatus>

        break;
 80078e0:	e004      	b.n	80078ec <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fc4a 	bl	800817e <USBD_CtlError>
        break;
 80078ea:	bf00      	nop
      }
      break;
 80078ec:	e0e8      	b.n	8007ac0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d002      	beq.n	80078fe <USBD_StdEPReq+0xe2>
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d016      	beq.n	800792a <USBD_StdEPReq+0x10e>
 80078fc:	e02e      	b.n	800795c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00d      	beq.n	8007920 <USBD_StdEPReq+0x104>
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b80      	cmp	r3, #128	; 0x80
 8007908:	d00a      	beq.n	8007920 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f007 f834 	bl	800e97c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f007 f830 	bl	800e97c <USBD_LL_StallEP>
 800791c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800791e:	e023      	b.n	8007968 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc2b 	bl	800817e <USBD_CtlError>
        break;
 8007928:	e01e      	b.n	8007968 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d119      	bne.n	8007966 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f007 f851 	bl	800e9e8 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fcc7 	bl	80082da <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
        }
        break;
 800795a:	e004      	b.n	8007966 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fc0d 	bl	800817e <USBD_CtlError>
        break;
 8007964:	e000      	b.n	8007968 <USBD_StdEPReq+0x14c>
        break;
 8007966:	bf00      	nop
      }
      break;
 8007968:	e0aa      	b.n	8007ac0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	2b02      	cmp	r3, #2
 8007972:	d002      	beq.n	800797a <USBD_StdEPReq+0x15e>
 8007974:	2b03      	cmp	r3, #3
 8007976:	d032      	beq.n	80079de <USBD_StdEPReq+0x1c2>
 8007978:	e097      	b.n	8007aaa <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <USBD_StdEPReq+0x174>
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fbf8 	bl	800817e <USBD_CtlError>
          break;
 800798e:	e091      	b.n	8007ab4 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007994:	2b00      	cmp	r3, #0
 8007996:	da0b      	bge.n	80079b0 <USBD_StdEPReq+0x194>
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	3310      	adds	r3, #16
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	4413      	add	r3, r2
 80079ac:	3304      	adds	r3, #4
 80079ae:	e00b      	b.n	80079c8 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	3304      	adds	r3, #4
 80079c8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2202      	movs	r2, #2
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fc42 	bl	8008260 <USBD_CtlSendData>
        break;
 80079dc:	e06a      	b.n	8007ab4 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da11      	bge.n	8007a0a <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3324      	adds	r3, #36	; 0x24
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d117      	bne.n	8007a30 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fbbb 	bl	800817e <USBD_CtlError>
            break;
 8007a08:	e054      	b.n	8007ab4 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f003 020f 	and.w	r2, r3, #15
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fba8 	bl	800817e <USBD_CtlError>
            break;
 8007a2e:	e041      	b.n	8007ab4 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da0b      	bge.n	8007a50 <USBD_StdEPReq+0x234>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	3310      	adds	r3, #16
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	e00b      	b.n	8007a68 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <USBD_StdEPReq+0x25a>
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d103      	bne.n	8007a7e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e00e      	b.n	8007a9c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f006 ffe6 	bl	800ea54 <USBD_LL_IsStallEP>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e002      	b.n	8007a9c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fbdc 	bl	8008260 <USBD_CtlSendData>
          break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb66 	bl	800817e <USBD_CtlError>
        break;
 8007ab2:	bf00      	nop
      }
      break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb60 	bl	800817e <USBD_CtlError>
      break;
 8007abe:	bf00      	nop
    }
    break;
 8007ac0:	e004      	b.n	8007acc <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb5a 	bl	800817e <USBD_CtlError>
    break;
 8007aca:	bf00      	nop
  }

  return ret;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	2b0e      	cmp	r3, #14
 8007afa:	f200 8152 	bhi.w	8007da2 <USBD_GetDescriptor+0x2ca>
 8007afe:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <USBD_GetDescriptor+0x2c>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b75 	.word	0x08007b75
 8007b08:	08007b8d 	.word	0x08007b8d
 8007b0c:	08007bcd 	.word	0x08007bcd
 8007b10:	08007da3 	.word	0x08007da3
 8007b14:	08007da3 	.word	0x08007da3
 8007b18:	08007d43 	.word	0x08007d43
 8007b1c:	08007d6f 	.word	0x08007d6f
 8007b20:	08007da3 	.word	0x08007da3
 8007b24:	08007da3 	.word	0x08007da3
 8007b28:	08007da3 	.word	0x08007da3
 8007b2c:	08007da3 	.word	0x08007da3
 8007b30:	08007da3 	.word	0x08007da3
 8007b34:	08007da3 	.word	0x08007da3
 8007b38:	08007da3 	.word	0x08007da3
 8007b3c:	08007b41 	.word	0x08007b41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b62:	e126      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fb09 	bl	800817e <USBD_CtlError>
      err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
    break;
 8007b72:	e11e      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 0108 	add.w	r1, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
    break;
 8007b8a:	e112      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7c1b      	ldrb	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10d      	bne.n	8007bb0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	f107 0208 	add.w	r2, r7, #8
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bae:	e100      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	f107 0208 	add.w	r2, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
    break;
 8007bca:	e0f2      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	885b      	ldrh	r3, [r3, #2]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	f200 80ac 	bhi.w	8007d30 <USBD_GetDescriptor+0x258>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <USBD_GetDescriptor+0x108>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007bf9 	.word	0x08007bf9
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c61 	.word	0x08007c61
 8007bec:	08007c95 	.word	0x08007c95
 8007bf0:	08007cc9 	.word	0x08007cc9
 8007bf4:	08007cfd 	.word	0x08007cfd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c1a:	e091      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 faad 	bl	800817e <USBD_CtlError>
        err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
      break;
 8007c2a:	e089      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c4e:	e077      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa93 	bl	800817e <USBD_CtlError>
        err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c5e:	e06f      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c82:	e05d      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa79 	bl	800817e <USBD_CtlError>
        err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
      break;
 8007c92:	e055      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb6:	e043      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa5f 	bl	800817e <USBD_CtlError>
        err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc6:	e03b      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cea:	e029      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa45 	bl	800817e <USBD_CtlError>
        err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cfa:	e021      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d1e:	e00f      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa2b 	bl	800817e <USBD_CtlError>
        err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d2e:	e007      	b.n	8007d40 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa23 	bl	800817e <USBD_CtlError>
      err++;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d3e:	bf00      	nop
    }
    break;
 8007d40:	e037      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	7c1b      	ldrb	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	f107 0208 	add.w	r2, r7, #8
 8007d56:	4610      	mov	r0, r2
 8007d58:	4798      	blx	r3
 8007d5a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d5c:	e029      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa0c 	bl	800817e <USBD_CtlError>
      err++;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	72fb      	strb	r3, [r7, #11]
    break;
 8007d6c:	e021      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7c1b      	ldrb	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10d      	bne.n	8007d92 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7e:	f107 0208 	add.w	r2, r7, #8
 8007d82:	4610      	mov	r0, r2
 8007d84:	4798      	blx	r3
 8007d86:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	2207      	movs	r2, #7
 8007d8e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d90:	e00f      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f9f2 	bl	800817e <USBD_CtlError>
      err++;
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	72fb      	strb	r3, [r7, #11]
    break;
 8007da0:	e007      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f9ea 	bl	800817e <USBD_CtlError>
    err++;
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	3301      	adds	r3, #1
 8007dae:	72fb      	strb	r3, [r7, #11]
    break;
 8007db0:	bf00      	nop
  }

  if (err != 0U)
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11e      	bne.n	8007df6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	88db      	ldrh	r3, [r3, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d016      	beq.n	8007dee <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007dc0:	893b      	ldrh	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88da      	ldrh	r2, [r3, #6]
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bf28      	it	cs
 8007dd0:	4613      	movcs	r3, r2
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dd6:	893b      	ldrh	r3, [r7, #8]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fa3f 	bl	8008260 <USBD_CtlSendData>
 8007de2:	e009      	b.n	8007df8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9c9 	bl	800817e <USBD_CtlError>
 8007dec:	e004      	b.n	8007df8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa73 	bl	80082da <USBD_CtlSendStatus>
 8007df4:	e000      	b.n	8007df8 <USBD_GetDescriptor+0x320>
    return;
 8007df6:	bf00      	nop
    }
  }
}
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop

08007e00 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	889b      	ldrh	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d130      	bne.n	8007e74 <USBD_SetAddress+0x74>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d12c      	bne.n	8007e74 <USBD_SetAddress+0x74>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e20:	d828      	bhi.n	8007e74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	885b      	ldrh	r3, [r3, #2]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d104      	bne.n	8007e42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f99f 	bl	800817e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e40:	e01d      	b.n	8007e7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7bfa      	ldrb	r2, [r7, #15]
 8007e46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f006 fe2c 	bl	800eaac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fa40 	bl	80082da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d004      	beq.n	8007e6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	e009      	b.n	8007e7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e72:	e004      	b.n	8007e7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f981 	bl	800817e <USBD_CtlError>
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	885b      	ldrh	r3, [r3, #2]
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <USBD_SetConfig+0x144>)
 8007e9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ea0:	4b4a      	ldr	r3, [pc, #296]	; (8007fcc <USBD_SetConfig+0x144>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d905      	bls.n	8007eb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f967 	bl	800817e <USBD_CtlError>
    return USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e087      	b.n	8007fc4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d002      	beq.n	8007ec4 <USBD_SetConfig+0x3c>
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d025      	beq.n	8007f0e <USBD_SetConfig+0x86>
 8007ec2:	e071      	b.n	8007fa8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007ec4:	4b41      	ldr	r3, [pc, #260]	; (8007fcc <USBD_SetConfig+0x144>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01c      	beq.n	8007f06 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007ecc:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <USBD_SetConfig+0x144>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ed6:	4b3d      	ldr	r3, [pc, #244]	; (8007fcc <USBD_SetConfig+0x144>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff f96f 	bl	80071c0 <USBD_SetClassConfig>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d004      	beq.n	8007ef6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f945 	bl	800817e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ef4:	e065      	b.n	8007fc2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f9ef 	bl	80082da <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2203      	movs	r2, #3
 8007f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f04:	e05d      	b.n	8007fc2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f9e7 	bl	80082da <USBD_CtlSendStatus>
    break;
 8007f0c:	e059      	b.n	8007fc2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f0e:	4b2f      	ldr	r3, [pc, #188]	; (8007fcc <USBD_SetConfig+0x144>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d112      	bne.n	8007f3c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f1e:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <USBD_SetConfig+0x144>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f28:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <USBD_SetConfig+0x144>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff f962 	bl	80071f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f9d0 	bl	80082da <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f3a:	e042      	b.n	8007fc2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f3c:	4b23      	ldr	r3, [pc, #140]	; (8007fcc <USBD_SetConfig+0x144>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	461a      	mov	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d02a      	beq.n	8007fa0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff f950 	bl	80071f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f58:	4b1c      	ldr	r3, [pc, #112]	; (8007fcc <USBD_SetConfig+0x144>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f62:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <USBD_SetConfig+0x144>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff f929 	bl	80071c0 <USBD_SetClassConfig>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00f      	beq.n	8007f98 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8ff 	bl	800817e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff f935 	bl	80071f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f96:	e014      	b.n	8007fc2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f99e 	bl	80082da <USBD_CtlSendStatus>
    break;
 8007f9e:	e010      	b.n	8007fc2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f99a 	bl	80082da <USBD_CtlSendStatus>
    break;
 8007fa6:	e00c      	b.n	8007fc2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f8e7 	bl	800817e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <USBD_SetConfig+0x144>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff f91e 	bl	80071f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	bf00      	nop
  }

  return ret;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	2000080c 	.word	0x2000080c

08007fd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d004      	beq.n	8007fec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f8ca 	bl	800817e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007fea:	e022      	b.n	8008032 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	dc02      	bgt.n	8007ffc <USBD_GetConfig+0x2c>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dc03      	bgt.n	8008002 <USBD_GetConfig+0x32>
 8007ffa:	e015      	b.n	8008028 <USBD_GetConfig+0x58>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d00b      	beq.n	8008018 <USBD_GetConfig+0x48>
 8008000:	e012      	b.n	8008028 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3308      	adds	r3, #8
 800800c:	2201      	movs	r2, #1
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f925 	bl	8008260 <USBD_CtlSendData>
      break;
 8008016:	e00c      	b.n	8008032 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	2201      	movs	r2, #1
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f91d 	bl	8008260 <USBD_CtlSendData>
      break;
 8008026:	e004      	b.n	8008032 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f8a7 	bl	800817e <USBD_CtlError>
      break;
 8008030:	bf00      	nop
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804a:	3b01      	subs	r3, #1
 800804c:	2b02      	cmp	r3, #2
 800804e:	d81e      	bhi.n	800808e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	88db      	ldrh	r3, [r3, #6]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d004      	beq.n	8008062 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f88f 	bl	800817e <USBD_CtlError>
      break;
 8008060:	e01a      	b.n	8008098 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f043 0202 	orr.w	r2, r3, #2
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	330c      	adds	r3, #12
 8008082:	2202      	movs	r2, #2
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8ea 	bl	8008260 <USBD_CtlSendData>
    break;
 800808c:	e004      	b.n	8008098 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f874 	bl	800817e <USBD_CtlError>
    break;
 8008096:	bf00      	nop
  }
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d106      	bne.n	80080c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f90d 	bl	80082da <USBD_CtlSendStatus>
  }
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d8:	3b01      	subs	r3, #1
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d80b      	bhi.n	80080f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10c      	bne.n	8008100 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8f3 	bl	80082da <USBD_CtlSendStatus>
      }
      break;
 80080f4:	e004      	b.n	8008100 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f840 	bl	800817e <USBD_CtlError>
      break;
 80080fe:	e000      	b.n	8008102 <USBD_ClrFeature+0x3a>
      break;
 8008100:	bf00      	nop
  }
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	781a      	ldrb	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff fa9c 	bl	8007672 <SWAPBYTE>
 800813a:	4603      	mov	r3, r0
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fa8f 	bl	8007672 <SWAPBYTE>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fa82 	bl	8007672 <SWAPBYTE>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	80da      	strh	r2, [r3, #6]
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008188:	2180      	movs	r1, #128	; 0x80
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f006 fbf6 	bl	800e97c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008190:	2100      	movs	r1, #0
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f006 fbf2 	bl	800e97c <USBD_LL_StallEP>
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d036      	beq.n	8008224 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 f836 	bl	800822c <USBD_GetLen>
 80081c0:	4603      	mov	r3, r0
 80081c2:	3301      	adds	r3, #1
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	4413      	add	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	3301      	adds	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4413      	add	r3, r2
 80081e6:	2203      	movs	r2, #3
 80081e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	3301      	adds	r3, #1
 80081ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081f0:	e013      	b.n	800821a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	4413      	add	r3, r2
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	3301      	adds	r3, #1
 8008202:	613b      	str	r3, [r7, #16]
    idx++;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	3301      	adds	r3, #1
 8008208:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	4413      	add	r3, r2
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
    idx++;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	3301      	adds	r3, #1
 8008218:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e7      	bne.n	80081f2 <USBD_GetString+0x52>
 8008222:	e000      	b.n	8008226 <USBD_GetString+0x86>
    return;
 8008224:	bf00      	nop
  }
}
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800823c:	e005      	b.n	800824a <USBD_GetLen+0x1e>
  {
    len++;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	3301      	adds	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	3301      	adds	r3, #1
 8008248:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1f5      	bne.n	800823e <USBD_GetLen+0x12>
  }

  return len;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2202      	movs	r2, #2
 8008270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	2100      	movs	r1, #0
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f006 fc46 	bl	800eb18 <USBD_LL_Transmit>

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	2100      	movs	r1, #0
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f006 fc35 	bl	800eb18 <USBD_LL_Transmit>

  return USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	2100      	movs	r1, #0
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f006 fc5c 	bl	800eb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2204      	movs	r2, #4
 80082e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082ea:	2300      	movs	r3, #0
 80082ec:	2200      	movs	r2, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f006 fc11 	bl	800eb18 <USBD_LL_Transmit>

  return USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2205      	movs	r2, #5
 800830c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008310:	2300      	movs	r3, #0
 8008312:	2200      	movs	r2, #0
 8008314:	2100      	movs	r1, #0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f006 fc36 	bl	800eb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 8008326:	b480      	push	{r7}
 8008328:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 800832a:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 800832c:	bf00      	nop
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8008336:	b480      	push	{r7}
 8008338:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 800833a:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 800833c:	bf00      	nop
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <CanGetSpeedConfig>:
**            otherwise.
**
****************************************************************************************/
static blt_bool CanGetSpeedConfig(blt_int16u baud, blt_int16u *prescaler,
                                  blt_int8u *tseg1, blt_int8u *tseg2)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	4603      	mov	r3, r0
 8008356:	81fb      	strh	r3, [r7, #14]
  blt_int8u  cnt;
  blt_int32u canClockFreqkHz;
  LL_RCC_ClocksTypeDef rccClocks;

  /* read clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rccClocks);
 8008358:	f107 0310 	add.w	r3, r7, #16
 800835c:	4618      	mov	r0, r3
 800835e:	f7fc f819 	bl	8004394 <LL_RCC_GetSystemClocksFreq>
  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	4a31      	ldr	r2, [pc, #196]	; (800842c <CanGetSpeedConfig+0xe4>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	099b      	lsrs	r3, r3, #6
 800836c:	623b      	str	r3, [r7, #32]

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 800836e:	2300      	movs	r3, #0
 8008370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008374:	e050      	b.n	8008418 <CanGetSpeedConfig+0xd0>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 8008376:	89fa      	ldrh	r2, [r7, #14]
 8008378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800837c:	492c      	ldr	r1, [pc, #176]	; (8008430 <CanGetSpeedConfig+0xe8>)
 800837e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8008382:	4618      	mov	r0, r3
 8008384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008388:	4929      	ldr	r1, [pc, #164]	; (8008430 <CanGetSpeedConfig+0xe8>)
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	440b      	add	r3, r1
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	4403      	add	r3, r0
 8008392:	3301      	adds	r3, #1
 8008394:	fb02 f303 	mul.w	r3, r2, r3
 8008398:	461a      	mov	r2, r3
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	fbb3 f1f2 	udiv	r1, r3, r2
 80083a0:	fb01 f202 	mul.w	r2, r1, r2
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d131      	bne.n	800840e <CanGetSpeedConfig+0xc6>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 80083aa:	89fa      	ldrh	r2, [r7, #14]
 80083ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b0:	491f      	ldr	r1, [pc, #124]	; (8008430 <CanGetSpeedConfig+0xe8>)
 80083b2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083bc:	491c      	ldr	r1, [pc, #112]	; (8008430 <CanGetSpeedConfig+0xe8>)
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	440b      	add	r3, r1
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	4403      	add	r3, r0
 80083c6:	3301      	adds	r3, #1
 80083c8:	fb02 f303 	mul.w	r3, r2, r3
 80083cc:	461a      	mov	r2, r3
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	801a      	strh	r2, [r3, #0]

      /* make sure the prescaler is valid */
      if ((*prescaler > 0) && (*prescaler <= 1024))
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d015      	beq.n	800840e <CanGetSpeedConfig+0xc6>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ea:	d810      	bhi.n	800840e <CanGetSpeedConfig+0xc6>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 80083ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f0:	4a0f      	ldr	r2, [pc, #60]	; (8008430 <CanGetSpeedConfig+0xe8>)
 80083f2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	701a      	strb	r2, [r3, #0]
        *tseg2 = canTiming[cnt].tseg2;
 80083fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083fe:	4a0c      	ldr	r2, [pc, #48]	; (8008430 <CanGetSpeedConfig+0xe8>)
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	4413      	add	r3, r2
 8008404:	785a      	ldrb	r2, [r3, #1]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	701a      	strb	r2, [r3, #0]
        /* found a good bus timing configuration */
        return BLT_TRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	e009      	b.n	8008422 <CanGetSpeedConfig+0xda>
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 800840e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008412:	3301      	adds	r3, #1
 8008414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800841c:	2b11      	cmp	r3, #17
 800841e:	d9aa      	bls.n	8008376 <CanGetSpeedConfig+0x2e>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return BLT_FALSE;
 8008420:	2300      	movs	r3, #0
} /*** end of CanGetSpeedConfig ***/
 8008422:	4618      	mov	r0, r3
 8008424:	3728      	adds	r7, #40	; 0x28
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	10624dd3 	.word	0x10624dd3
 8008430:	0800f124 	.word	0x0800f124

08008434 <CanInit>:
** \brief     Initializes the CAN controller and synchronizes it to the CAN bus.
** \return    none.
**
****************************************************************************************/
void CanInit(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	; 0x38
 8008438:	af00      	add	r7, sp, #0
  blt_int16u prescaler = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	857b      	strh	r3, [r7, #42]	; 0x2a
  blt_int8u  tseg1 = 0, tseg2 = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008444:	2300      	movs	r3, #0
 8008446:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  CAN_FilterTypeDef filterConfig;
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 800844a:	f240 6367 	movw	r3, #1639	; 0x667
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the current implementation supports CAN1 and 2. throw an assertion error in case a
   * different CAN channel is configured.
   */
  ASSERT_CT((BOOT_COM_CAN_CHANNEL_INDEX == 0 || BOOT_COM_CAN_CHANNEL_INDEX == 1));
  /* obtain bittiming configuration information. */
  if (CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2) == BLT_FALSE)
 8008450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008454:	f107 0229 	add.w	r2, r7, #41	; 0x29
 8008458:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800845c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008460:	f7ff ff72 	bl	8008348 <CanGetSpeedConfig>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d103      	bne.n	8008472 <CanInit+0x3e>
     * clock configuration. Verify the following settings in blt_conf.h:
     *   - BOOT_COM_CAN_BAUDRATE
     *   - BOOT_CPU_XTAL_SPEED_KHZ
     *   - BOOT_CPU_SYSTEM_SPEED_KHZ
     */
    ASSERT_RT(BLT_FALSE);
 800846a:	21b5      	movs	r1, #181	; 0xb5
 800846c:	4834      	ldr	r0, [pc, #208]	; (8008540 <CanInit+0x10c>)
 800846e:	f001 f9cb 	bl	8009808 <AssertFailure>
  }

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN_CHANNEL;
 8008472:	4b34      	ldr	r3, [pc, #208]	; (8008544 <CanInit+0x110>)
 8008474:	4a34      	ldr	r2, [pc, #208]	; (8008548 <CanInit+0x114>)
 8008476:	601a      	str	r2, [r3, #0]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 8008478:	4b32      	ldr	r3, [pc, #200]	; (8008544 <CanInit+0x110>)
 800847a:	2200      	movs	r2, #0
 800847c:	761a      	strb	r2, [r3, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 800847e:	4b31      	ldr	r3, [pc, #196]	; (8008544 <CanInit+0x110>)
 8008480:	2200      	movs	r2, #0
 8008482:	765a      	strb	r2, [r3, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 8008484:	4b2f      	ldr	r3, [pc, #188]	; (8008544 <CanInit+0x110>)
 8008486:	2200      	movs	r2, #0
 8008488:	769a      	strb	r2, [r3, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 800848a:	4b2e      	ldr	r3, [pc, #184]	; (8008544 <CanInit+0x110>)
 800848c:	2201      	movs	r2, #1
 800848e:	76da      	strb	r2, [r3, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 8008490:	4b2c      	ldr	r3, [pc, #176]	; (8008544 <CanInit+0x110>)
 8008492:	2200      	movs	r2, #0
 8008494:	771a      	strb	r2, [r3, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 8008496:	4b2b      	ldr	r3, [pc, #172]	; (8008544 <CanInit+0x110>)
 8008498:	2200      	movs	r2, #0
 800849a:	775a      	strb	r2, [r3, #29]
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 800849c:	4b29      	ldr	r3, [pc, #164]	; (8008544 <CanInit+0x110>)
 800849e:	2200      	movs	r2, #0
 80084a0:	609a      	str	r2, [r3, #8]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80084a2:	4b28      	ldr	r3, [pc, #160]	; (8008544 <CanInit+0x110>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	60da      	str	r2, [r3, #12]
  canHandle.Init.TimeSeg1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 80084a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80084ac:	3b01      	subs	r3, #1
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	4a24      	ldr	r2, [pc, #144]	; (8008544 <CanInit+0x110>)
 80084b2:	6113      	str	r3, [r2, #16]
  canHandle.Init.TimeSeg2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 80084b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084b8:	3b01      	subs	r3, #1
 80084ba:	051b      	lsls	r3, r3, #20
 80084bc:	4a21      	ldr	r2, [pc, #132]	; (8008544 <CanInit+0x110>)
 80084be:	6153      	str	r3, [r2, #20]
  canHandle.Init.Prescaler = prescaler;
 80084c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80084c2:	461a      	mov	r2, r3
 80084c4:	4b1f      	ldr	r3, [pc, #124]	; (8008544 <CanInit+0x110>)
 80084c6:	605a      	str	r2, [r3, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 80084c8:	481e      	ldr	r0, [pc, #120]	; (8008544 <CanInit+0x110>)
 80084ca:	f7f8 ff55 	bl	8001378 <HAL_CAN_Init>
  /* determine the reception filter mask and id values such that it only leaves one
   * CAN identifier through (BOOT_COM_CAN_RX_MSG_ID).
   */
  if ((rxMsgId & 0x80000000) == 0)
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db05      	blt.n	80084e0 <CanInit+0xac>
  {
    rxFilterId = rxMsgId << CAN_RI0R_STID_Pos;
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	055b      	lsls	r3, r3, #21
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
    rxFilterMask = (CAN_RI0R_STID_Msk) | CAN_RI0R_IDE;
 80084da:	4b1c      	ldr	r3, [pc, #112]	; (800854c <CanInit+0x118>)
 80084dc:	633b      	str	r3, [r7, #48]	; 0x30
 80084de:	e00a      	b.n	80084f6 <CanInit+0xc2>
  }
  else
  {
    /* negate the ID-type bit */
    rxMsgId &= ~0x80000000;
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    rxFilterId = (rxMsgId << CAN_RI0R_EXID_Pos) | CAN_RI0R_IDE;
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	f043 0304 	orr.w	r3, r3, #4
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
 80084f2:	4b17      	ldr	r3, [pc, #92]	; (8008550 <CanInit+0x11c>)
 80084f4:	633b      	str	r3, [r7, #48]	; 0x30
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
#if (BOOT_COM_CAN_CHANNEL_INDEX == 0)
  /* filter 0 is the first filter assigned to the bxCAN master (CAN1) */
  filterConfig.FilterBank = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
#else
  /* filter 14 is the first filter assigned to the bxCAN slave (CAN2) */
  filterConfig.FilterBank = 14;
#endif
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80084fe:	2301      	movs	r3, #1
 8008500:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008504:	0c1b      	lsrs	r3, r3, #16
 8008506:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 8008508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850a:	b29b      	uxth	r3, r3
 800850c:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	0c1b      	lsrs	r3, r3, #16
 8008512:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	b29b      	uxth	r3, r3
 8008518:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800851a:	2300      	movs	r3, #0
 800851c:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800851e:	2301      	movs	r3, #1
 8008520:	623b      	str	r3, [r7, #32]
  /* select the start slave bank number (for CAN1). this configuration assigns filter
   * banks 0..13 to CAN1 and 14..27 to CAN2.
   */
  filterConfig.SlaveStartFilterBank = 14;
 8008522:	230e      	movs	r3, #14
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 8008526:	463b      	mov	r3, r7
 8008528:	4619      	mov	r1, r3
 800852a:	4806      	ldr	r0, [pc, #24]	; (8008544 <CanInit+0x110>)
 800852c:	f7f9 f820 	bl	8001570 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 8008530:	4804      	ldr	r0, [pc, #16]	; (8008544 <CanInit+0x110>)
 8008532:	f7f9 f8fd 	bl	8001730 <HAL_CAN_Start>
} /*** end of CanInit ***/
 8008536:	bf00      	nop
 8008538:	3738      	adds	r7, #56	; 0x38
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	0800eca0 	.word	0x0800eca0
 8008544:	20000810 	.word	0x20000810
 8008548:	40006400 	.word	0x40006400
 800854c:	ffe00004 	.word	0xffe00004
 8008550:	001ffffc 	.word	0x001ffffc

08008554 <CanTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void CanTransmitPacket(blt_int8u *data, blt_int8u len)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08c      	sub	sp, #48	; 0x30
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  blt_int32u txMsgId = BOOT_COM_CAN_TX_MSG_ID;
 8008560:	f240 73e1 	movw	r3, #2017	; 0x7e1
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
  blt_int32u txMsgMailbox;
  blt_int32u timeout;
  HAL_StatusTypeDef txStatus;

  /* configure the message that should be transmitted. */
  if ((txMsgId & 0x80000000) == 0)
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	2b00      	cmp	r3, #0
 800856a:	db04      	blt.n	8008576 <CanTransmitPacket+0x22>
  {
    /* set the 11-bit CAN identifier. */
    txMsgHeader.StdId = txMsgId;
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	60fb      	str	r3, [r7, #12]
    txMsgHeader.IDE = CAN_ID_STD;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e007      	b.n	8008586 <CanTransmitPacket+0x32>
  }
  else
  {
    /* negate the ID-type bit */
    txMsgId &= ~0x80000000;
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* set the 29-bit CAN identifier. */
    txMsgHeader.ExtId = txMsgId;
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	613b      	str	r3, [r7, #16]
    txMsgHeader.IDE = CAN_ID_EXT;
 8008582:	2304      	movs	r3, #4
 8008584:	617b      	str	r3, [r7, #20]
  }
  txMsgHeader.RTR = CAN_RTR_DATA;
 8008586:	2300      	movs	r3, #0
 8008588:	61bb      	str	r3, [r7, #24]
  txMsgHeader.DLC = len;
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	61fb      	str	r3, [r7, #28]

  /* submit the message for transmission. */
  txStatus = HAL_CAN_AddTxMessage(&canHandle, &txMsgHeader, data,
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	f107 010c 	add.w	r1, r7, #12
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	4812      	ldr	r0, [pc, #72]	; (80085e4 <CanTransmitPacket+0x90>)
 800859a:	f7f9 f90d 	bl	80017b8 <HAL_CAN_AddTxMessage>
 800859e:	4603      	mov	r3, r0
 80085a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                  (uint32_t *)&txMsgMailbox);
  if (txStatus == HAL_OK)
 80085a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d117      	bne.n	80085dc <CanTransmitPacket+0x88>
  {
    /* determine timeout time for the transmit completion. */
    timeout = TimerGet() + CAN_MSG_TX_TIMEOUT_MS;
 80085ac:	f000 fdea 	bl	8009184 <TimerGet>
 80085b0:	4603      	mov	r3, r0
 80085b2:	3332      	adds	r3, #50	; 0x32
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* poll for completion of the transmit operation. */
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 80085b6:	e007      	b.n	80085c8 <CanTransmitPacket+0x74>
    {
      /* service the watchdog. */
      CopService();
 80085b8:	f001 faad 	bl	8009b16 <CopService>
      /* break loop upon timeout. this would indicate a hardware failure or no other
       * nodes connected to the bus.
       */
      if (TimerGet() > timeout)
 80085bc:	f000 fde2 	bl	8009184 <TimerGet>
 80085c0:	4602      	mov	r2, r0
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d308      	bcc.n	80085da <CanTransmitPacket+0x86>
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4619      	mov	r1, r3
 80085cc:	4805      	ldr	r0, [pc, #20]	; (80085e4 <CanTransmitPacket+0x90>)
 80085ce:	f7f9 f9ce 	bl	800196e <HAL_CAN_IsTxMessagePending>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1ef      	bne.n	80085b8 <CanTransmitPacket+0x64>
      {
        break;
      }
    }
  }
} /*** end of CanTransmitPacket ***/
 80085d8:	e000      	b.n	80085dc <CanTransmitPacket+0x88>
        break;
 80085da:	bf00      	nop
} /*** end of CanTransmitPacket ***/
 80085dc:	bf00      	nop
 80085de:	3730      	adds	r7, #48	; 0x30
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000810 	.word	0x20000810

080085e8 <CanReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE is a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool CanReceivePacket(blt_int8u *data, blt_int8u *len)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08c      	sub	sp, #48	; 0x30
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 80085f2:	f240 6367 	movw	r3, #1639	; 0x667
 80085f6:	62bb      	str	r3, [r7, #40]	; 0x28
  blt_bool result = BLT_FALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  CAN_RxHeaderTypeDef rxMsgHeader;

  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, data) == HAL_OK)
 80085fe:	f107 020c 	add.w	r2, r7, #12
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2100      	movs	r1, #0
 8008606:	4818      	ldr	r0, [pc, #96]	; (8008668 <CanReceivePacket+0x80>)
 8008608:	f7f9 f9d5 	bl	80019b6 <HAL_CAN_GetRxMessage>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d11b      	bne.n	800864a <CanReceivePacket+0x62>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	2b00      	cmp	r3, #0
 8008616:	db0a      	blt.n	800862e <CanReceivePacket+0x46>
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800861c:	429a      	cmp	r2, r3
 800861e:	d114      	bne.n	800864a <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_STD) )
 8008620:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8008622:	2b00      	cmp	r3, #0
 8008624:	d111      	bne.n	800864a <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800862c:	e00d      	b.n	800864a <CanReceivePacket+0x62>
      }
    }
    else
    {
      /* negate the ID-type bit. */
      rxMsgId &= ~0x80000000;
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
      /* was an 29-bit CAN message received that matches? */
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863a:	429a      	cmp	r2, r3
 800863c:	d105      	bne.n	800864a <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_EXT) )
 800863e:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 8008640:	2b04      	cmp	r3, #4
 8008642:	d102      	bne.n	800864a <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
  /* store the data length. */
  if (result == BLT_TRUE)
 800864a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800864e:	2b01      	cmp	r3, #1
 8008650:	d103      	bne.n	800865a <CanReceivePacket+0x72>
  {
    *len = rxMsgHeader.DLC;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	b2da      	uxtb	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	701a      	strb	r2, [r3, #0]
  }
  /* Give the result back to the caller. */
  return result;
 800865a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
} /*** end of CanReceivePacket ***/
 800865e:	4618      	mov	r0, r3
 8008660:	3730      	adds	r7, #48	; 0x30
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000810 	.word	0x20000810

0800866c <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8008670:	f7ff fe59 	bl	8008326 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8008674:	bf00      	nop
 8008676:	bd80      	pop	{r7, pc}

08008678 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 800867e:	f000 fbcd 	bl	8008e1c <NvmVerifyChecksum>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01e      	beq.n	80086c6 <CpuStartUserProgram+0x4e>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8008688:	f7f7 ffa8 	bl	80005dc <CpuUserProgramStartHook>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d01b      	beq.n	80086ca <CpuStartUserProgram+0x52>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8008692:	f001 f9a3 	bl	80099dc <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8008696:	f7f8 fddb 	bl	8001250 <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 800869a:	f000 fd4b 	bl	8009134 <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 800869e:	f000 fbc4 	bl	8008e2a <NvmGetUserProgBaseAddress>
 80086a2:	4603      	mov	r3, r0
 80086a4:	4a0b      	ldr	r2, [pc, #44]	; (80086d4 <CpuStartUserProgram+0x5c>)
 80086a6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80086aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086ae:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 80086b0:	f000 fbbb 	bl	8008e2a <NvmGetUserProgBaseAddress>
 80086b4:	4603      	mov	r3, r0
 80086b6:	3304      	adds	r3, #4
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 80086bc:	f7ff fe3b 	bl	8008336 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4798      	blx	r3
 80086c4:	e002      	b.n	80086cc <CpuStartUserProgram+0x54>
    return;
 80086c6:	bf00      	nop
 80086c8:	e000      	b.n	80086cc <CpuStartUserProgram+0x54>
    return;
 80086ca:	bf00      	nop
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	e000ed00 	.word	0xe000ed00

080086d8 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80086ee:	e009      	b.n	8008704 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	1c53      	adds	r3, r2, #1
 80086f4:	617b      	str	r3, [r7, #20]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	6139      	str	r1, [r7, #16]
 80086fc:	7812      	ldrb	r2, [r2, #0]
 80086fe:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 8008700:	f001 fa09 	bl	8009b16 <CopService>
  while (len-- > 0)
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	1e5a      	subs	r2, r3, #1
 8008708:	80fa      	strh	r2, [r7, #6]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f0      	bne.n	80086f0 <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <FlashInit+0x20>)
 800871e:	f04f 32ff 	mov.w	r2, #4294967295
 8008722:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <FlashInit+0x24>)
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 800872c:	bf00      	nop
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000838 	.word	0x20000838
 800873c:	20000a3c 	.word	0x20000a3c

08008740 <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	1e5a      	subs	r2, r3, #1
 8008750:	491c      	ldr	r1, [pc, #112]	; (80087c4 <FlashWrite+0x84>)
 8008752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008756:	4419      	add	r1, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	1acb      	subs	r3, r1, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	429a      	cmp	r2, r3
 8008760:	d901      	bls.n	8008766 <FlashWrite+0x26>
  {
    return BLT_FALSE;
 8008762:	2300      	movs	r3, #0
 8008764:	e02a      	b.n	80087bc <FlashWrite+0x7c>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 faf0 	bl	8008d4c <FlashGetSector>
 800876c:	4603      	mov	r3, r0
 800876e:	2bff      	cmp	r3, #255	; 0xff
 8008770:	d009      	beq.n	8008786 <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	4413      	add	r3, r2
 8008778:	3b01      	subs	r3, #1
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fae6 	bl	8008d4c <FlashGetSector>
 8008780:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8008782:	2bff      	cmp	r3, #255	; 0xff
 8008784:	d101      	bne.n	800878a <FlashWrite+0x4a>
  {
    return BLT_FALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	e018      	b.n	80087bc <FlashWrite+0x7c>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8008796:	4a0c      	ldr	r2, [pc, #48]	; (80087c8 <FlashWrite+0x88>)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	4293      	cmp	r3, r2
 800879c:	d107      	bne.n	80087ae <FlashWrite+0x6e>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	68f9      	ldr	r1, [r7, #12]
 80087a4:	4809      	ldr	r0, [pc, #36]	; (80087cc <FlashWrite+0x8c>)
 80087a6:	f000 f967 	bl	8008a78 <FlashAddToBlock>
 80087aa:	4603      	mov	r3, r0
 80087ac:	e006      	b.n	80087bc <FlashWrite+0x7c>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	4806      	ldr	r0, [pc, #24]	; (80087d0 <FlashWrite+0x90>)
 80087b6:	f000 f95f 	bl	8008a78 <FlashAddToBlock>
 80087ba:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	080e0000 	.word	0x080e0000
 80087c8:	08008000 	.word	0x08008000
 80087cc:	20000a3c 	.word	0x20000a3c
 80087d0:	20000838 	.word	0x20000838

080087d4 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	1e5a      	subs	r2, r3, #1
 80087e2:	4916      	ldr	r1, [pc, #88]	; (800883c <FlashErase+0x68>)
 80087e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80087e8:	4419      	add	r1, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	1acb      	subs	r3, r1, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d901      	bls.n	80087f8 <FlashErase+0x24>
  {
    return BLT_FALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	e01c      	b.n	8008832 <FlashErase+0x5e>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 faa7 	bl	8008d4c <FlashGetSector>
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	4413      	add	r3, r2
 8008808:	3b01      	subs	r3, #1
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fa9e 	bl	8008d4c <FlashGetSector>
 8008810:	4603      	mov	r3, r0
 8008812:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2bff      	cmp	r3, #255	; 0xff
 8008818:	d002      	beq.n	8008820 <FlashErase+0x4c>
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2bff      	cmp	r3, #255	; 0xff
 800881e:	d101      	bne.n	8008824 <FlashErase+0x50>
  {
    return BLT_FALSE;
 8008820:	2300      	movs	r3, #0
 8008822:	e006      	b.n	8008832 <FlashErase+0x5e>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 8008824:	7bba      	ldrb	r2, [r7, #14]
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fa30 	bl	8008c90 <FlashEraseSectors>
 8008830:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	080e0000 	.word	0x080e0000

08008840 <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 800884a:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <FlashWriteChecksum+0x84>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008852:	d101      	bne.n	8008858 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8008854:	2301      	movs	r3, #1
 8008856:	e031      	b.n	80088bc <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8008858:	4b1b      	ldr	r3, [pc, #108]	; (80088c8 <FlashWriteChecksum+0x88>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4413      	add	r3, r2
 8008860:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8008862:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <FlashWriteChecksum+0x8c>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4413      	add	r3, r2
 800886a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 800886c:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <FlashWriteChecksum+0x90>)
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4413      	add	r3, r2
 8008874:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8008876:	4b17      	ldr	r3, [pc, #92]	; (80088d4 <FlashWriteChecksum+0x94>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8008880:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <FlashWriteChecksum+0x98>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4413      	add	r3, r2
 8008888:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 800888a:	4b14      	ldr	r3, [pc, #80]	; (80088dc <FlashWriteChecksum+0x9c>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8008894:	4b12      	ldr	r3, [pc, #72]	; (80088e0 <FlashWriteChecksum+0xa0>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4413      	add	r3, r2
 800889c:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	43db      	mvns	r3, r3
 80088a2:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3301      	adds	r3, #1
 80088a8:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 80088aa:	4b0e      	ldr	r3, [pc, #56]	; (80088e4 <FlashWriteChecksum+0xa4>)
 80088ac:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80088b0:	1d3a      	adds	r2, r7, #4
 80088b2:	2104      	movs	r1, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff ff43 	bl	8008740 <FlashWrite>
 80088ba:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000a3c 	.word	0x20000a3c
 80088c8:	20000a40 	.word	0x20000a40
 80088cc:	20000a44 	.word	0x20000a44
 80088d0:	20000a48 	.word	0x20000a48
 80088d4:	20000a4c 	.word	0x20000a4c
 80088d8:	20000a50 	.word	0x20000a50
 80088dc:	20000a54 	.word	0x20000a54
 80088e0:	20000a58 	.word	0x20000a58
 80088e4:	08008000 	.word	0x08008000

080088e8 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80088f2:	4b1e      	ldr	r3, [pc, #120]	; (800896c <FlashVerifyChecksum+0x84>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	4413      	add	r3, r2
 80088fa:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80088fc:	4b1b      	ldr	r3, [pc, #108]	; (800896c <FlashVerifyChecksum+0x84>)
 80088fe:	3304      	adds	r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8008908:	4b18      	ldr	r3, [pc, #96]	; (800896c <FlashVerifyChecksum+0x84>)
 800890a:	3308      	adds	r3, #8
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8008914:	4b15      	ldr	r3, [pc, #84]	; (800896c <FlashVerifyChecksum+0x84>)
 8008916:	330c      	adds	r3, #12
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8008920:	4b12      	ldr	r3, [pc, #72]	; (800896c <FlashVerifyChecksum+0x84>)
 8008922:	3310      	adds	r3, #16
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	4413      	add	r3, r2
 800892a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <FlashVerifyChecksum+0x84>)
 800892e:	3314      	adds	r3, #20
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	4413      	add	r3, r2
 8008936:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8008938:	4b0c      	ldr	r3, [pc, #48]	; (800896c <FlashVerifyChecksum+0x84>)
 800893a:	3318      	adds	r3, #24
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <FlashVerifyChecksum+0x84>)
 8008946:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	4413      	add	r3, r2
 8008950:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 800895c:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	08008000 	.word	0x08008000

08008970 <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8008974:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <FlashDone+0x40>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d007      	beq.n	800898e <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 800897e:	480c      	ldr	r0, [pc, #48]	; (80089b0 <FlashDone+0x40>)
 8008980:	f000 f8dc 	bl	8008b3c <FlashWriteBlock>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <FlashDone+0x1e>
    {
      return BLT_FALSE;
 800898a:	2300      	movs	r3, #0
 800898c:	e00d      	b.n	80089aa <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <FlashDone+0x44>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d007      	beq.n	80089a8 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8008998:	4806      	ldr	r0, [pc, #24]	; (80089b4 <FlashDone+0x44>)
 800899a:	f000 f8cf 	bl	8008b3c <FlashWriteBlock>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <FlashDone+0x38>
    {
      return BLT_FALSE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	e000      	b.n	80089aa <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 80089a8:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 80089aa:	4618      	mov	r0, r3
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000a3c 	.word	0x20000a3c
 80089b4:	20000838 	.word	0x20000838

080089b8 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 80089bc:	4b02      	ldr	r3, [pc, #8]	; (80089c8 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 80089be:	4618      	mov	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	08008000 	.word	0x08008000

080089cc <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e012      	b.n	8008a0a <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d101      	bne.n	80089f2 <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e00b      	b.n	8008a0a <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3304      	adds	r3, #4
 80089fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fe68 	bl	80086d8 <CpuMemCopy>
  return BLT_TRUE;
 8008a08:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a12      	ldr	r2, [pc, #72]	; (8008a6c <FlashSwitchBlock+0x58>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d102      	bne.n	8008a2c <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 8008a26:	4b12      	ldr	r3, [pc, #72]	; (8008a70 <FlashSwitchBlock+0x5c>)
 8008a28:	607b      	str	r3, [r7, #4]
 8008a2a:	e010      	b.n	8008a4e <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 8008a2c:	4a11      	ldr	r2, [pc, #68]	; (8008a74 <FlashSwitchBlock+0x60>)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d104      	bne.n	8008a3e <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <FlashSwitchBlock+0x58>)
 8008a36:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8008a38:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <FlashSwitchBlock+0x60>)
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	e007      	b.n	8008a4e <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f87c 	bl	8008b3c <FlashWriteBlock>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e009      	b.n	8008a62 <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff ffbb 	bl	80089cc <FlashInitBlock>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e000      	b.n	8008a62 <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8008a60:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000a3c 	.word	0x20000a3c
 8008a70:	20000838 	.word	0x20000838
 8008a74:	08008000 	.word	0x08008000

08008a78 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d108      	bne.n	8008aae <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8008a9c:	6979      	ldr	r1, [r7, #20]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7ff ff94 	bl	80089cc <FlashInitBlock>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e042      	b.n	8008b34 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d009      	beq.n	8008acc <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8008ab8:	6979      	ldr	r1, [r7, #20]
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff ffaa 	bl	8008a14 <FlashSwitchBlock>
 8008ac0:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e033      	b.n	8008b34 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3304      	adds	r3, #4
 8008ada:	61fb      	str	r3, [r7, #28]
  src = data;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 8008ae0:	f001 f819 	bl	8009b16 <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af0:	d30f      	bcc.n	8008b12 <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008af8:	4619      	mov	r1, r3
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f7ff ff8a 	bl	8008a14 <FlashSwitchBlock>
 8008b00:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e013      	b.n	8008b34 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3304      	adds	r3, #4
 8008b10:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	61fb      	str	r3, [r7, #28]
    src++;
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	3301      	adds	r3, #1
 8008b24:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1d6      	bne.n	8008ae0 <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 8008b32:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8008b34:	4618      	mov	r0, r3
 8008b36:	3720      	adds	r7, #32
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8008b3c:	b5b0      	push	{r4, r5, r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8008b48:	f7f9 f982 	bl	8001e50 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e029      	b.n	8008ba6 <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	3304      	adds	r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8008b6c:	f000 ffd3 	bl	8009b16 <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2200      	movs	r2, #0
 8008b74:	461c      	mov	r4, r3
 8008b76:	4615      	mov	r5, r2
 8008b78:	4622      	mov	r2, r4
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	68f9      	ldr	r1, [r7, #12]
 8008b7e:	2002      	movs	r0, #2
 8008b80:	f7f9 f912 	bl	8001da8 <HAL_FLASH_Program>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8008b8e:	e00d      	b.n	8008bac <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d002      	beq.n	8008ba0 <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	74fb      	strb	r3, [r7, #19]
      break;
 8008b9e:	e005      	b.n	8008bac <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8008baa:	d9d2      	bls.n	8008b52 <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8008bac:	f7f9 f972 	bl	8001e94 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8008bb0:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008bbc <FlashEmptyCheckSector>:
**            flashLayout array, not an index into the array.
** \return    BLT_TRUE if the flash sector is already erased, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEmptyCheckSector(blt_int8u sector_num)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	71fb      	strb	r3, [r7, #7]
  blt_bool   result = BLT_FALSE;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	77fb      	strb	r3, [r7, #31]
  blt_int8u  sectorIdx;
  blt_int32u wordCnt;
  blt_int32u volatile const * wordPtr;
  
  /* find the index of this sector into the flashLayout array */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8008bca:	2300      	movs	r3, #0
 8008bcc:	77bb      	strb	r3, [r7, #30]
 8008bce:	e052      	b.n	8008c76 <FlashEmptyCheckSector+0xba>
  {
    /* is this the index that the sector number belongs to? */
    if (flashLayout[sectorIdx].sector_num == sector_num)
 8008bd0:	7fba      	ldrb	r2, [r7, #30]
 8008bd2:	492d      	ldr	r1, [pc, #180]	; (8008c88 <FlashEmptyCheckSector+0xcc>)
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	3308      	adds	r3, #8
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	79fa      	ldrb	r2, [r7, #7]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d143      	bne.n	8008c70 <FlashEmptyCheckSector+0xb4>
    {
      /* retrieve sector info */
      sectorAddr = flashLayout[sectorIdx].sector_start;
 8008be8:	7fba      	ldrb	r2, [r7, #30]
 8008bea:	4927      	ldr	r1, [pc, #156]	; (8008c88 <FlashEmptyCheckSector+0xcc>)
 8008bec:	4613      	mov	r3, r2
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	613b      	str	r3, [r7, #16]
      sectorSize = flashLayout[sectorIdx].sector_size;
 8008bfa:	7fba      	ldrb	r2, [r7, #30]
 8008bfc:	4922      	ldr	r1, [pc, #136]	; (8008c88 <FlashEmptyCheckSector+0xcc>)
 8008bfe:	4613      	mov	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3304      	adds	r3, #4
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60fb      	str	r3, [r7, #12]
      
      /* sanity check. sector base address should be 32-bit aligned and the size
       * should be a multiple of 32-bits.
       */
      ASSERT_RT(((sectorAddr % sizeof(blt_int32u)) == 0) && 
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <FlashEmptyCheckSector+0x66>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f003 0303 	and.w	r3, r3, #3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <FlashEmptyCheckSector+0x70>
 8008c22:	f240 21c5 	movw	r1, #709	; 0x2c5
 8008c26:	4819      	ldr	r0, [pc, #100]	; (8008c8c <FlashEmptyCheckSector+0xd0>)
 8008c28:	f000 fdee 	bl	8009808 <AssertFailure>
                ((sectorSize % sizeof(blt_int32u)) == 0));  
      
      /* update result to success for now */
      result = BLT_TRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	77fb      	strb	r3, [r7, #31]
      /* initialize the pointer to the first word in the sector */
      wordPtr = (blt_int32u volatile const *)sectorAddr;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	617b      	str	r3, [r7, #20]
      /* read sector 32-bits at a time */
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8008c34:	2300      	movs	r3, #0
 8008c36:	61bb      	str	r3, [r7, #24]
 8008c38:	e014      	b.n	8008c64 <FlashEmptyCheckSector+0xa8>
      {
        /* service the watchdog every 256th loop iteration */
        if ((wordCnt % 256) == 0)
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <FlashEmptyCheckSector+0x8a>
        {
          CopService();
 8008c42:	f000 ff68 	bl	8009b16 <CopService>
        }
        /* word not in the erased state? */
        if (*wordPtr != 0xFFFFFFFFu)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d003      	beq.n	8008c58 <FlashEmptyCheckSector+0x9c>
        {
          /* sector not empty, update the result accordingly */
          result = BLT_FALSE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	77fb      	strb	r3, [r7, #31]
          /* no point in continuing the sector empty check */
          break;
 8008c54:	bf00      	nop
        }
        /* set pointer to the next word in the sector */
        wordPtr++;
      }
      /* sector index found and checked. no need to continue with another one.*/
      break;
 8008c56:	e011      	b.n	8008c7c <FlashEmptyCheckSector+0xc0>
        wordPtr++;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	617b      	str	r3, [r7, #20]
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	3301      	adds	r3, #1
 8008c62:	61bb      	str	r3, [r7, #24]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	089b      	lsrs	r3, r3, #2
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d3e5      	bcc.n	8008c3a <FlashEmptyCheckSector+0x7e>
      break;
 8008c6e:	e005      	b.n	8008c7c <FlashEmptyCheckSector+0xc0>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8008c70:	7fbb      	ldrb	r3, [r7, #30]
 8008c72:	3301      	adds	r3, #1
 8008c74:	77bb      	strb	r3, [r7, #30]
 8008c76:	7fbb      	ldrb	r3, [r7, #30]
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d9a9      	bls.n	8008bd0 <FlashEmptyCheckSector+0x14>
    }
  }  
  /* give the result back to the caller. */
  return result;
 8008c7c:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of FlashEmptyCheckSector ***/
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	0800f148 	.word	0x0800f148
 8008c8c:	0800ed10 	.word	0x0800ed10

08008c90 <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	; 0x28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	460a      	mov	r2, r1
 8008c9a:	71fb      	strb	r3, [r7, #7]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 8008caa:	79fa      	ldrb	r2, [r7, #7]
 8008cac:	79bb      	ldrb	r3, [r7, #6]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d902      	bls.n	8008cb8 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 8008cb8:	2202      	movs	r2, #2
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d303      	bcc.n	8008cc8 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 8008cc0:	220b      	movs	r2, #11
  if ((first_sector < flashLayout[0].sector_num) || \
 8008cc2:	79bb      	ldrb	r3, [r7, #6]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d902      	bls.n	8008cce <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 8008cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d133      	bne.n	8008d3e <FlashEraseSectors+0xae>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 8008ce2:	f7f9 f8b5 	bl	8001e50 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008cec:	e020      	b.n	8008d30 <FlashEraseSectors+0xa0>
    {
      /* no need to erase the sector if it is already empty */
      if (FlashEmptyCheckSector(sectorIdx) == BLT_FALSE)
 8008cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff ff62 	bl	8008bbc <FlashEmptyCheckSector>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d113      	bne.n	8008d26 <FlashEraseSectors+0x96>
      {
        /* keep the watchdog happy */
        CopService();
 8008cfe:	f000 ff0a 	bl	8009b16 <CopService>
        /* set the sector to erase */
        eraseInitStruct.Sector = sectorIdx;
 8008d02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d06:	61bb      	str	r3, [r7, #24]
        /* submit the sector erase request */
        if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8008d08:	f107 020c 	add.w	r2, r7, #12
 8008d0c:	f107 0310 	add.w	r3, r7, #16
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7f9 f9fe 	bl	8002114 <HAL_FLASHEx_Erase>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <FlashEraseSectors+0x96>
        {
          /* could not perform erase operation */
          result = BLT_FALSE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          /* error detected so don't bother continuing with the loop */
          break;
 8008d24:	e009      	b.n	8008d3a <FlashEraseSectors+0xaa>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8008d26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d34:	79bb      	ldrb	r3, [r7, #6]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d9d9      	bls.n	8008cee <FlashEraseSectors+0x5e>
        }
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8008d3a:	f7f9 f8ab 	bl	8001e94 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 8008d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 8008d42:	4618      	mov	r0, r3
 8008d44:	3728      	adds	r7, #40	; 0x28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 8008d54:	23ff      	movs	r3, #255	; 0xff
 8008d56:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73bb      	strb	r3, [r7, #14]
 8008d5c:	e02f      	b.n	8008dbe <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 8008d5e:	f000 feda 	bl	8009b16 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8008d62:	7bba      	ldrb	r2, [r7, #14]
 8008d64:	491a      	ldr	r1, [pc, #104]	; (8008dd0 <FlashGetSector+0x84>)
 8008d66:	4613      	mov	r3, r2
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d31f      	bcc.n	8008db8 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8008d78:	7bba      	ldrb	r2, [r7, #14]
 8008d7a:	4915      	ldr	r1, [pc, #84]	; (8008dd0 <FlashGetSector+0x84>)
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 8008d88:	7bba      	ldrb	r2, [r7, #14]
 8008d8a:	4811      	ldr	r0, [pc, #68]	; (8008dd0 <FlashGetSector+0x84>)
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4403      	add	r3, r0
 8008d96:	3304      	adds	r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 8008d9a:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d20a      	bcs.n	8008db8 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8008da2:	7bba      	ldrb	r2, [r7, #14]
 8008da4:	490a      	ldr	r1, [pc, #40]	; (8008dd0 <FlashGetSector+0x84>)
 8008da6:	4613      	mov	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	3308      	adds	r3, #8
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 8008db6:	e005      	b.n	8008dc4 <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	73bb      	strb	r3, [r7, #14]
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	2b09      	cmp	r3, #9
 8008dc2:	d9cc      	bls.n	8008d5e <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	0800f148 	.word	0x0800f148

08008dd4 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8008dd8:	f7ff fc9e 	bl	8008718 <FlashInit>
} /*** end of NvmInit ***/
 8008ddc:	bf00      	nop
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff fca5 	bl	8008740 <FlashWrite>
 8008df6:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff fce1 	bl	80087d4 <FlashErase>
 8008e12:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8008e20:	f7ff fd62 	bl	80088e8 <FlashVerifyChecksum>
 8008e24:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8008e26:	4618      	mov	r0, r3
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8008e2e:	f7ff fdc3 	bl	80089b8 <FlashGetUserProgBaseAddress>
 8008e32:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8008e3c:	f7ff fd00 	bl	8008840 <FlashWriteChecksum>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <NvmDone+0x12>
  {
    return BLT_FALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	e002      	b.n	8008e50 <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8008e4a:	f7ff fd91 	bl	8008970 <FlashDone>
 8008e4e:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8008e50:	4618      	mov	r0, r3
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <LL_USART_Enable>:
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <LL_USART_Disable>:
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	60da      	str	r2, [r3, #12]
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <LL_USART_IsActiveFlag_RXNE>:
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <LL_USART_IsActiveFlag_TXE>:
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	bf0c      	ite	eq
 8008ece:	2301      	moveq	r3, #1
 8008ed0:	2300      	movne	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <LL_USART_ReceiveData8>:
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	b2db      	uxtb	r3, r3
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <LL_USART_TransmitData8>:
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	605a      	str	r2, [r3, #4]
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <Rs232Init>:
** \brief     Initializes the RS232 communication interface.
** \return    none.
**
****************************************************************************************/
void Rs232Init(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
            (BOOT_COM_RS232_CHANNEL_INDEX == 5) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 6) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 7));

  /* disable the UART peripheral */
  LL_USART_Disable(USART_CHANNEL);
 8008f1e:	480f      	ldr	r0, [pc, #60]	; (8008f5c <Rs232Init+0x44>)
 8008f20:	f7ff ffa8 	bl	8008e74 <LL_USART_Disable>
  /* configure UART peripheral */
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8008f24:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8008f28:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008f36:	230c      	movs	r3, #12
 8008f38:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
  /* initialize the UART peripheral */
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8008f42:	1d3b      	adds	r3, r7, #4
 8008f44:	4619      	mov	r1, r3
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <Rs232Init+0x44>)
 8008f48:	f7fb fdcc 	bl	8004ae4 <LL_USART_Init>
  LL_USART_Enable(USART_CHANNEL);
 8008f4c:	4803      	ldr	r0, [pc, #12]	; (8008f5c <Rs232Init+0x44>)
 8008f4e:	f7ff ff81 	bl	8008e54 <LL_USART_Enable>
} /*** end of Rs232Init ***/
 8008f52:	bf00      	nop
 8008f54:	3720      	adds	r7, #32
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40004400 	.word	0x40004400

08008f60 <Rs232TransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitPacket(blt_int8u *data, blt_int8u len)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	2b81      	cmp	r3, #129	; 0x81
 8008f70:	d903      	bls.n	8008f7a <Rs232TransmitPacket+0x1a>
 8008f72:	2183      	movs	r1, #131	; 0x83
 8008f74:	480f      	ldr	r0, [pc, #60]	; (8008fb4 <Rs232TransmitPacket+0x54>)
 8008f76:	f000 fc47 	bl	8009808 <AssertFailure>

  /* first transmit the length of the packet */
  Rs232TransmitByte(len);
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f89b 	bl	80090b8 <Rs232TransmitByte>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 8008f82:	2300      	movs	r3, #0
 8008f84:	81fb      	strh	r3, [r7, #14]
 8008f86:	e00b      	b.n	8008fa0 <Rs232TransmitPacket+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 8008f88:	f000 fdc5 	bl	8009b16 <CopService>
    /* write byte */
    Rs232TransmitByte(data[data_index]);
 8008f8c:	89fb      	ldrh	r3, [r7, #14]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 f88f 	bl	80090b8 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8008f9a:	89fb      	ldrh	r3, [r7, #14]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	81fb      	strh	r3, [r7, #14]
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	89fa      	ldrh	r2, [r7, #14]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d3ee      	bcc.n	8008f88 <Rs232TransmitPacket+0x28>
  }
} /*** end of Rs232TransmitPacket ***/
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	0800ed80 	.word	0x0800ed80

08008fb8 <Rs232ReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool Rs232ReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;
  static blt_int32u xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 8008fc2:	4b2b      	ldr	r3, [pc, #172]	; (8009070 <Rs232ReceivePacket+0xb8>)
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d119      	bne.n	8008ffe <Rs232ReceivePacket+0x46>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8008fca:	482a      	ldr	r0, [pc, #168]	; (8009074 <Rs232ReceivePacket+0xbc>)
 8008fcc:	f000 f85a 	bl	8009084 <Rs232ReceiveByte>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d146      	bne.n	8009064 <Rs232ReceivePacket+0xac>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <Rs232ReceivePacket+0xbc>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d042      	beq.n	8009064 <Rs232ReceivePacket+0xac>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 8008fde:	4b25      	ldr	r3, [pc, #148]	; (8009074 <Rs232ReceivePacket+0xbc>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 8008fe2:	2b81      	cmp	r3, #129	; 0x81
 8008fe4:	d83e      	bhi.n	8009064 <Rs232ReceivePacket+0xac>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 8008fe6:	f000 f8cd 	bl	8009184 <TimerGet>
 8008fea:	4603      	mov	r3, r0
 8008fec:	4a22      	ldr	r2, [pc, #136]	; (8009078 <Rs232ReceivePacket+0xc0>)
 8008fee:	6013      	str	r3, [r2, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 8008ff0:	4b22      	ldr	r3, [pc, #136]	; (800907c <Rs232ReceivePacket+0xc4>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8008ff6:	4b1e      	ldr	r3, [pc, #120]	; (8009070 <Rs232ReceivePacket+0xb8>)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	701a      	strb	r2, [r3, #0]
 8008ffc:	e032      	b.n	8009064 <Rs232ReceivePacket+0xac>
    }
  }
  else
  {
    /* store the next packet byte */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8008ffe:	4b1f      	ldr	r3, [pc, #124]	; (800907c <Rs232ReceivePacket+0xc4>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <Rs232ReceivePacket+0xbc>)
 8009006:	4413      	add	r3, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f83b 	bl	8009084 <Rs232ReceiveByte>
 800900e:	4603      	mov	r3, r0
 8009010:	2b01      	cmp	r3, #1
 8009012:	d11c      	bne.n	800904e <Rs232ReceivePacket+0x96>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 8009014:	4b19      	ldr	r3, [pc, #100]	; (800907c <Rs232ReceivePacket+0xc4>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	3301      	adds	r3, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	4b17      	ldr	r3, [pc, #92]	; (800907c <Rs232ReceivePacket+0xc4>)
 800901e:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8009020:	4b14      	ldr	r3, [pc, #80]	; (8009074 <Rs232ReceivePacket+0xbc>)
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	4b15      	ldr	r3, [pc, #84]	; (800907c <Rs232ReceivePacket+0xc4>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d11b      	bne.n	8009064 <Rs232ReceivePacket+0xac>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4914      	ldr	r1, [pc, #80]	; (8009080 <Rs232ReceivePacket+0xc8>)
 8009030:	4a12      	ldr	r2, [pc, #72]	; (800907c <Rs232ReceivePacket+0xc4>)
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	b292      	uxth	r2, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fb4e 	bl	80086d8 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 800903c:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <Rs232ReceivePacket+0xb8>)
 800903e:	2200      	movs	r2, #0
 8009040:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 8009042:	4b0e      	ldr	r3, [pc, #56]	; (800907c <Rs232ReceivePacket+0xc4>)
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	e00b      	b.n	8009066 <Rs232ReceivePacket+0xae>
      }
    }
    else
    {
      /* check packet reception timeout */
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 800904e:	f000 f899 	bl	8009184 <TimerGet>
 8009052:	4602      	mov	r2, r0
 8009054:	4b08      	ldr	r3, [pc, #32]	; (8009078 <Rs232ReceivePacket+0xc0>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	33c8      	adds	r3, #200	; 0xc8
 800905a:	429a      	cmp	r2, r3
 800905c:	d902      	bls.n	8009064 <Rs232ReceivePacket+0xac>
      {
        /* cancel cto packet reception due to timeout. note that that automaticaly
         * discards the already received packet bytes, allowing the host to retry.
         */
        xcpCtoRxInProgress = BLT_FALSE;
 800905e:	4b04      	ldr	r3, [pc, #16]	; (8009070 <Rs232ReceivePacket+0xb8>)
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 8009064:	2300      	movs	r3, #0
} /*** end of Rs232ReceivePacket ***/
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000c40 	.word	0x20000c40
 8009074:	20000c44 	.word	0x20000c44
 8009078:	20000cc8 	.word	0x20000cc8
 800907c:	20000ccc 	.word	0x20000ccc
 8009080:	20000c45 	.word	0x20000c45

08009084 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 800908c:	4809      	ldr	r0, [pc, #36]	; (80090b4 <Rs232ReceiveByte+0x30>)
 800908e:	f7ff ff01 	bl	8008e94 <LL_USART_IsActiveFlag_RXNE>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d008      	beq.n	80090aa <Rs232ReceiveByte+0x26>
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8009098:	4806      	ldr	r0, [pc, #24]	; (80090b4 <Rs232ReceiveByte+0x30>)
 800909a:	f7ff ff21 	bl	8008ee0 <LL_USART_ReceiveData8>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	701a      	strb	r2, [r3, #0]
    /* all done */
    return BLT_TRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e000      	b.n	80090ac <Rs232ReceiveByte+0x28>
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 80090aa:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	40004400 	.word	0x40004400

080090b8 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	71fb      	strb	r3, [r7, #7]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	4619      	mov	r1, r3
 80090c6:	480e      	ldr	r0, [pc, #56]	; (8009100 <Rs232TransmitByte+0x48>)
 80090c8:	f7ff ff17 	bl	8008efa <LL_USART_TransmitData8>
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 80090cc:	f000 f85a 	bl	8009184 <TimerGet>
 80090d0:	4603      	mov	r3, r0
 80090d2:	330a      	adds	r3, #10
 80090d4:	60fb      	str	r3, [r7, #12]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 80090d6:	e007      	b.n	80090e8 <Rs232TransmitByte+0x30>
  {
    /* keep the watchdog happy */
    CopService();
 80090d8:	f000 fd1d 	bl	8009b16 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 80090dc:	f000 f852 	bl	8009184 <TimerGet>
 80090e0:	4602      	mov	r2, r0
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d306      	bcc.n	80090f6 <Rs232TransmitByte+0x3e>
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 80090e8:	4805      	ldr	r0, [pc, #20]	; (8009100 <Rs232TransmitByte+0x48>)
 80090ea:	f7ff fee6 	bl	8008eba <LL_USART_IsActiveFlag_TXE>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0f1      	beq.n	80090d8 <Rs232TransmitByte+0x20>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 80090f4:	e000      	b.n	80090f8 <Rs232TransmitByte+0x40>
      break;
 80090f6:	bf00      	nop
} /*** end of Rs232TransmitByte ***/
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	40004400 	.word	0x40004400

08009104 <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8009108:	f000 f814 	bl	8009134 <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 800910c:	4b06      	ldr	r3, [pc, #24]	; (8009128 <TimerInit+0x24>)
 800910e:	4a07      	ldr	r2, [pc, #28]	; (800912c <TimerInit+0x28>)
 8009110:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 8009112:	4b05      	ldr	r3, [pc, #20]	; (8009128 <TimerInit+0x24>)
 8009114:	2200      	movs	r2, #0
 8009116:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8009118:	4b03      	ldr	r3, [pc, #12]	; (8009128 <TimerInit+0x24>)
 800911a:	2205      	movs	r2, #5
 800911c:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 800911e:	4b04      	ldr	r3, [pc, #16]	; (8009130 <TimerInit+0x2c>)
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8009124:	bf00      	nop
 8009126:	bd80      	pop	{r7, pc}
 8009128:	e000e010 	.word	0xe000e010
 800912c:	0002903f 	.word	0x0002903f
 8009130:	20000cd0 	.word	0x20000cd0

08009134 <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <TimerReset+0x20>)
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800913e:	4b05      	ldr	r3, [pc, #20]	; (8009154 <TimerReset+0x20>)
 8009140:	2200      	movs	r2, #0
 8009142:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8009144:	4b03      	ldr	r3, [pc, #12]	; (8009154 <TimerReset+0x20>)
 8009146:	2200      	movs	r2, #0
 8009148:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 800914a:	bf00      	nop
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	e000e010 	.word	0xe000e010

08009158 <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <TimerUpdate+0x24>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d004      	beq.n	8009172 <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <TimerUpdate+0x28>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3301      	adds	r3, #1
 800916e:	4a04      	ldr	r2, [pc, #16]	; (8009180 <TimerUpdate+0x28>)
 8009170:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8009172:	bf00      	nop
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	e000e010 	.word	0xe000e010
 8009180:	20000cd0 	.word	0x20000cd0

08009184 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8009188:	f7ff ffe6 	bl	8009158 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 800918c:	4b01      	ldr	r3, [pc, #4]	; (8009194 <TimerGet+0x10>)
 800918e:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 8009190:	4618      	mov	r0, r3
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000cd0 	.word	0x20000cd0

08009198 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 800919c:	f7ff fff2 	bl	8009184 <TimerGet>
 80091a0:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 80091a2:	4618      	mov	r0, r3
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <UsbInit>:
** \brief     Initializes the USB communication interface.
** \return    none.
**
****************************************************************************************/
void UsbInit(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* initialize the FIFO manager */
  UsbFifoMgrInit();
 80091ac:	f000 f9a8 	bl	8009500 <UsbFifoMgrInit>
  /* place 2 buffers under FIFO management */
  fifoPipeBulkIN.handle  = UsbFifoMgrCreate(fifoPipeBulkIN.data,  FIFO_PIPE_SIZE);
 80091b0:	2140      	movs	r1, #64	; 0x40
 80091b2:	481e      	ldr	r0, [pc, #120]	; (800922c <UsbInit+0x84>)
 80091b4:	f000 f9d6 	bl	8009564 <UsbFifoMgrCreate>
 80091b8:	4603      	mov	r3, r0
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b1c      	ldr	r3, [pc, #112]	; (8009230 <UsbInit+0x88>)
 80091be:	701a      	strb	r2, [r3, #0]
  fifoPipeBulkOUT.handle = UsbFifoMgrCreate(fifoPipeBulkOUT.data, FIFO_PIPE_SIZE);
 80091c0:	2140      	movs	r1, #64	; 0x40
 80091c2:	481c      	ldr	r0, [pc, #112]	; (8009234 <UsbInit+0x8c>)
 80091c4:	f000 f9ce 	bl	8009564 <UsbFifoMgrCreate>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <UsbInit+0x90>)
 80091ce:	701a      	strb	r2, [r3, #0]
  /* validate fifo handles */
  ASSERT_RT((fifoPipeBulkIN.handle  != FIFO_ERR_INVALID_HANDLE) && \
 80091d0:	4b17      	ldr	r3, [pc, #92]	; (8009230 <UsbInit+0x88>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2bff      	cmp	r3, #255	; 0xff
 80091d6:	d003      	beq.n	80091e0 <UsbInit+0x38>
 80091d8:	4b17      	ldr	r3, [pc, #92]	; (8009238 <UsbInit+0x90>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2bff      	cmp	r3, #255	; 0xff
 80091de:	d103      	bne.n	80091e8 <UsbInit+0x40>
 80091e0:	2184      	movs	r1, #132	; 0x84
 80091e2:	4816      	ldr	r0, [pc, #88]	; (800923c <UsbInit+0x94>)
 80091e4:	f000 fb10 	bl	8009808 <AssertFailure>
            (fifoPipeBulkOUT.handle != FIFO_ERR_INVALID_HANDLE));
  /* initialize the USB device libary */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80091e8:	2200      	movs	r2, #0
 80091ea:	4915      	ldr	r1, [pc, #84]	; (8009240 <UsbInit+0x98>)
 80091ec:	4815      	ldr	r0, [pc, #84]	; (8009244 <UsbInit+0x9c>)
 80091ee:	f7fd ff45 	bl	800707c <USBD_Init>
  /* register the bootloader's custom USB Bulk based class */
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_Bulk);
 80091f2:	4915      	ldr	r1, [pc, #84]	; (8009248 <UsbInit+0xa0>)
 80091f4:	4813      	ldr	r0, [pc, #76]	; (8009244 <UsbInit+0x9c>)
 80091f6:	f7fd ffab 	bl	8007150 <USBD_RegisterClass>
  /* inform application about the connect event */
  UsbConnectHook(BLT_TRUE);
 80091fa:	2001      	movs	r0, #1
 80091fc:	f7f7 fa0e 	bl	800061c <UsbConnectHook>
  /* start the USB device */
  USBD_Start(&hUsbDeviceFS);
 8009200:	4810      	ldr	r0, [pc, #64]	; (8009244 <UsbInit+0x9c>)
 8009202:	f7fd ffc6 	bl	8007192 <USBD_Start>
  /* perform low level connect of the device */
  HAL_PCD_DevConnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 8009206:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <UsbInit+0x9c>)
 8009208:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800920c:	4618      	mov	r0, r3
 800920e:	f7fa f899 	bl	8003344 <HAL_PCD_DevConnect>
  /* extend the time that the backdoor is open in case the default timed backdoor
   * mechanism is used.
   */
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  if (BackDoorGetExtension() < BOOT_COM_USB_BACKDOOR_EXTENSION_MS)
 8009212:	f000 fb51 	bl	80098b8 <BackDoorGetExtension>
 8009216:	4603      	mov	r3, r0
 8009218:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800921c:	d203      	bcs.n	8009226 <UsbInit+0x7e>
  {
    BackDoorSetExtension(BOOT_COM_USB_BACKDOOR_EXTENSION_MS);
 800921e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009222:	f000 fb39 	bl	8009898 <BackDoorSetExtension>
  }
#endif /* BOOT_BACKDOOR_HOOKS_ENABLE == 0 */
} /*** end of UsbInit ***/
 8009226:	bf00      	nop
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000d09 	.word	0x20000d09
 8009230:	20000d08 	.word	0x20000d08
 8009234:	20000d4d 	.word	0x20000d4d
 8009238:	20000d4c 	.word	0x20000d4c
 800923c:	0800edf0 	.word	0x0800edf0
 8009240:	20000110 	.word	0x20000110
 8009244:	20000d90 	.word	0x20000d90
 8009248:	20000018 	.word	0x20000018

0800924c <UsbFree>:
** \brief     Releases the USB communication interface.
** \return    none.
**
****************************************************************************************/
void UsbFree(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /* perform low level disconnect of the device */
  HAL_PCD_DevDisconnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 8009250:	4b06      	ldr	r3, [pc, #24]	; (800926c <UsbFree+0x20>)
 8009252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009256:	4618      	mov	r0, r3
 8009258:	f7fa f8a2 	bl	80033a0 <HAL_PCD_DevDisconnect>
  /* uninitialize the device */
  USBD_DeInit(&hUsbDeviceFS);
 800925c:	4803      	ldr	r0, [pc, #12]	; (800926c <UsbFree+0x20>)
 800925e:	f7fd ff43 	bl	80070e8 <USBD_DeInit>
  /* inform application about the disconnect event */
  UsbConnectHook(BLT_FALSE);
 8009262:	2000      	movs	r0, #0
 8009264:	f7f7 f9da 	bl	800061c <UsbConnectHook>
} /*** end of UsbFree ***/
 8009268:	bf00      	nop
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000d90 	.word	0x20000d90

08009270 <UsbTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void UsbTransmitPacket(blt_int8u *data, blt_int8u len)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;
  blt_bool result;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_USB_TX_MAX_DATA);
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	2b3f      	cmp	r3, #63	; 0x3f
 8009280:	d903      	bls.n	800928a <UsbTransmitPacket+0x1a>
 8009282:	21b9      	movs	r1, #185	; 0xb9
 8009284:	4818      	ldr	r0, [pc, #96]	; (80092e8 <UsbTransmitPacket+0x78>)
 8009286:	f000 fabf 	bl	8009808 <AssertFailure>

  /* first transmit the length of the packet */
  result = UsbTransmitByte(len);
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f89d 	bl	80093cc <UsbTransmitByte>
 8009292:	4603      	mov	r3, r0
 8009294:	737b      	strb	r3, [r7, #13]
  ASSERT_RT(result == BLT_TRUE);
 8009296:	7b7b      	ldrb	r3, [r7, #13]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d003      	beq.n	80092a4 <UsbTransmitPacket+0x34>
 800929c:	21bd      	movs	r1, #189	; 0xbd
 800929e:	4812      	ldr	r0, [pc, #72]	; (80092e8 <UsbTransmitPacket+0x78>)
 80092a0:	f000 fab2 	bl	8009808 <AssertFailure>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 80092a4:	2300      	movs	r3, #0
 80092a6:	81fb      	strh	r3, [r7, #14]
 80092a8:	e014      	b.n	80092d4 <UsbTransmitPacket+0x64>
  {
    /* keep the watchdog happy */
    CopService();
 80092aa:	f000 fc34 	bl	8009b16 <CopService>
    /* write byte */
    result = UsbTransmitByte(data[data_index]);
 80092ae:	89fb      	ldrh	r3, [r7, #14]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	4413      	add	r3, r2
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f888 	bl	80093cc <UsbTransmitByte>
 80092bc:	4603      	mov	r3, r0
 80092be:	737b      	strb	r3, [r7, #13]
    ASSERT_RT(result == BLT_TRUE);
 80092c0:	7b7b      	ldrb	r3, [r7, #13]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d003      	beq.n	80092ce <UsbTransmitPacket+0x5e>
 80092c6:	21c6      	movs	r1, #198	; 0xc6
 80092c8:	4807      	ldr	r0, [pc, #28]	; (80092e8 <UsbTransmitPacket+0x78>)
 80092ca:	f000 fa9d 	bl	8009808 <AssertFailure>
  for (data_index = 0; data_index < len; data_index++)
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	3301      	adds	r3, #1
 80092d2:	81fb      	strh	r3, [r7, #14]
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	89fa      	ldrh	r2, [r7, #14]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d3e5      	bcc.n	80092aa <UsbTransmitPacket+0x3a>
  }
} /*** end of UsbTransmitPacket ***/
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	0800edf0 	.word	0x0800edf0

080092ec <UsbReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool UsbReceivePacket(blt_int8u *data, blt_int8u *len)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoReqPacket[BOOT_COM_USB_RX_MAX_DATA+1];  /* one extra for length */
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;

  /* poll USB interrupt flags to process USB related events */
  HAL_PCD_IRQHandler((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 80092f6:	4b26      	ldr	r3, [pc, #152]	; (8009390 <UsbReceivePacket+0xa4>)
 80092f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7f9 fc6f 	bl	8002be0 <HAL_PCD_IRQHandler>

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 8009302:	4b24      	ldr	r3, [pc, #144]	; (8009394 <UsbReceivePacket+0xa8>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d114      	bne.n	8009334 <UsbReceivePacket+0x48>
  {
    /* store the message length when received */
    if (UsbReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 800930a:	4823      	ldr	r0, [pc, #140]	; (8009398 <UsbReceivePacket+0xac>)
 800930c:	f000 f84a 	bl	80093a4 <UsbReceiveByte>
 8009310:	4603      	mov	r3, r0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d136      	bne.n	8009384 <UsbReceivePacket+0x98>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8009316:	4b20      	ldr	r3, [pc, #128]	; (8009398 <UsbReceivePacket+0xac>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d032      	beq.n	8009384 <UsbReceivePacket+0x98>
           (xcpCtoReqPacket[0] <= BOOT_COM_USB_RX_MAX_DATA) )
 800931e:	4b1e      	ldr	r3, [pc, #120]	; (8009398 <UsbReceivePacket+0xac>)
 8009320:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 8009322:	2b3f      	cmp	r3, #63	; 0x3f
 8009324:	d82e      	bhi.n	8009384 <UsbReceivePacket+0x98>
      {
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8009326:	4b1b      	ldr	r3, [pc, #108]	; (8009394 <UsbReceivePacket+0xa8>)
 8009328:	2201      	movs	r2, #1
 800932a:	701a      	strb	r2, [r3, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <UsbReceivePacket+0xb0>)
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e027      	b.n	8009384 <UsbReceivePacket+0x98>
    }
  }
  else
  {
    /* store the next packet byte */
    if (UsbReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8009334:	4b19      	ldr	r3, [pc, #100]	; (800939c <UsbReceivePacket+0xb0>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	3301      	adds	r3, #1
 800933a:	4a17      	ldr	r2, [pc, #92]	; (8009398 <UsbReceivePacket+0xac>)
 800933c:	4413      	add	r3, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f000 f830 	bl	80093a4 <UsbReceiveByte>
 8009344:	4603      	mov	r3, r0
 8009346:	2b01      	cmp	r3, #1
 8009348:	d11c      	bne.n	8009384 <UsbReceivePacket+0x98>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 800934a:	4b14      	ldr	r3, [pc, #80]	; (800939c <UsbReceivePacket+0xb0>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	b2da      	uxtb	r2, r3
 8009352:	4b12      	ldr	r3, [pc, #72]	; (800939c <UsbReceivePacket+0xb0>)
 8009354:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8009356:	4b10      	ldr	r3, [pc, #64]	; (8009398 <UsbReceivePacket+0xac>)
 8009358:	781a      	ldrb	r2, [r3, #0]
 800935a:	4b10      	ldr	r3, [pc, #64]	; (800939c <UsbReceivePacket+0xb0>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d110      	bne.n	8009384 <UsbReceivePacket+0x98>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	490e      	ldr	r1, [pc, #56]	; (80093a0 <UsbReceivePacket+0xb4>)
 8009366:	4a0d      	ldr	r2, [pc, #52]	; (800939c <UsbReceivePacket+0xb0>)
 8009368:	7812      	ldrb	r2, [r2, #0]
 800936a:	b292      	uxth	r2, r2
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff f9b3 	bl	80086d8 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 8009372:	4b08      	ldr	r3, [pc, #32]	; (8009394 <UsbReceivePacket+0xa8>)
 8009374:	2200      	movs	r2, #0
 8009376:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 8009378:	4b08      	ldr	r3, [pc, #32]	; (800939c <UsbReceivePacket+0xb0>)
 800937a:	781a      	ldrb	r2, [r3, #0]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <UsbReceivePacket+0x9a>
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 8009384:	2300      	movs	r3, #0
} /*** end of UsbReceivePacket ***/
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20000d90 	.word	0x20000d90
 8009394:	20001060 	.word	0x20001060
 8009398:	20001064 	.word	0x20001064
 800939c:	200010a4 	.word	0x200010a4
 80093a0:	20001065 	.word	0x20001065

080093a4 <UsbReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool UsbReceiveByte(blt_int8u *data)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  blt_bool result;

  /* obtain data from the fifo */
  result = UsbFifoMgrRead(fifoPipeBulkOUT.handle, data);
 80093ac:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <UsbReceiveByte+0x24>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f98e 	bl	80096d4 <UsbFifoMgrRead>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]
  return result;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of UsbReceiveByte ***/
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000d4c 	.word	0x20000d4c

080093cc <UsbTransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    BLT_TRUE if the byte was transmitted, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool UsbTransmitByte(blt_int8u data)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	71fb      	strb	r3, [r7, #7]
  blt_bool result;

  /* write data from to fifo */
  result = UsbFifoMgrWrite(fifoPipeBulkIN.handle, data);
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <UsbTransmitByte+0x28>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	79fa      	ldrb	r2, [r7, #7]
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 f8f2 	bl	80095c8 <UsbFifoMgrWrite>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73fb      	strb	r3, [r7, #15]
  return result;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of UsbTransmitByte ***/
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20000d08 	.word	0x20000d08

080093f8 <UsbTransmitPipeBulkIN>:
**            for transmission with the USB endpoint.
** \return    none.
**
****************************************************************************************/
void UsbTransmitPipeBulkIN(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
  blt_int8u byte_counter;
  blt_int8u byte_value;
  blt_bool  result;

  /* read how many bytes should be transmitted */
  nr_of_bytes_for_tx_endpoint = UsbFifoMgrScan(fifoPipeBulkIN.handle);
 80093fe:	4b1c      	ldr	r3, [pc, #112]	; (8009470 <UsbTransmitPipeBulkIN+0x78>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f9e2 	bl	80097cc <UsbFifoMgrScan>
 8009408:	4603      	mov	r3, r0
 800940a:	71fb      	strb	r3, [r7, #7]
  /* only continue if there is actually data left to transmit */
  if (nr_of_bytes_for_tx_endpoint == 0)
 800940c:	79fb      	ldrb	r3, [r7, #7]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d02a      	beq.n	8009468 <UsbTransmitPipeBulkIN+0x70>
  {
    return;
  }
  /* make sure to not transmit more than the USB endpoint can handle */
  if (nr_of_bytes_for_tx_endpoint > BULK_DATA_MAX_PACKET_SIZE)
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	d901      	bls.n	800941c <UsbTransmitPipeBulkIN+0x24>
  {
    nr_of_bytes_for_tx_endpoint = BULK_DATA_MAX_PACKET_SIZE;
 8009418:	2340      	movs	r3, #64	; 0x40
 800941a:	71fb      	strb	r3, [r7, #7]
  }
  /* copy the transmit data to the transmit buffer */
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 800941c:	2300      	movs	r3, #0
 800941e:	71bb      	strb	r3, [r7, #6]
 8009420:	e017      	b.n	8009452 <UsbTransmitPipeBulkIN+0x5a>
  {
    /* obtain data from the fifo */
    result = UsbFifoMgrRead(fifoPipeBulkIN.handle, &byte_value);
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <UsbTransmitPipeBulkIN+0x78>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	1d3a      	adds	r2, r7, #4
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f952 	bl	80096d4 <UsbFifoMgrRead>
 8009430:	4603      	mov	r3, r0
 8009432:	717b      	strb	r3, [r7, #5]
    ASSERT_RT(result == BLT_TRUE);
 8009434:	797b      	ldrb	r3, [r7, #5]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d004      	beq.n	8009444 <UsbTransmitPipeBulkIN+0x4c>
 800943a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800943e:	480d      	ldr	r0, [pc, #52]	; (8009474 <UsbTransmitPipeBulkIN+0x7c>)
 8009440:	f000 f9e2 	bl	8009808 <AssertFailure>
    /* store it in the endpoint's RAM */
    USB_Tx_Buffer[byte_counter] = byte_value;
 8009444:	79bb      	ldrb	r3, [r7, #6]
 8009446:	7939      	ldrb	r1, [r7, #4]
 8009448:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <UsbTransmitPipeBulkIN+0x80>)
 800944a:	54d1      	strb	r1, [r2, r3]
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 800944c:	79bb      	ldrb	r3, [r7, #6]
 800944e:	3301      	adds	r3, #1
 8009450:	71bb      	strb	r3, [r7, #6]
 8009452:	79ba      	ldrb	r2, [r7, #6]
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	429a      	cmp	r2, r3
 8009458:	d3e3      	bcc.n	8009422 <UsbTransmitPipeBulkIN+0x2a>
  }
  /* copy data to endpoint's RAM and start the transmission */
  USBD_LL_Transmit(&hUsbDeviceFS, BULK_IN_EP, &USB_Tx_Buffer[0],
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	4a06      	ldr	r2, [pc, #24]	; (8009478 <UsbTransmitPipeBulkIN+0x80>)
 800945e:	2181      	movs	r1, #129	; 0x81
 8009460:	4806      	ldr	r0, [pc, #24]	; (800947c <UsbTransmitPipeBulkIN+0x84>)
 8009462:	f005 fb59 	bl	800eb18 <USBD_LL_Transmit>
 8009466:	e000      	b.n	800946a <UsbTransmitPipeBulkIN+0x72>
    return;
 8009468:	bf00      	nop
                   nr_of_bytes_for_tx_endpoint);
} /*** end of UsbTransmitPipeBulkIN ***/
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20000d08 	.word	0x20000d08
 8009474:	0800edf0 	.word	0x0800edf0
 8009478:	200010a8 	.word	0x200010a8
 800947c:	20000d90 	.word	0x20000d90

08009480 <UsbReceivePipeBulkOUT>:
** \brief     Stores data that was received on the Bulk OUT pipe in the fifo.
** \return    none.
**
****************************************************************************************/
void UsbReceivePipeBulkOUT(blt_int8u epnum)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	71fb      	strb	r3, [r7, #7]
  blt_int16u USB_Rx_Cnt=0;
 800948a:	2300      	movs	r3, #0
 800948c:	82bb      	strh	r3, [r7, #20]
  blt_int8u *usbRxBufferPtr;
  blt_int16u byte_counter;
  blt_bool result;

  /* Get the received data buffer and the number of received bytes */
  usbRxBufferPtr = USBD_Bulk_GetRxBufferPtr();
 800948e:	f004 fef3 	bl	800e278 <USBD_Bulk_GetRxBufferPtr>
 8009492:	6138      	str	r0, [r7, #16]
  USB_Rx_Cnt = USBD_LL_GetRxDataSize(&hUsbDeviceFS, epnum);
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	4619      	mov	r1, r3
 8009498:	4816      	ldr	r0, [pc, #88]	; (80094f4 <UsbReceivePipeBulkOUT+0x74>)
 800949a:	f005 fbad 	bl	800ebf8 <USBD_LL_GetRxDataSize>
 800949e:	4603      	mov	r3, r0
 80094a0:	82bb      	strh	r3, [r7, #20]

  /* USB data will be immediately processed, this allow next USB traffic being
   * NAKed till the end of the USART Xfer
   */
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	82fb      	strh	r3, [r7, #22]
 80094a6:	e015      	b.n	80094d4 <UsbReceivePipeBulkOUT+0x54>
  {
    /* add the data to the fifo */
    result = UsbFifoMgrWrite(fifoPipeBulkOUT.handle, usbRxBufferPtr[byte_counter]);
 80094a8:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <UsbReceivePipeBulkOUT+0x78>)
 80094aa:	7818      	ldrb	r0, [r3, #0]
 80094ac:	8afb      	ldrh	r3, [r7, #22]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4413      	add	r3, r2
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	4619      	mov	r1, r3
 80094b6:	f000 f887 	bl	80095c8 <UsbFifoMgrWrite>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
    /* verify that the fifo wasn't full */
    ASSERT_RT(result == BLT_TRUE);
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d004      	beq.n	80094ce <UsbReceivePipeBulkOUT+0x4e>
 80094c4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80094c8:	480c      	ldr	r0, [pc, #48]	; (80094fc <UsbReceivePipeBulkOUT+0x7c>)
 80094ca:	f000 f99d 	bl	8009808 <AssertFailure>
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 80094ce:	8afb      	ldrh	r3, [r7, #22]
 80094d0:	3301      	adds	r3, #1
 80094d2:	82fb      	strh	r3, [r7, #22]
 80094d4:	8afa      	ldrh	r2, [r7, #22]
 80094d6:	8abb      	ldrh	r3, [r7, #20]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d3e5      	bcc.n	80094a8 <UsbReceivePipeBulkOUT+0x28>
  }
  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(&hUsbDeviceFS,
 80094dc:	f004 fecc 	bl	800e278 <USBD_Bulk_GetRxBufferPtr>
 80094e0:	4602      	mov	r2, r0
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	2101      	movs	r1, #1
 80094e6:	4803      	ldr	r0, [pc, #12]	; (80094f4 <UsbReceivePipeBulkOUT+0x74>)
 80094e8:	f005 fb4e 	bl	800eb88 <USBD_LL_PrepareReceive>
                         BULK_OUT_EP,
                         USBD_Bulk_GetRxBufferPtr(),
                         BULK_DATA_FS_OUT_PACKET_SIZE);
} /*** end of UsbReceivePipeBulkOUT ***/
 80094ec:	bf00      	nop
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20000d90 	.word	0x20000d90
 80094f8:	20000d4c 	.word	0x20000d4c
 80094fc:	0800edf0 	.word	0x0800edf0

08009500 <UsbFifoMgrInit>:
**            before any of the other fifo management functions are called.
** \return    none.
**
****************************************************************************************/
static void UsbFifoMgrInit(void)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
  blt_int8u i;
  tFifoCtrl *pbc1, *pbc2;

  pbc1 = &fifoCtrl[0];
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <UsbFifoMgrInit+0x58>)
 8009508:	60bb      	str	r3, [r7, #8]
  pbc2 = &fifoCtrl[1];
 800950a:	4b14      	ldr	r3, [pc, #80]	; (800955c <UsbFifoMgrInit+0x5c>)
 800950c:	607b      	str	r3, [r7, #4]
  /* assign fifo handles and pointer to next free fifo */
  for (i = 0; i < (FIFO_MAX_BUFFERS - 1); i++)
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]
 8009512:	e00e      	b.n	8009532 <UsbFifoMgrInit+0x32>
  {
    pbc1->handle = i;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	7bfa      	ldrb	r2, [r7, #15]
 8009518:	749a      	strb	r2, [r3, #18]
    pbc1->fifoctrlptr = pbc2;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	615a      	str	r2, [r3, #20]
    pbc1++;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3318      	adds	r3, #24
 8009524:	60bb      	str	r3, [r7, #8]
    pbc2++;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3318      	adds	r3, #24
 800952a:	607b      	str	r3, [r7, #4]
  for (i = 0; i < (FIFO_MAX_BUFFERS - 1); i++)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	3301      	adds	r3, #1
 8009530:	73fb      	strb	r3, [r7, #15]
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d0ed      	beq.n	8009514 <UsbFifoMgrInit+0x14>
  }
  /* initialize handle for the last one and use null-pointer for the next free fifo  */
  pbc1->handle = i;
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	7bfa      	ldrb	r2, [r7, #15]
 800953c:	749a      	strb	r2, [r3, #18]
  pbc1->fifoctrlptr = (tFifoCtrl *)0;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2200      	movs	r2, #0
 8009542:	615a      	str	r2, [r3, #20]
  fifoCtrlFree = &fifoCtrl[0];
 8009544:	4b06      	ldr	r3, [pc, #24]	; (8009560 <UsbFifoMgrInit+0x60>)
 8009546:	4a04      	ldr	r2, [pc, #16]	; (8009558 <UsbFifoMgrInit+0x58>)
 8009548:	601a      	str	r2, [r3, #0]
} /*** end of UsbFifoMgrInit ***/
 800954a:	bf00      	nop
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20000cd4 	.word	0x20000cd4
 800955c:	20000cec 	.word	0x20000cec
 8009560:	20000d04 	.word	0x20000d04

08009564 <UsbFifoMgrCreate>:
** \param     length Maximum number of data elements that can be stored in the fifo.
** \return    Fifo handle if successfull, or FIFO_ERR_INVALID_HANDLE.
**
****************************************************************************************/
static blt_int8u UsbFifoMgrCreate(blt_int8u *buffer, blt_int8u length)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  tFifoCtrl *pbc;

  /* first determine if these is still a free fifo control available */
  if (fifoCtrlFree == (tFifoCtrl *)0)
 8009570:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <UsbFifoMgrCreate+0x60>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <UsbFifoMgrCreate+0x18>
  {
    return FIFO_ERR_INVALID_HANDLE;
 8009578:	23ff      	movs	r3, #255	; 0xff
 800957a:	e01d      	b.n	80095b8 <UsbFifoMgrCreate+0x54>
  }
  /* store pointer to free fifo and update pointer to next free one */
  pbc = fifoCtrlFree;
 800957c:	4b11      	ldr	r3, [pc, #68]	; (80095c4 <UsbFifoMgrCreate+0x60>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	60fb      	str	r3, [r7, #12]
  fifoCtrlFree = pbc->fifoctrlptr;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	4a0f      	ldr	r2, [pc, #60]	; (80095c4 <UsbFifoMgrCreate+0x60>)
 8009588:	6013      	str	r3, [r2, #0]

  /* initialize the buffer control */
  pbc->length = length;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	741a      	strb	r2, [r3, #16]
  pbc->readptr = buffer;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	609a      	str	r2, [r3, #8]
  pbc->writeptr = buffer;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]
  pbc->entries = 0;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	745a      	strb	r2, [r3, #17]
  pbc->startptr = buffer;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	601a      	str	r2, [r3, #0]
  pbc->endptr = (blt_int8u *)(buffer + length - 1);
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	441a      	add	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	605a      	str	r2, [r3, #4]

  /* return the handle to the successfully created fifo control */
  return pbc->handle;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	7c9b      	ldrb	r3, [r3, #18]
} /*** end of UsbFifoMgrCreate ***/
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	20000d04 	.word	0x20000d04

080095c8 <UsbFifoMgrWrite>:
** \return    BLT_TRUE if the data was successfully stored in the fifo, BLT_FALSE
**            otherwise.
**
****************************************************************************************/
static blt_bool UsbFifoMgrWrite(blt_int8u handle, blt_int8u data)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	460a      	mov	r2, r1
 80095d2:	71fb      	strb	r3, [r7, #7]
 80095d4:	4613      	mov	r3, r2
 80095d6:	71bb      	strb	r3, [r7, #6]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d904      	bls.n	80095e8 <UsbFifoMgrWrite+0x20>
 80095de:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80095e2:	483a      	ldr	r0, [pc, #232]	; (80096cc <UsbFifoMgrWrite+0x104>)
 80095e4:	f000 f910 	bl	8009808 <AssertFailure>
  /* check if fifo is full */
  if (fifoCtrl[handle].entries == fifoCtrl[handle].length)
 80095e8:	79fa      	ldrb	r2, [r7, #7]
 80095ea:	4939      	ldr	r1, [pc, #228]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 80095ec:	4613      	mov	r3, r2
 80095ee:	005b      	lsls	r3, r3, #1
 80095f0:	4413      	add	r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	440b      	add	r3, r1
 80095f6:	3311      	adds	r3, #17
 80095f8:	7819      	ldrb	r1, [r3, #0]
 80095fa:	79fa      	ldrb	r2, [r7, #7]
 80095fc:	4834      	ldr	r0, [pc, #208]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 80095fe:	4613      	mov	r3, r2
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	4413      	add	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	4403      	add	r3, r0
 8009608:	3310      	adds	r3, #16
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	4299      	cmp	r1, r3
 800960e:	d101      	bne.n	8009614 <UsbFifoMgrWrite+0x4c>
  {
    return BLT_FALSE;
 8009610:	2300      	movs	r3, #0
 8009612:	e056      	b.n	80096c2 <UsbFifoMgrWrite+0xfa>
  }
  /* copy data to fifo */
  *fifoCtrl[handle].writeptr = data;
 8009614:	79fa      	ldrb	r2, [r7, #7]
 8009616:	492e      	ldr	r1, [pc, #184]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 8009618:	4613      	mov	r3, r2
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	4413      	add	r3, r2
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	440b      	add	r3, r1
 8009622:	330c      	adds	r3, #12
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	79ba      	ldrb	r2, [r7, #6]
 8009628:	701a      	strb	r2, [r3, #0]
  /* data written so update number of entries */
  fifoCtrl[handle].entries++;
 800962a:	79fa      	ldrb	r2, [r7, #7]
 800962c:	4928      	ldr	r1, [pc, #160]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 800962e:	4613      	mov	r3, r2
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	4413      	add	r3, r2
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	440b      	add	r3, r1
 8009638:	3311      	adds	r3, #17
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	b2d8      	uxtb	r0, r3
 8009640:	4923      	ldr	r1, [pc, #140]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 8009642:	4613      	mov	r3, r2
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	4413      	add	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	440b      	add	r3, r1
 800964c:	3311      	adds	r3, #17
 800964e:	4602      	mov	r2, r0
 8009650:	701a      	strb	r2, [r3, #0]
  /* update write pointer */
  fifoCtrl[handle].writeptr++;
 8009652:	79fa      	ldrb	r2, [r7, #7]
 8009654:	491e      	ldr	r1, [pc, #120]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 8009656:	4613      	mov	r3, r2
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	4413      	add	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	440b      	add	r3, r1
 8009660:	330c      	adds	r3, #12
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	1c59      	adds	r1, r3, #1
 8009666:	481a      	ldr	r0, [pc, #104]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 8009668:	4613      	mov	r3, r2
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	4413      	add	r3, r2
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	4403      	add	r3, r0
 8009672:	330c      	adds	r3, #12
 8009674:	6019      	str	r1, [r3, #0]
  /* check end of fifo */
  if (fifoCtrl[handle].writeptr > fifoCtrl[handle].endptr)
 8009676:	79fa      	ldrb	r2, [r7, #7]
 8009678:	4915      	ldr	r1, [pc, #84]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 800967a:	4613      	mov	r3, r2
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4413      	add	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	440b      	add	r3, r1
 8009684:	330c      	adds	r3, #12
 8009686:	6819      	ldr	r1, [r3, #0]
 8009688:	79fa      	ldrb	r2, [r7, #7]
 800968a:	4811      	ldr	r0, [pc, #68]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 800968c:	4613      	mov	r3, r2
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	4413      	add	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	4403      	add	r3, r0
 8009696:	3304      	adds	r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4299      	cmp	r1, r3
 800969c:	d910      	bls.n	80096c0 <UsbFifoMgrWrite+0xf8>
  {
    /* set write pointer to start of the cyclic fifo */
    fifoCtrl[handle].writeptr = fifoCtrl[handle].startptr;
 800969e:	79f9      	ldrb	r1, [r7, #7]
 80096a0:	79fa      	ldrb	r2, [r7, #7]
 80096a2:	480b      	ldr	r0, [pc, #44]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 80096a4:	460b      	mov	r3, r1
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	440b      	add	r3, r1
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	4403      	add	r3, r0
 80096ae:	6819      	ldr	r1, [r3, #0]
 80096b0:	4807      	ldr	r0, [pc, #28]	; (80096d0 <UsbFifoMgrWrite+0x108>)
 80096b2:	4613      	mov	r3, r2
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4413      	add	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	4403      	add	r3, r0
 80096bc:	330c      	adds	r3, #12
 80096be:	6019      	str	r1, [r3, #0]
  }
  /* still here so all is okay */
  return BLT_TRUE;
 80096c0:	2301      	movs	r3, #1
} /*** end of UsbFifoMgrWrite ***/
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	0800edf0 	.word	0x0800edf0
 80096d0:	20000cd4 	.word	0x20000cd4

080096d4 <UsbFifoMgrRead>:
** \return    BLT_TRUE if the data was successfully read from the fifo, BLT_FALSE
**            otherwise.
**
****************************************************************************************/
static blt_bool UsbFifoMgrRead(blt_int8u handle, blt_int8u *data)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d904      	bls.n	80096f0 <UsbFifoMgrRead+0x1c>
 80096e6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80096ea:	4836      	ldr	r0, [pc, #216]	; (80097c4 <UsbFifoMgrRead+0xf0>)
 80096ec:	f000 f88c 	bl	8009808 <AssertFailure>
  /* check if fifo is empty */
  if (fifoCtrl[handle].entries == 0)
 80096f0:	79fa      	ldrb	r2, [r7, #7]
 80096f2:	4935      	ldr	r1, [pc, #212]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 80096f4:	4613      	mov	r3, r2
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	4413      	add	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	440b      	add	r3, r1
 80096fe:	3311      	adds	r3, #17
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <UsbFifoMgrRead+0x36>
  {
    return BLT_FALSE;
 8009706:	2300      	movs	r3, #0
 8009708:	e057      	b.n	80097ba <UsbFifoMgrRead+0xe6>
  }
  /* read the data */
  *data = *fifoCtrl[handle].readptr;
 800970a:	79fa      	ldrb	r2, [r7, #7]
 800970c:	492e      	ldr	r1, [pc, #184]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 800970e:	4613      	mov	r3, r2
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	4413      	add	r3, r2
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	440b      	add	r3, r1
 8009718:	3308      	adds	r3, #8
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	781a      	ldrb	r2, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	701a      	strb	r2, [r3, #0]
  /* data read so update number of entries */
  fifoCtrl[handle].entries--;
 8009722:	79fa      	ldrb	r2, [r7, #7]
 8009724:	4928      	ldr	r1, [pc, #160]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 8009726:	4613      	mov	r3, r2
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	4413      	add	r3, r2
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	440b      	add	r3, r1
 8009730:	3311      	adds	r3, #17
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	3b01      	subs	r3, #1
 8009736:	b2d8      	uxtb	r0, r3
 8009738:	4923      	ldr	r1, [pc, #140]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 800973a:	4613      	mov	r3, r2
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	4413      	add	r3, r2
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	440b      	add	r3, r1
 8009744:	3311      	adds	r3, #17
 8009746:	4602      	mov	r2, r0
 8009748:	701a      	strb	r2, [r3, #0]
  /* update read pointer */
  fifoCtrl[handle].readptr++;
 800974a:	79fa      	ldrb	r2, [r7, #7]
 800974c:	491e      	ldr	r1, [pc, #120]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 800974e:	4613      	mov	r3, r2
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	4413      	add	r3, r2
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	440b      	add	r3, r1
 8009758:	3308      	adds	r3, #8
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	1c59      	adds	r1, r3, #1
 800975e:	481a      	ldr	r0, [pc, #104]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 8009760:	4613      	mov	r3, r2
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	4413      	add	r3, r2
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	4403      	add	r3, r0
 800976a:	3308      	adds	r3, #8
 800976c:	6019      	str	r1, [r3, #0]
  /* check end of fifo */
  if (fifoCtrl[handle].readptr > fifoCtrl[handle].endptr)
 800976e:	79fa      	ldrb	r2, [r7, #7]
 8009770:	4915      	ldr	r1, [pc, #84]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 8009772:	4613      	mov	r3, r2
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	4413      	add	r3, r2
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	440b      	add	r3, r1
 800977c:	3308      	adds	r3, #8
 800977e:	6819      	ldr	r1, [r3, #0]
 8009780:	79fa      	ldrb	r2, [r7, #7]
 8009782:	4811      	ldr	r0, [pc, #68]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 8009784:	4613      	mov	r3, r2
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	4413      	add	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	4403      	add	r3, r0
 800978e:	3304      	adds	r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4299      	cmp	r1, r3
 8009794:	d910      	bls.n	80097b8 <UsbFifoMgrRead+0xe4>
  {
    /* set read pointer to start of the cyclic fifo */
    fifoCtrl[handle].readptr = fifoCtrl[handle].startptr;
 8009796:	79f9      	ldrb	r1, [r7, #7]
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	480b      	ldr	r0, [pc, #44]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 800979c:	460b      	mov	r3, r1
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	440b      	add	r3, r1
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	4403      	add	r3, r0
 80097a6:	6819      	ldr	r1, [r3, #0]
 80097a8:	4807      	ldr	r0, [pc, #28]	; (80097c8 <UsbFifoMgrRead+0xf4>)
 80097aa:	4613      	mov	r3, r2
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	4413      	add	r3, r2
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	4403      	add	r3, r0
 80097b4:	3308      	adds	r3, #8
 80097b6:	6019      	str	r1, [r3, #0]
  }
  /* still here so all is good */
  return BLT_TRUE;
 80097b8:	2301      	movs	r3, #1
} /*** end of UsbFifoMgrRead ***/
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	0800edf0 	.word	0x0800edf0
 80097c8:	20000cd4 	.word	0x20000cd4

080097cc <UsbFifoMgrScan>:
** \param     handle Identifies the fifo that is to be scanned.
** \return    Number of data entries in the fifo if successful, otherwise 0.
**
****************************************************************************************/
static blt_int8u UsbFifoMgrScan(blt_int8u handle)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	71fb      	strb	r3, [r7, #7]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d904      	bls.n	80097e6 <UsbFifoMgrScan+0x1a>
 80097dc:	f240 2102 	movw	r1, #514	; 0x202
 80097e0:	4807      	ldr	r0, [pc, #28]	; (8009800 <UsbFifoMgrScan+0x34>)
 80097e2:	f000 f811 	bl	8009808 <AssertFailure>
  /* read and return the number of data entries */
  return fifoCtrl[handle].entries;
 80097e6:	79fa      	ldrb	r2, [r7, #7]
 80097e8:	4906      	ldr	r1, [pc, #24]	; (8009804 <UsbFifoMgrScan+0x38>)
 80097ea:	4613      	mov	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4413      	add	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	440b      	add	r3, r1
 80097f4:	3311      	adds	r3, #17
 80097f6:	781b      	ldrb	r3, [r3, #0]
} /*** end of UsbFifoMgrScan ***/
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	0800edf0 	.word	0x0800edf0
 8009804:	20000cd4 	.word	0x20000cd4

08009808 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8009812:	f000 f980 	bl	8009b16 <CopService>
 8009816:	e7fc      	b.n	8009812 <AssertFailure+0xa>

08009818 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 800981c:	4b04      	ldr	r3, [pc, #16]	; (8009830 <BackDoorInit+0x18>)
 800981e:	2201      	movs	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8009822:	f000 f855 	bl	80098d0 <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 8009826:	f000 f805 	bl	8009834 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 800982a:	bf00      	nop
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	200010e8 	.word	0x200010e8

08009834 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8009838:	f000 f956 	bl	8009ae8 <ComIsConnected>
 800983c:	4603      	mov	r3, r0
 800983e:	2b01      	cmp	r3, #1
 8009840:	d01f      	beq.n	8009882 <BackDoorCheck+0x4e>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* check if the file module is busy, indicating that a firmware update through the
   * locally attached storage is in progress. in this case the backdoor stays open
   * anyway, so no need to check if it needs to be closed.
   */
  if (FileIsIdle() == BLT_FALSE)
 8009842:	f000 f98f 	bl	8009b64 <FileIsIdle>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01c      	beq.n	8009886 <BackDoorCheck+0x52>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 800984c:	4b0f      	ldr	r3, [pc, #60]	; (800988c <BackDoorCheck+0x58>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d119      	bne.n	8009888 <BackDoorCheck+0x54>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8009854:	f7ff fc96 	bl	8009184 <TimerGet>
 8009858:	4601      	mov	r1, r0
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <BackDoorCheck+0x5c>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <BackDoorCheck+0x60>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4413      	add	r3, r2
 8009864:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009868:	4299      	cmp	r1, r3
 800986a:	d30d      	bcc.n	8009888 <BackDoorCheck+0x54>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 800986c:	4b07      	ldr	r3, [pc, #28]	; (800988c <BackDoorCheck+0x58>)
 800986e:	2200      	movs	r2, #0
 8009870:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_SYS_ENABLE > 0)
      /* during the timed backdoor no remote update request was detected. now do one
       * last check to see if a firmware update from locally attached storage is
       * pending.
       */
      if (FileHandleFirmwareUpdateRequest() == BLT_FALSE)
 8009872:	f000 f987 	bl	8009b84 <FileHandleFirmwareUpdateRequest>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <BackDoorCheck+0x54>
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 800987c:	f7fe fefc 	bl	8008678 <CpuStartUserProgram>
 8009880:	e002      	b.n	8009888 <BackDoorCheck+0x54>
    return;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <BackDoorCheck+0x54>
    return;
 8009886:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	200010e8 	.word	0x200010e8
 8009890:	200010f0 	.word	0x200010f0
 8009894:	200010ec 	.word	0x200010ec

08009898 <BackDoorSetExtension>:
** \param     extension_ms Extension time in milliseconds.
** \return    none
**
****************************************************************************************/
void BackDoorSetExtension(blt_int32u extension_ms)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* update the extension time */
  backdoorExtensionTime = extension_ms;
 80098a0:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <BackDoorSetExtension+0x1c>)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6013      	str	r3, [r2, #0]
} /*** end of BackDoorSetExtension ***/
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	200010f0 	.word	0x200010f0

080098b8 <BackDoorGetExtension>:
**            (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS) is extended.
** \return    Extension time in milliseconds.
**
****************************************************************************************/
blt_int32u BackDoorGetExtension(void)
{
 80098b8:	b480      	push	{r7}
 80098ba:	af00      	add	r7, sp, #0
  /* read out and reutrn the currently configured extension time */
  return backdoorExtensionTime;
 80098bc:	4b03      	ldr	r3, [pc, #12]	; (80098cc <BackDoorGetExtension+0x14>)
 80098be:	681b      	ldr	r3, [r3, #0]
} /*** end of BackDoorGetExtension ***/
 80098c0:	4618      	mov	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	200010f0 	.word	0x200010f0

080098d0 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 80098d4:	4b05      	ldr	r3, [pc, #20]	; (80098ec <BackDoorRestartTimer+0x1c>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d104      	bne.n	80098e6 <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 80098dc:	f7ff fc52 	bl	8009184 <TimerGet>
 80098e0:	4603      	mov	r3, r0
 80098e2:	4a03      	ldr	r2, [pc, #12]	; (80098f0 <BackDoorRestartTimer+0x20>)
 80098e4:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 80098e6:	bf00      	nop
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	200010e8 	.word	0x200010e8
 80098f0:	200010ec 	.word	0x200010ec

080098f4 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 80098f8:	f7fe feb8 	bl	800866c <CpuInit>
  /* initialize the watchdog */
  CopInit();
 80098fc:	f000 f905 	bl	8009b0a <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8009900:	f7ff fc00 	bl	8009104 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8009904:	f7ff fa66 	bl	8008dd4 <NvmInit>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* initialize the file system module */
  FileInit();
 8009908:	f000 f90c 	bl	8009b24 <FileInit>
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 800990c:	f000 f812 	bl	8009934 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8009910:	f7ff ff82 	bl	8009818 <BackDoorInit>
} /*** end of BootInit ***/
 8009914:	bf00      	nop
 8009916:	bd80      	pop	{r7, pc}

08009918 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 800991c:	f000 f8fb 	bl	8009b16 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8009920:	f7ff fc1a 	bl	8009158 <TimerUpdate>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
 8009924:	f000 f94c 	bl	8009bc0 <FileTask>
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8009928:	f000 f81c 	bl	8009964 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 800992c:	f7ff ff82 	bl	8009834 <BackDoorCheck>
} /*** end of BootTask ***/
 8009930:	bf00      	nop
 8009932:	bd80      	pop	{r7, pc}

08009934 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 8009938:	f000 fe54 	bl	800a5e4 <XcpInit>
#if (BOOT_COM_CAN_ENABLE > 0)
  /* initialize the CAN controller */
  CanInit();
 800993c:	f7fe fd7a 	bl	8008434 <CanInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
 8009940:	4b07      	ldr	r3, [pc, #28]	; (8009960 <ComInit+0x2c>)
 8009942:	2201      	movs	r2, #1
 8009944:	701a      	strb	r2, [r3, #0]
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 8009946:	f7ff fae7 	bl	8008f18 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <ComInit+0x2c>)
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* initialize the USB interface */
  UsbInit();
 8009950:	f7ff fc2a 	bl	80091a8 <UsbInit>
  /* set it as active */
  comActiveInterface = COM_IF_USB;
 8009954:	4b02      	ldr	r3, [pc, #8]	; (8009960 <ComInit+0x2c>)
 8009956:	2202      	movs	r2, #2
 8009958:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 800995a:	bf00      	nop
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	2000000a 	.word	0x2000000a

08009964 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
  blt_int8u xcpPacketLen;
  /* make xcpCtoReqPacket static for runtime efficiency */
  static blt_int8u xcpCtoReqPacket[BOOT_COM_RX_MAX_DATA];

#if (BOOT_COM_CAN_ENABLE > 0)
  if (CanReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 800996a:	1dfb      	adds	r3, r7, #7
 800996c:	4619      	mov	r1, r3
 800996e:	4819      	ldr	r0, [pc, #100]	; (80099d4 <ComTask+0x70>)
 8009970:	f7fe fe3a 	bl	80085e8 <CanReceivePacket>
 8009974:	4603      	mov	r3, r0
 8009976:	2b01      	cmp	r3, #1
 8009978:	d107      	bne.n	800998a <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_CAN;
 800997a:	4b17      	ldr	r3, [pc, #92]	; (80099d8 <ComTask+0x74>)
 800997c:	2201      	movs	r2, #1
 800997e:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	4619      	mov	r1, r3
 8009984:	4813      	ldr	r0, [pc, #76]	; (80099d4 <ComTask+0x70>)
 8009986:	f000 fe6f 	bl	800a668 <XcpPacketReceived>
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 800998a:	1dfb      	adds	r3, r7, #7
 800998c:	4619      	mov	r1, r3
 800998e:	4811      	ldr	r0, [pc, #68]	; (80099d4 <ComTask+0x70>)
 8009990:	f7ff fb12 	bl	8008fb8 <Rs232ReceivePacket>
 8009994:	4603      	mov	r3, r0
 8009996:	2b01      	cmp	r3, #1
 8009998:	d107      	bne.n	80099aa <ComTask+0x46>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_RS232;
 800999a:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <ComTask+0x74>)
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	4619      	mov	r1, r3
 80099a4:	480b      	ldr	r0, [pc, #44]	; (80099d4 <ComTask+0x70>)
 80099a6:	f000 fe5f 	bl	800a668 <XcpPacketReceived>
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  if (UsbReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80099aa:	1dfb      	adds	r3, r7, #7
 80099ac:	4619      	mov	r1, r3
 80099ae:	4809      	ldr	r0, [pc, #36]	; (80099d4 <ComTask+0x70>)
 80099b0:	f7ff fc9c 	bl	80092ec <UsbReceivePacket>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d107      	bne.n	80099ca <ComTask+0x66>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_USB;
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <ComTask+0x74>)
 80099bc:	2202      	movs	r2, #2
 80099be:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	4619      	mov	r1, r3
 80099c4:	4803      	ldr	r0, [pc, #12]	; (80099d4 <ComTask+0x70>)
 80099c6:	f000 fe4f 	bl	800a668 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	200010f4 	.word	0x200010f4
 80099d8:	2000000a 	.word	0x2000000a

080099dc <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
 80099e0:	f7ff fc34 	bl	800924c <UsbFree>
#endif
} /*** end of ComFree ***/
 80099e4:	bf00      	nop
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	807b      	strh	r3, [r7, #2]
#if (BOOT_COM_CAN_ENABLE > 0)
  /* transmit the packet. note that len is limited to 8 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_CAN)
 80099f4:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <ComTransmitPacket+0x54>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d105      	bne.n	8009a08 <ComTransmitPacket+0x20>
  {
    CanTransmitPacket(data, (blt_int8u)len);
 80099fc:	887b      	ldrh	r3, [r7, #2]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fe fda6 	bl	8008554 <CanTransmitPacket>
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8009a08:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <ComTransmitPacket+0x54>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <ComTransmitPacket+0x34>
  {
    Rs232TransmitPacket(data, (blt_int8u)len);
 8009a10:	887b      	ldrh	r3, [r7, #2]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff faa2 	bl	8008f60 <Rs232TransmitPacket>
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* transmit the packet */
  if (comActiveInterface == COM_IF_USB)
 8009a1c:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <ComTransmitPacket+0x54>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d105      	bne.n	8009a30 <ComTransmitPacket+0x48>
  {
    UsbTransmitPacket(data, len);
 8009a24:	887b      	ldrh	r3, [r7, #2]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fc20 	bl	8009270 <UsbTransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8009a30:	f000 fe0c 	bl	800a64c <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	2000000a 	.word	0x2000000a

08009a40 <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8009a46:	4b12      	ldr	r3, [pc, #72]	; (8009a90 <ComGetActiveInterfaceMaxRxLen+0x50>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d816      	bhi.n	8009a7c <ComGetActiveInterfaceMaxRxLen+0x3c>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <ComGetActiveInterfaceMaxRxLen+0x14>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009a65 	.word	0x08009a65
 8009a58:	08009a6b 	.word	0x08009a6b
 8009a5c:	08009a71 	.word	0x08009a71
 8009a60:	08009a77 	.word	0x08009a77
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8009a64:	2381      	movs	r3, #129	; 0x81
 8009a66:	80fb      	strh	r3, [r7, #6]
      break;
 8009a68:	e00b      	b.n	8009a82 <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	80fb      	strh	r3, [r7, #6]
      break;
 8009a6e:	e008      	b.n	8009a82 <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8009a70:	233f      	movs	r3, #63	; 0x3f
 8009a72:	80fb      	strh	r3, [r7, #6]
      break;
 8009a74:	e005      	b.n	8009a82 <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 8009a76:	2300      	movs	r3, #0
 8009a78:	80fb      	strh	r3, [r7, #6]
      break;
 8009a7a:	e002      	b.n	8009a82 <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 8009a7c:	2381      	movs	r3, #129	; 0x81
 8009a7e:	80fb      	strh	r3, [r7, #6]
      break;
 8009a80:	bf00      	nop
  }

  return result;
 8009a82:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	2000000a 	.word	0x2000000a

08009a94 <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8009a9a:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <ComGetActiveInterfaceMaxTxLen+0x50>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d816      	bhi.n	8009ad0 <ComGetActiveInterfaceMaxTxLen+0x3c>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <ComGetActiveInterfaceMaxTxLen+0x14>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009ab9 	.word	0x08009ab9
 8009aac:	08009abf 	.word	0x08009abf
 8009ab0:	08009ac5 	.word	0x08009ac5
 8009ab4:	08009acb 	.word	0x08009acb
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8009ab8:	2381      	movs	r3, #129	; 0x81
 8009aba:	80fb      	strh	r3, [r7, #6]
      break;
 8009abc:	e00b      	b.n	8009ad6 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8009abe:	2308      	movs	r3, #8
 8009ac0:	80fb      	strh	r3, [r7, #6]
      break;
 8009ac2:	e008      	b.n	8009ad6 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8009ac4:	233f      	movs	r3, #63	; 0x3f
 8009ac6:	80fb      	strh	r3, [r7, #6]
      break;
 8009ac8:	e005      	b.n	8009ad6 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8009aca:	2300      	movs	r3, #0
 8009acc:	80fb      	strh	r3, [r7, #6]
      break;
 8009ace:	e002      	b.n	8009ad6 <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 8009ad0:	2381      	movs	r3, #129	; 0x81
 8009ad2:	80fb      	strh	r3, [r7, #6]
      break;
 8009ad4:	bf00      	nop
  }

  return result;
 8009ad6:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	2000000a 	.word	0x2000000a

08009ae8 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8009af2:	f000 fd99 	bl	800a628 <XcpIsConnected>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8009afc:	2301      	movs	r3, #1
 8009afe:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8009b00:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8009b0e:	f7f6 fd77 	bl	8000600 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8009b12:	bf00      	nop
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8009b1a:	f7f6 fd78 	bl	800060e <CopServiceHook>
#endif
} /*** end of CopService ***/
 8009b1e:	bf00      	nop
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <FileInit>:
**            logical disk 0.
** \return    none
**
****************************************************************************************/
void FileInit(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
  FRESULT fresult;

  /* set the initial state */
  firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <FileInit+0x30>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	701a      	strb	r2, [r3, #0]
  /* mount the file system, using logical disk 0 */
  fresult = f_mount(&fatFsObjects.fs, "0:", 0);
 8009b30:	2200      	movs	r2, #0
 8009b32:	4909      	ldr	r1, [pc, #36]	; (8009b58 <FileInit+0x34>)
 8009b34:	4809      	ldr	r0, [pc, #36]	; (8009b5c <FileInit+0x38>)
 8009b36:	f003 fa7f 	bl	800d038 <f_mount>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	71fb      	strb	r3, [r7, #7]
  /* mounting does not access the disk and should succeed unless misconfigured */
  ASSERT_RT(fresult == FR_OK);
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <FileInit+0x28>
 8009b44:	2177      	movs	r1, #119	; 0x77
 8009b46:	4806      	ldr	r0, [pc, #24]	; (8009b60 <FileInit+0x3c>)
 8009b48:	f7ff fe5e 	bl	8009808 <AssertFailure>
} /*** end of FileInit ***/
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20001175 	.word	0x20001175
 8009b58:	0800ee60 	.word	0x0800ee60
 8009b5c:	20001178 	.word	0x20001178
 8009b60:	0800ee64 	.word	0x0800ee64

08009b64 <FileIsIdle>:
**            storage is in progress or not (idle).
** \return    BLT_TRUE when in idle state, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileIsIdle(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 8009b68:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <FileIsIdle+0x1c>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <FileIsIdle+0x10>
  {
    return BLT_TRUE;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e000      	b.n	8009b76 <FileIsIdle+0x12>
  }
  return BLT_FALSE;
 8009b74:	2300      	movs	r3, #0
} /*** end of FileIsIdle ***/
 8009b76:	4618      	mov	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	20001175 	.word	0x20001175

08009b84 <FileHandleFirmwareUpdateRequest>:
**            by transitioning from the IDLE to the STARTING state.
** \return    BLT_TRUE when a firmware update is requested, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileHandleFirmwareUpdateRequest(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
#if (BOOT_COM_ENABLE > 0)
  /* make sure that there is no connection with a remote host to prevent two firmware
   * updates happening at the same time
   */
  if (ComIsConnected() == BLT_TRUE)
 8009b88:	f7ff ffae 	bl	8009ae8 <ComIsConnected>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <FileHandleFirmwareUpdateRequest+0x12>
  {
    return BLT_FALSE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e010      	b.n	8009bb8 <FileHandleFirmwareUpdateRequest+0x34>
  }
#endif
  /* a new firmware update request can only be handled if not already busy with one */
  if (firmwareUpdateState != FIRMWARE_UPDATE_STATE_IDLE)
 8009b96:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <FileHandleFirmwareUpdateRequest+0x38>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <FileHandleFirmwareUpdateRequest+0x1e>
  {
    return BLT_FALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e00a      	b.n	8009bb8 <FileHandleFirmwareUpdateRequest+0x34>
  }
  /* check if a firmware update is requested */
  if (FileIsFirmwareUpdateRequestedHook() == BLT_TRUE)
 8009ba2:	f7f6 fd7f 	bl	80006a4 <FileIsFirmwareUpdateRequestedHook>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d104      	bne.n	8009bb6 <FileHandleFirmwareUpdateRequest+0x32>
  {
    /* transition from IDLE to STARTING state, which kicks off the update sequence */
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_STARTING;
 8009bac:	4b03      	ldr	r3, [pc, #12]	; (8009bbc <FileHandleFirmwareUpdateRequest+0x38>)
 8009bae:	2201      	movs	r2, #1
 8009bb0:	701a      	strb	r2, [r3, #0]
    return BLT_TRUE;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <FileHandleFirmwareUpdateRequest+0x34>
  }
  /* still here so no update request pending */
  return BLT_FALSE;
 8009bb6:	2300      	movs	r3, #0
} /*** end of FileHandleFirmwareUpdateRequest ***/
 8009bb8:	4618      	mov	r0, r3
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20001175 	.word	0x20001175

08009bc0 <FileTask>:
**                 locally attached storage.
** \return    none.
**
****************************************************************************************/
void FileTask(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
  blt_int16s  parse_result = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	80fb      	strh	r3, [r7, #6]
  blt_char   *read_line_ptr;

  /* ------------------------------- idle -------------------------------------------- */
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 8009bca:	4b8a      	ldr	r3, [pc, #552]	; (8009df4 <FileTask+0x234>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 8252 	beq.w	800a078 <FileTask+0x4b8>
  {
    /* currently, nothings need to be done while idling */
  }
  /* ------------------------------- starting ---------------------------------------- */
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_STARTING)
 8009bd4:	4b87      	ldr	r3, [pc, #540]	; (8009df4 <FileTask+0x234>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d131      	bne.n	8009c40 <FileTask+0x80>
  {
    /* reinit the NVM driver because a new firmware update is about the start */
    NvmInit();
 8009bdc:	f7ff f8fa 	bl	8008dd4 <NvmInit>
#if (BOOT_FILE_STARTED_HOOK_ENABLE > 0)
    /* inform application about update started event via hook function */
    FileFirmwareUpdateStartedHook();
 8009be0:	f7f6 fd9a 	bl	8000718 <FileFirmwareUpdateStartedHook>
#endif
#if (BOOT_FILE_LOGGING_ENABLE > 0)
    FileFirmwareUpdateLogHook("Firmware update request detected\n\r");
 8009be4:	4884      	ldr	r0, [pc, #528]	; (8009df8 <FileTask+0x238>)
 8009be6:	f7f6 fdef 	bl	80007c8 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Opening firmware file for reading...");
 8009bea:	4884      	ldr	r0, [pc, #528]	; (8009dfc <FileTask+0x23c>)
 8009bec:	f7f6 fdec 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
    /* attempt to obtain a file object for the firmware file */
    if (f_open(&fatFsObjects.file, FileGetFirmwareFilenameHook(), FA_OPEN_EXISTING | FA_READ) != FR_OK)
 8009bf0:	f7f6 fd88 	bl	8000704 <FileGetFirmwareFilenameHook>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4881      	ldr	r0, [pc, #516]	; (8009e00 <FileTask+0x240>)
 8009bfc:	f003 fa60 	bl	800d0c0 <f_open>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d009      	beq.n	8009c1a <FileTask+0x5a>
    {
      /* cannot continue with firmware update so go back to idle state */
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009c06:	4b7b      	ldr	r3, [pc, #492]	; (8009df4 <FileTask+0x234>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
      /* can't open file */
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("ERROR\n\r");
 8009c0c:	487d      	ldr	r0, [pc, #500]	; (8009e04 <FileTask+0x244>)
 8009c0e:	f7f6 fddb 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_OPEN_FIRMWARE_FILE);
 8009c12:	2001      	movs	r0, #1
 8009c14:	f7f6 fdc4 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
      /* nothing left to do now */
      return;
 8009c18:	e22e      	b.n	800a078 <FileTask+0x4b8>
    }
#if (BOOT_FILE_LOGGING_ENABLE > 0)
    FileFirmwareUpdateLogHook("OK\n\r");
 8009c1a:	487b      	ldr	r0, [pc, #492]	; (8009e08 <FileTask+0x248>)
 8009c1c:	f7f6 fdd4 	bl	80007c8 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Starting the programming sequence\n\r");
 8009c20:	487a      	ldr	r0, [pc, #488]	; (8009e0c <FileTask+0x24c>)
 8009c22:	f7f6 fdd1 	bl	80007c8 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8009c26:	487a      	ldr	r0, [pc, #488]	; (8009e10 <FileTask+0x250>)
 8009c28:	f7f6 fdce 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
    /* prepare data objects for the erasing state */
    eraseInfo.start_address = 0;
 8009c2c:	4b79      	ldr	r3, [pc, #484]	; (8009e14 <FileTask+0x254>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
    eraseInfo.total_size = 0;
 8009c32:	4b78      	ldr	r3, [pc, #480]	; (8009e14 <FileTask+0x254>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]
    /* transition from idle to erasing state */
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_ERASING;
 8009c38:	4b6e      	ldr	r3, [pc, #440]	; (8009df4 <FileTask+0x234>)
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	e21b      	b.n	800a078 <FileTask+0x4b8>
  }
  /* ------------------------------- erasing ----------------------------------------- */
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_ERASING)
 8009c40:	4b6c      	ldr	r3, [pc, #432]	; (8009df4 <FileTask+0x234>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	f040 8155 	bne.w	8009ef4 <FileTask+0x334>
  {
    /* read a line from the file */
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 8009c4a:	4a6d      	ldr	r2, [pc, #436]	; (8009e00 <FileTask+0x240>)
 8009c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c50:	4871      	ldr	r0, [pc, #452]	; (8009e18 <FileTask+0x258>)
 8009c52:	f004 f8a7 	bl	800dda4 <f_gets>
 8009c56:	6038      	str	r0, [r7, #0]
    /* check if an error occurred */
    if (f_error(&fatFsObjects.file) > 0)
 8009c58:	4b70      	ldr	r3, [pc, #448]	; (8009e1c <FileTask+0x25c>)
 8009c5a:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00c      	beq.n	8009c7c <FileTask+0xbc>
    {
      /* cannot continue with firmware update so go back to idle state */
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009c62:	4b64      	ldr	r3, [pc, #400]	; (8009df4 <FileTask+0x234>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("ERROR\n\r");
 8009c68:	4866      	ldr	r0, [pc, #408]	; (8009e04 <FileTask+0x244>)
 8009c6a:	f7f6 fdad 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8009c6e:	2002      	movs	r0, #2
 8009c70:	f7f6 fd96 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
      /* close the file */
      f_close(&fatFsObjects.file);
 8009c74:	4862      	ldr	r0, [pc, #392]	; (8009e00 <FileTask+0x240>)
 8009c76:	f003 fe61 	bl	800d93c <f_close>
      return;
 8009c7a:	e1fd      	b.n	800a078 <FileTask+0x4b8>
    }
    /* parse the S-Record line without copying the data values if the line is not empty */
    if (read_line_ptr != BLT_NULL)
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d018      	beq.n	8009cb4 <FileTask+0xf4>
    {
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, BLT_NULL);
 8009c82:	2200      	movs	r2, #0
 8009c84:	4966      	ldr	r1, [pc, #408]	; (8009e20 <FileTask+0x260>)
 8009c86:	4864      	ldr	r0, [pc, #400]	; (8009e18 <FileTask+0x258>)
 8009c88:	f000 faa6 	bl	800a1d8 <FileSrecParseLine>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	80fb      	strh	r3, [r7, #6]
      /* check parsing result */
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8009c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c98:	d10c      	bne.n	8009cb4 <FileTask+0xf4>
      {
        /* cannot continue with firmware update so go back to idle state */
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009c9a:	4b56      	ldr	r3, [pc, #344]	; (8009df4 <FileTask+0x234>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_LOGGING_ENABLE > 0)
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8009ca0:	4858      	ldr	r0, [pc, #352]	; (8009e04 <FileTask+0x244>)
 8009ca2:	f7f6 fd91 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8009ca6:	2003      	movs	r0, #3
 8009ca8:	f7f6 fd7a 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
        /* close the file */
        f_close(&fatFsObjects.file);
 8009cac:	4854      	ldr	r0, [pc, #336]	; (8009e00 <FileTask+0x240>)
 8009cae:	f003 fe45 	bl	800d93c <f_close>
        return;
 8009cb2:	e1e1      	b.n	800a078 <FileTask+0x4b8>
      }
    }
    /* only process parsing results if the line contained address/data info */
    if (parse_result > 0)
 8009cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd7d      	ble.n	8009db8 <FileTask+0x1f8>
    {
      /* is this the first address/data info we encountered? */
      if (eraseInfo.total_size == 0)
 8009cbc:	4b55      	ldr	r3, [pc, #340]	; (8009e14 <FileTask+0x254>)
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d109      	bne.n	8009cd8 <FileTask+0x118>
      {
        /* store the start_address and byte count */
        eraseInfo.start_address = lineParseObject.address;
 8009cc4:	4b54      	ldr	r3, [pc, #336]	; (8009e18 <FileTask+0x258>)
 8009cc6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009cca:	4a52      	ldr	r2, [pc, #328]	; (8009e14 <FileTask+0x254>)
 8009ccc:	6013      	str	r3, [r2, #0]
        eraseInfo.total_size = parse_result;
 8009cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cd2:	4a50      	ldr	r2, [pc, #320]	; (8009e14 <FileTask+0x254>)
 8009cd4:	6053      	str	r3, [r2, #4]
 8009cd6:	e06f      	b.n	8009db8 <FileTask+0x1f8>
      }
      else
      {
        /* does this data fit at the end of the previously detected program block? */
        if (lineParseObject.address == (eraseInfo.start_address + eraseInfo.total_size))
 8009cd8:	4b4f      	ldr	r3, [pc, #316]	; (8009e18 <FileTask+0x258>)
 8009cda:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8009cde:	4b4d      	ldr	r3, [pc, #308]	; (8009e14 <FileTask+0x254>)
 8009ce0:	6819      	ldr	r1, [r3, #0]
 8009ce2:	4b4c      	ldr	r3, [pc, #304]	; (8009e14 <FileTask+0x254>)
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	440b      	add	r3, r1
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d107      	bne.n	8009cfc <FileTask+0x13c>
        {
          /* update the byte count */
          eraseInfo.total_size += parse_result;
 8009cec:	4b49      	ldr	r3, [pc, #292]	; (8009e14 <FileTask+0x254>)
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4a47      	ldr	r2, [pc, #284]	; (8009e14 <FileTask+0x254>)
 8009cf8:	6053      	str	r3, [r2, #4]
 8009cfa:	e05d      	b.n	8009db8 <FileTask+0x1f8>
          /* data does not belong to the previously detected block so there must be a
           * gap in the data. first erase the currently detected block and then start
           * tracking a new block.
           */
          #if (BOOT_FILE_LOGGING_ENABLE > 0)
          FileFirmwareUpdateLogHook("OK\n\r");
 8009cfc:	4842      	ldr	r0, [pc, #264]	; (8009e08 <FileTask+0x248>)
 8009cfe:	f7f6 fd63 	bl	80007c8 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Erasing ");
 8009d02:	4848      	ldr	r0, [pc, #288]	; (8009e24 <FileTask+0x264>)
 8009d04:	f7f6 fd60 	bl	80007c8 <FileFirmwareUpdateLogHook>
          /* convert size to string  */
          FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 8009d08:	4b42      	ldr	r3, [pc, #264]	; (8009e14 <FileTask+0x254>)
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	4946      	ldr	r1, [pc, #280]	; (8009e28 <FileTask+0x268>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fbe0 	bl	800a4d4 <FileLibLongToIntString>
          FileFirmwareUpdateLogHook(loggingStr);
 8009d14:	4844      	ldr	r0, [pc, #272]	; (8009e28 <FileTask+0x268>)
 8009d16:	f7f6 fd57 	bl	80007c8 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 8009d1a:	4844      	ldr	r0, [pc, #272]	; (8009e2c <FileTask+0x26c>)
 8009d1c:	f7f6 fd54 	bl	80007c8 <FileFirmwareUpdateLogHook>
          /* convert address to hex-string  */
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 8009d20:	4b3c      	ldr	r3, [pc, #240]	; (8009e14 <FileTask+0x254>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	0e1b      	lsrs	r3, r3, #24
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	493f      	ldr	r1, [pc, #252]	; (8009e28 <FileTask+0x268>)
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fbae 	bl	800a48c <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 8009d30:	4b38      	ldr	r3, [pc, #224]	; (8009e14 <FileTask+0x254>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	0c1b      	lsrs	r3, r3, #16
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	493d      	ldr	r1, [pc, #244]	; (8009e30 <FileTask+0x270>)
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fba6 	bl	800a48c <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 8009d40:	4b34      	ldr	r3, [pc, #208]	; (8009e14 <FileTask+0x254>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	0a1b      	lsrs	r3, r3, #8
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	493a      	ldr	r1, [pc, #232]	; (8009e34 <FileTask+0x274>)
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fb9e 	bl	800a48c <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 8009d50:	4b30      	ldr	r3, [pc, #192]	; (8009e14 <FileTask+0x254>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	4938      	ldr	r1, [pc, #224]	; (8009e38 <FileTask+0x278>)
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fb97 	bl	800a48c <FileLibByteToHexString>
          FileFirmwareUpdateLogHook(loggingStr);
 8009d5e:	4832      	ldr	r0, [pc, #200]	; (8009e28 <FileTask+0x268>)
 8009d60:	f7f6 fd32 	bl	80007c8 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("...");
 8009d64:	4835      	ldr	r0, [pc, #212]	; (8009e3c <FileTask+0x27c>)
 8009d66:	f7f6 fd2f 	bl	80007c8 <FileFirmwareUpdateLogHook>
          #endif
          /* still here so we are ready to perform the memory erase operation */
          if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 8009d6a:	4b2a      	ldr	r3, [pc, #168]	; (8009e14 <FileTask+0x254>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a29      	ldr	r2, [pc, #164]	; (8009e14 <FileTask+0x254>)
 8009d70:	6852      	ldr	r2, [r2, #4]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff f843 	bl	8008e00 <NvmErase>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10c      	bne.n	8009d9a <FileTask+0x1da>
          {
            /* cannot continue with firmware update so go back to idle state */
            firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009d80:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <FileTask+0x234>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]
            #if (BOOT_FILE_LOGGING_ENABLE > 0)
            FileFirmwareUpdateLogHook("ERROR\n\r");
 8009d86:	481f      	ldr	r0, [pc, #124]	; (8009e04 <FileTask+0x244>)
 8009d88:	f7f6 fd1e 	bl	80007c8 <FileFirmwareUpdateLogHook>
            #endif
            #if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
            FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8009d8c:	2005      	movs	r0, #5
 8009d8e:	f7f6 fd07 	bl	80007a0 <FileFirmwareUpdateErrorHook>
            #endif
            /* close the file */
            f_close(&fatFsObjects.file);
 8009d92:	481b      	ldr	r0, [pc, #108]	; (8009e00 <FileTask+0x240>)
 8009d94:	f003 fdd2 	bl	800d93c <f_close>
            return;
 8009d98:	e16e      	b.n	800a078 <FileTask+0x4b8>
          }
          #if (BOOT_FILE_LOGGING_ENABLE > 0)
          FileFirmwareUpdateLogHook("OK\n\r");
 8009d9a:	481b      	ldr	r0, [pc, #108]	; (8009e08 <FileTask+0x248>)
 8009d9c:	f7f6 fd14 	bl	80007c8 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8009da0:	481b      	ldr	r0, [pc, #108]	; (8009e10 <FileTask+0x250>)
 8009da2:	f7f6 fd11 	bl	80007c8 <FileFirmwareUpdateLogHook>
          #endif

          /* store the start_address and element count */
          eraseInfo.start_address = lineParseObject.address;
 8009da6:	4b1c      	ldr	r3, [pc, #112]	; (8009e18 <FileTask+0x258>)
 8009da8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009dac:	4a19      	ldr	r2, [pc, #100]	; (8009e14 <FileTask+0x254>)
 8009dae:	6013      	str	r3, [r2, #0]
          eraseInfo.total_size = parse_result;
 8009db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009db4:	4a17      	ldr	r2, [pc, #92]	; (8009e14 <FileTask+0x254>)
 8009db6:	6053      	str	r3, [r2, #4]
        }
      }
    }
    /* check if the end of the file was reached */
    if (f_eof(&fatFsObjects.file) > 0)
 8009db8:	4b18      	ldr	r3, [pc, #96]	; (8009e1c <FileTask+0x25c>)
 8009dba:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8009dbe:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <FileTask+0x25c>)
 8009dc0:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	f040 8157 	bne.w	800a078 <FileTask+0x4b8>
    {
      /* rewind the file in preparation for the programming state */
      if (f_lseek(&fatFsObjects.file, 0) != FR_OK)
 8009dca:	2100      	movs	r1, #0
 8009dcc:	480c      	ldr	r0, [pc, #48]	; (8009e00 <FileTask+0x240>)
 8009dce:	f003 fdd4 	bl	800d97a <f_lseek>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d033      	beq.n	8009e40 <FileTask+0x280>
      {
        /* cannot continue with firmware update so go back to idle state */
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009dd8:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <FileTask+0x234>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_LOGGING_ENABLE > 0)
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8009dde:	4809      	ldr	r0, [pc, #36]	; (8009e04 <FileTask+0x244>)
 8009de0:	f7f6 fcf2 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
        FileFirmwareUpdateErrorHook(FILE_ERROR_REWINDING_FILE_READ_POINTER);
 8009de4:	2004      	movs	r0, #4
 8009de6:	f7f6 fcdb 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
        /* close the file */
        f_close(&fatFsObjects.file);
 8009dea:	4805      	ldr	r0, [pc, #20]	; (8009e00 <FileTask+0x240>)
 8009dec:	f003 fda6 	bl	800d93c <f_close>
        return;
 8009df0:	e142      	b.n	800a078 <FileTask+0x4b8>
 8009df2:	bf00      	nop
 8009df4:	20001175 	.word	0x20001175
 8009df8:	0800eec4 	.word	0x0800eec4
 8009dfc:	0800eee8 	.word	0x0800eee8
 8009e00:	200013a8 	.word	0x200013a8
 8009e04:	0800ef10 	.word	0x0800ef10
 8009e08:	0800ef18 	.word	0x0800ef18
 8009e0c:	0800ef20 	.word	0x0800ef20
 8009e10:	0800ef44 	.word	0x0800ef44
 8009e14:	20001754 	.word	0x20001754
 8009e18:	200015d0 	.word	0x200015d0
 8009e1c:	20001178 	.word	0x20001178
 8009e20:	20001750 	.word	0x20001750
 8009e24:	0800ef74 	.word	0x0800ef74
 8009e28:	2000175c 	.word	0x2000175c
 8009e2c:	0800ef80 	.word	0x0800ef80
 8009e30:	2000175e 	.word	0x2000175e
 8009e34:	20001760 	.word	0x20001760
 8009e38:	20001762 	.word	0x20001762
 8009e3c:	0800ef9c 	.word	0x0800ef9c
      }
      /* still here so we are ready to perform the last memory erase operation, if there
       * is still something left to erase.
       */
      if (eraseInfo.total_size > 0)
 8009e40:	4b8f      	ldr	r3, [pc, #572]	; (800a080 <FileTask+0x4c0>)
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d04e      	beq.n	8009ee6 <FileTask+0x326>
      {
        #if (BOOT_FILE_LOGGING_ENABLE > 0)
        FileFirmwareUpdateLogHook("OK\n\r");
 8009e48:	488e      	ldr	r0, [pc, #568]	; (800a084 <FileTask+0x4c4>)
 8009e4a:	f7f6 fcbd 	bl	80007c8 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("Erasing ");
 8009e4e:	488e      	ldr	r0, [pc, #568]	; (800a088 <FileTask+0x4c8>)
 8009e50:	f7f6 fcba 	bl	80007c8 <FileFirmwareUpdateLogHook>
        /* convert size to string  */
        FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 8009e54:	4b8a      	ldr	r3, [pc, #552]	; (800a080 <FileTask+0x4c0>)
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	498c      	ldr	r1, [pc, #560]	; (800a08c <FileTask+0x4cc>)
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fb3a 	bl	800a4d4 <FileLibLongToIntString>
        FileFirmwareUpdateLogHook(loggingStr);
 8009e60:	488a      	ldr	r0, [pc, #552]	; (800a08c <FileTask+0x4cc>)
 8009e62:	f7f6 fcb1 	bl	80007c8 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 8009e66:	488a      	ldr	r0, [pc, #552]	; (800a090 <FileTask+0x4d0>)
 8009e68:	f7f6 fcae 	bl	80007c8 <FileFirmwareUpdateLogHook>
        /* convert address to hex-string  */
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 8009e6c:	4b84      	ldr	r3, [pc, #528]	; (800a080 <FileTask+0x4c0>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	0e1b      	lsrs	r3, r3, #24
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	4985      	ldr	r1, [pc, #532]	; (800a08c <FileTask+0x4cc>)
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 fb08 	bl	800a48c <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 8009e7c:	4b80      	ldr	r3, [pc, #512]	; (800a080 <FileTask+0x4c0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	0c1b      	lsrs	r3, r3, #16
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	4983      	ldr	r1, [pc, #524]	; (800a094 <FileTask+0x4d4>)
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fb00 	bl	800a48c <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 8009e8c:	4b7c      	ldr	r3, [pc, #496]	; (800a080 <FileTask+0x4c0>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	4980      	ldr	r1, [pc, #512]	; (800a098 <FileTask+0x4d8>)
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 faf8 	bl	800a48c <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 8009e9c:	4b78      	ldr	r3, [pc, #480]	; (800a080 <FileTask+0x4c0>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	497e      	ldr	r1, [pc, #504]	; (800a09c <FileTask+0x4dc>)
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 faf1 	bl	800a48c <FileLibByteToHexString>
        FileFirmwareUpdateLogHook(loggingStr);
 8009eaa:	4878      	ldr	r0, [pc, #480]	; (800a08c <FileTask+0x4cc>)
 8009eac:	f7f6 fc8c 	bl	80007c8 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("...");
 8009eb0:	487b      	ldr	r0, [pc, #492]	; (800a0a0 <FileTask+0x4e0>)
 8009eb2:	f7f6 fc89 	bl	80007c8 <FileFirmwareUpdateLogHook>
        #endif
        if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 8009eb6:	4b72      	ldr	r3, [pc, #456]	; (800a080 <FileTask+0x4c0>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a71      	ldr	r2, [pc, #452]	; (800a080 <FileTask+0x4c0>)
 8009ebc:	6852      	ldr	r2, [r2, #4]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe ff9d 	bl	8008e00 <NvmErase>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10c      	bne.n	8009ee6 <FileTask+0x326>
        {
          /* cannot continue with firmware update so go back to idle state */
          firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009ecc:	4b75      	ldr	r3, [pc, #468]	; (800a0a4 <FileTask+0x4e4>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	701a      	strb	r2, [r3, #0]
          #if (BOOT_FILE_LOGGING_ENABLE > 0)
          FileFirmwareUpdateLogHook("ERROR\n\r");
 8009ed2:	4875      	ldr	r0, [pc, #468]	; (800a0a8 <FileTask+0x4e8>)
 8009ed4:	f7f6 fc78 	bl	80007c8 <FileFirmwareUpdateLogHook>
          #endif
          #if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
          FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8009ed8:	2005      	movs	r0, #5
 8009eda:	f7f6 fc61 	bl	80007a0 <FileFirmwareUpdateErrorHook>
          #endif
          /* close the file */
          f_close(&fatFsObjects.file);
 8009ede:	4873      	ldr	r0, [pc, #460]	; (800a0ac <FileTask+0x4ec>)
 8009ee0:	f003 fd2c 	bl	800d93c <f_close>
          return;
 8009ee4:	e0c8      	b.n	800a078 <FileTask+0x4b8>
        }
      }
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("OK\n\r");
 8009ee6:	4867      	ldr	r0, [pc, #412]	; (800a084 <FileTask+0x4c4>)
 8009ee8:	f7f6 fc6e 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
      /* all okay, then go to programming state */
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_PROGRAMMING;
 8009eec:	4b6d      	ldr	r3, [pc, #436]	; (800a0a4 <FileTask+0x4e4>)
 8009eee:	2203      	movs	r2, #3
 8009ef0:	701a      	strb	r2, [r3, #0]
 8009ef2:	e0c1      	b.n	800a078 <FileTask+0x4b8>
    }
  }
  /* ------------------------------- programming ------------------------------------- */
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_PROGRAMMING)
 8009ef4:	4b6b      	ldr	r3, [pc, #428]	; (800a0a4 <FileTask+0x4e4>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	f040 80bd 	bne.w	800a078 <FileTask+0x4b8>
  {
    /* read a line from the file */
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 8009efe:	4a6b      	ldr	r2, [pc, #428]	; (800a0ac <FileTask+0x4ec>)
 8009f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f04:	486a      	ldr	r0, [pc, #424]	; (800a0b0 <FileTask+0x4f0>)
 8009f06:	f003 ff4d 	bl	800dda4 <f_gets>
 8009f0a:	6038      	str	r0, [r7, #0]
    /* check if an error occurred */
    if (f_error(&fatFsObjects.file) > 0)
 8009f0c:	4b69      	ldr	r3, [pc, #420]	; (800a0b4 <FileTask+0x4f4>)
 8009f0e:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00c      	beq.n	8009f30 <FileTask+0x370>
    {
      /* cannot continue with firmware update so go back to idle state */
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009f16:	4b63      	ldr	r3, [pc, #396]	; (800a0a4 <FileTask+0x4e4>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("Reading line from file...ERROR\n\r");
 8009f1c:	4866      	ldr	r0, [pc, #408]	; (800a0b8 <FileTask+0x4f8>)
 8009f1e:	f7f6 fc53 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8009f22:	2002      	movs	r0, #2
 8009f24:	f7f6 fc3c 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
      /* close the file */
      f_close(&fatFsObjects.file);
 8009f28:	4860      	ldr	r0, [pc, #384]	; (800a0ac <FileTask+0x4ec>)
 8009f2a:	f003 fd07 	bl	800d93c <f_close>
      return;
 8009f2e:	e0a3      	b.n	800a078 <FileTask+0x4b8>
    }
    /* parse the S-Record line if the line is not empty */
    if (read_line_ptr != BLT_NULL)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d018      	beq.n	8009f68 <FileTask+0x3a8>
    {
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, lineParseObject.data);
 8009f36:	4a61      	ldr	r2, [pc, #388]	; (800a0bc <FileTask+0x4fc>)
 8009f38:	4961      	ldr	r1, [pc, #388]	; (800a0c0 <FileTask+0x500>)
 8009f3a:	485d      	ldr	r0, [pc, #372]	; (800a0b0 <FileTask+0x4f0>)
 8009f3c:	f000 f94c 	bl	800a1d8 <FileSrecParseLine>
 8009f40:	4603      	mov	r3, r0
 8009f42:	80fb      	strh	r3, [r7, #6]
      /* check parsing result */
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8009f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4c:	d10c      	bne.n	8009f68 <FileTask+0x3a8>
      {
        /* cannot continue with firmware update so go back to idle state */
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009f4e:	4b55      	ldr	r3, [pc, #340]	; (800a0a4 <FileTask+0x4e4>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_LOGGING_ENABLE > 0)
        FileFirmwareUpdateLogHook("Invalid checksum found...ERROR\n\r");
 8009f54:	485b      	ldr	r0, [pc, #364]	; (800a0c4 <FileTask+0x504>)
 8009f56:	f7f6 fc37 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8009f5a:	2003      	movs	r0, #3
 8009f5c:	f7f6 fc20 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
        /* close the file */
        f_close(&fatFsObjects.file);
 8009f60:	4852      	ldr	r0, [pc, #328]	; (800a0ac <FileTask+0x4ec>)
 8009f62:	f003 fceb 	bl	800d93c <f_close>
        return;
 8009f66:	e087      	b.n	800a078 <FileTask+0x4b8>
      }
    }
    /* only process parsing results if the line contained address/data info */
    if (parse_result > 0)
 8009f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd53      	ble.n	800a018 <FileTask+0x458>
    {
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("Programming ");
 8009f70:	4855      	ldr	r0, [pc, #340]	; (800a0c8 <FileTask+0x508>)
 8009f72:	f7f6 fc29 	bl	80007c8 <FileFirmwareUpdateLogHook>
      /* convert size to string  */
      FileLibLongToIntString(parse_result, loggingStr);
 8009f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f7a:	4944      	ldr	r1, [pc, #272]	; (800a08c <FileTask+0x4cc>)
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 faa9 	bl	800a4d4 <FileLibLongToIntString>
      FileFirmwareUpdateLogHook(loggingStr);
 8009f82:	4842      	ldr	r0, [pc, #264]	; (800a08c <FileTask+0x4cc>)
 8009f84:	f7f6 fc20 	bl	80007c8 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook(" bytes to memory at 0x");
 8009f88:	4850      	ldr	r0, [pc, #320]	; (800a0cc <FileTask+0x50c>)
 8009f8a:	f7f6 fc1d 	bl	80007c8 <FileFirmwareUpdateLogHook>
      /* convert address to hex-string  */
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 24), &loggingStr[0]);
 8009f8e:	4b48      	ldr	r3, [pc, #288]	; (800a0b0 <FileTask+0x4f0>)
 8009f90:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009f94:	0e1b      	lsrs	r3, r3, #24
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	493c      	ldr	r1, [pc, #240]	; (800a08c <FileTask+0x4cc>)
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 fa76 	bl	800a48c <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 16), &loggingStr[2]);
 8009fa0:	4b43      	ldr	r3, [pc, #268]	; (800a0b0 <FileTask+0x4f0>)
 8009fa2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009fa6:	0c1b      	lsrs	r3, r3, #16
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	493a      	ldr	r1, [pc, #232]	; (800a094 <FileTask+0x4d4>)
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fa6d 	bl	800a48c <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 8), &loggingStr[4]);
 8009fb2:	4b3f      	ldr	r3, [pc, #252]	; (800a0b0 <FileTask+0x4f0>)
 8009fb4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009fb8:	0a1b      	lsrs	r3, r3, #8
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	4936      	ldr	r1, [pc, #216]	; (800a098 <FileTask+0x4d8>)
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fa64 	bl	800a48c <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)lineParseObject.address, &loggingStr[6]);
 8009fc4:	4b3a      	ldr	r3, [pc, #232]	; (800a0b0 <FileTask+0x4f0>)
 8009fc6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	4933      	ldr	r1, [pc, #204]	; (800a09c <FileTask+0x4dc>)
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 fa5c 	bl	800a48c <FileLibByteToHexString>
      FileFirmwareUpdateLogHook(loggingStr);
 8009fd4:	482d      	ldr	r0, [pc, #180]	; (800a08c <FileTask+0x4cc>)
 8009fd6:	f7f6 fbf7 	bl	80007c8 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("...");
 8009fda:	4831      	ldr	r0, [pc, #196]	; (800a0a0 <FileTask+0x4e0>)
 8009fdc:	f7f6 fbf4 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
      /* program the data */
      if (NvmWrite(lineParseObject.address, parse_result, lineParseObject.data) == BLT_FALSE)
 8009fe0:	4b33      	ldr	r3, [pc, #204]	; (800a0b0 <FileTask+0x4f0>)
 8009fe2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009fe6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009fea:	4a34      	ldr	r2, [pc, #208]	; (800a0bc <FileTask+0x4fc>)
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fe fef7 	bl	8008de0 <NvmWrite>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10c      	bne.n	800a012 <FileTask+0x452>
      {
        /* cannot continue with firmware update so go back to idle state */
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8009ff8:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <FileTask+0x4e4>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_LOGGING_ENABLE > 0)
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8009ffe:	482a      	ldr	r0, [pc, #168]	; (800a0a8 <FileTask+0x4e8>)
 800a000:	f7f6 fbe2 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_PROGRAM_MEMORY);
 800a004:	2006      	movs	r0, #6
 800a006:	f7f6 fbcb 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
        /* close the file */
        f_close(&fatFsObjects.file);
 800a00a:	4828      	ldr	r0, [pc, #160]	; (800a0ac <FileTask+0x4ec>)
 800a00c:	f003 fc96 	bl	800d93c <f_close>
        return;
 800a010:	e032      	b.n	800a078 <FileTask+0x4b8>
      }
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("OK\n\r");
 800a012:	481c      	ldr	r0, [pc, #112]	; (800a084 <FileTask+0x4c4>)
 800a014:	f7f6 fbd8 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
    }
    /* check if the end of the file was reached */
    if (f_eof(&fatFsObjects.file) > 0)
 800a018:	4b26      	ldr	r3, [pc, #152]	; (800a0b4 <FileTask+0x4f4>)
 800a01a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800a01e:	4b25      	ldr	r3, [pc, #148]	; (800a0b4 <FileTask+0x4f4>)
 800a020:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800a024:	429a      	cmp	r2, r3
 800a026:	d127      	bne.n	800a078 <FileTask+0x4b8>
    {
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("Writing program checksum...");
 800a028:	4829      	ldr	r0, [pc, #164]	; (800a0d0 <FileTask+0x510>)
 800a02a:	f7f6 fbcd 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
      /* finish the programming by writing the checksum */
      if (NvmDone() == BLT_FALSE)
 800a02e:	f7fe ff03 	bl	8008e38 <NvmDone>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10c      	bne.n	800a052 <FileTask+0x492>
      {
        /* cannot continue with firmware update so go back to idle state */
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 800a038:	4b1a      	ldr	r3, [pc, #104]	; (800a0a4 <FileTask+0x4e4>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_LOGGING_ENABLE > 0)
        FileFirmwareUpdateLogHook("ERROR\n\r");
 800a03e:	481a      	ldr	r0, [pc, #104]	; (800a0a8 <FileTask+0x4e8>)
 800a040:	f7f6 fbc2 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
#if (BOOT_FILE_ERROR_HOOK_ENABLE > 0)
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_WRITE_CHECKSUM);
 800a044:	2007      	movs	r0, #7
 800a046:	f7f6 fbab 	bl	80007a0 <FileFirmwareUpdateErrorHook>
#endif
        /* close the file */
        f_close(&fatFsObjects.file);
 800a04a:	4818      	ldr	r0, [pc, #96]	; (800a0ac <FileTask+0x4ec>)
 800a04c:	f003 fc76 	bl	800d93c <f_close>
        return;
 800a050:	e012      	b.n	800a078 <FileTask+0x4b8>
      }
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("OK\n\r");
 800a052:	480c      	ldr	r0, [pc, #48]	; (800a084 <FileTask+0x4c4>)
 800a054:	f7f6 fbb8 	bl	80007c8 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("Closing firmware file\n\r");
 800a058:	481e      	ldr	r0, [pc, #120]	; (800a0d4 <FileTask+0x514>)
 800a05a:	f7f6 fbb5 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
      /* close the file */
      f_close(&fatFsObjects.file);
 800a05e:	4813      	ldr	r0, [pc, #76]	; (800a0ac <FileTask+0x4ec>)
 800a060:	f003 fc6c 	bl	800d93c <f_close>
#if (BOOT_FILE_LOGGING_ENABLE > 0)
      FileFirmwareUpdateLogHook("Firmware update successfully completed\n\r");
 800a064:	481c      	ldr	r0, [pc, #112]	; (800a0d8 <FileTask+0x518>)
 800a066:	f7f6 fbaf 	bl	80007c8 <FileFirmwareUpdateLogHook>
#endif
      /* all done so transistion back to idle mode */
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 800a06a:	4b0e      	ldr	r3, [pc, #56]	; (800a0a4 <FileTask+0x4e4>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	701a      	strb	r2, [r3, #0]
#if (BOOT_FILE_COMPLETED_HOOK_ENABLE > 0)
      /* inform application about update completed event via hook function */
      FileFirmwareUpdateCompletedHook();
 800a070:	f7f6 fb6a 	bl	8000748 <FileFirmwareUpdateCompletedHook>
#endif
      /* attempt to start the user program now that programming is done */
      CpuStartUserProgram();
 800a074:	f7fe fb00 	bl	8008678 <CpuStartUserProgram>
    }
  }
} /*** end of FileTask ***/
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20001754 	.word	0x20001754
 800a084:	0800ef18 	.word	0x0800ef18
 800a088:	0800ef74 	.word	0x0800ef74
 800a08c:	2000175c 	.word	0x2000175c
 800a090:	0800ef80 	.word	0x0800ef80
 800a094:	2000175e 	.word	0x2000175e
 800a098:	20001760 	.word	0x20001760
 800a09c:	20001762 	.word	0x20001762
 800a0a0:	0800ef9c 	.word	0x0800ef9c
 800a0a4:	20001175 	.word	0x20001175
 800a0a8:	0800ef10 	.word	0x0800ef10
 800a0ac:	200013a8 	.word	0x200013a8
 800a0b0:	200015d0 	.word	0x200015d0
 800a0b4:	20001178 	.word	0x20001178
 800a0b8:	0800efa0 	.word	0x0800efa0
 800a0bc:	200016d0 	.word	0x200016d0
 800a0c0:	20001750 	.word	0x20001750
 800a0c4:	0800efc4 	.word	0x0800efc4
 800a0c8:	0800efe8 	.word	0x0800efe8
 800a0cc:	0800eff8 	.word	0x0800eff8
 800a0d0:	0800f010 	.word	0x0800f010
 800a0d4:	0800f02c 	.word	0x0800f02c
 800a0d8:	0800f044 	.word	0x0800f044

0800a0dc <FileSrecGetLineType>:
** \param     line A line from the S-Record.
** \return    the S-Record line type.
**
****************************************************************************************/
tSrecLineType FileSrecGetLineType(const blt_char *line)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* check if the line starts with the 'S' character, followed by a digit */
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	81fb      	strh	r3, [r7, #14]
 800a0ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	4a1b      	ldr	r2, [pc, #108]	; (800a160 <FileSrecGetLineType+0x84>)
 800a0f2:	4413      	add	r3, r2
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d103      	bne.n	800a106 <FileSrecGetLineType+0x2a>
 800a0fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a102:	3b20      	subs	r3, #32
 800a104:	e001      	b.n	800a10a <FileSrecGetLineType+0x2e>
 800a106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a10a:	2b53      	cmp	r3, #83	; 0x53
 800a10c:	d10a      	bne.n	800a124 <FileSrecGetLineType+0x48>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3301      	adds	r3, #1
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a12      	ldr	r2, [pc, #72]	; (800a160 <FileSrecGetLineType+0x84>)
 800a118:	4413      	add	r3, r2
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	f003 0304 	and.w	r3, r3, #4
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <FileSrecGetLineType+0x4c>
  {
    /* not a valid S-Record line type */
    return LINE_TYPE_UNSUPPORTED;
 800a124:	2303      	movs	r3, #3
 800a126:	e015      	b.n	800a154 <FileSrecGetLineType+0x78>
  }
  /* determine the line type */
  if (line[1] == '1')
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3301      	adds	r3, #1
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b31      	cmp	r3, #49	; 0x31
 800a130:	d101      	bne.n	800a136 <FileSrecGetLineType+0x5a>
  {
    return LINE_TYPE_S1;
 800a132:	2300      	movs	r3, #0
 800a134:	e00e      	b.n	800a154 <FileSrecGetLineType+0x78>
  }
  if (line[1] == '2')
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3301      	adds	r3, #1
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b32      	cmp	r3, #50	; 0x32
 800a13e:	d101      	bne.n	800a144 <FileSrecGetLineType+0x68>
  {
    return LINE_TYPE_S2;
 800a140:	2301      	movs	r3, #1
 800a142:	e007      	b.n	800a154 <FileSrecGetLineType+0x78>
  }
  if (line[1] == '3')
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3301      	adds	r3, #1
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b33      	cmp	r3, #51	; 0x33
 800a14c:	d101      	bne.n	800a152 <FileSrecGetLineType+0x76>
  {
    return LINE_TYPE_S3;
 800a14e:	2302      	movs	r3, #2
 800a150:	e000      	b.n	800a154 <FileSrecGetLineType+0x78>
  }
  /* still here so not a supported line type found */
  return LINE_TYPE_UNSUPPORTED;
 800a152:	2303      	movs	r3, #3
} /*** end of FileSrecGetLineType ***/
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	0800f608 	.word	0x0800f608

0800a164 <FileSrecVerifyChecksum>:
** \param     line An S1, S2 or S3 line from the S-Record.
** \return    BLT_TRUE if the checksum is correct, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileSrecVerifyChecksum(const blt_char *line)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  blt_int16u bytes_on_line;
  blt_int8u  checksum = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	737b      	strb	r3, [r7, #13]

  /* adjust pointer to point to byte count value */
  line += 2;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	3302      	adds	r3, #2
 800a174:	607b      	str	r3, [r7, #4]
  /* read out the number of byte values that follow on the line */
  bytes_on_line = FileLibHexStringToByte(line);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f9e8 	bl	800a54c <FileLibHexStringToByte>
 800a17c:	4603      	mov	r3, r0
 800a17e:	81fb      	strh	r3, [r7, #14]
  /* byte count is part of checksum */
  checksum += bytes_on_line;
 800a180:	89fb      	ldrh	r3, [r7, #14]
 800a182:	b2da      	uxtb	r2, r3
 800a184:	7b7b      	ldrb	r3, [r7, #13]
 800a186:	4413      	add	r3, r2
 800a188:	737b      	strb	r3, [r7, #13]
  /* adjust pointer to the first byte of the address */
  line += 2;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3302      	adds	r3, #2
 800a18e:	607b      	str	r3, [r7, #4]
  /* add byte values of address and data, but not the final checksum */
  do
  {
    /* add the next byte value to the checksum */
    checksum += FileLibHexStringToByte(line);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f9db 	bl	800a54c <FileLibHexStringToByte>
 800a196:	4603      	mov	r3, r0
 800a198:	461a      	mov	r2, r3
 800a19a:	7b7b      	ldrb	r3, [r7, #13]
 800a19c:	4413      	add	r3, r2
 800a19e:	737b      	strb	r3, [r7, #13]
    /* update counter */
    bytes_on_line--;
 800a1a0:	89fb      	ldrh	r3, [r7, #14]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	81fb      	strh	r3, [r7, #14]
    /* point to next hex string in the line */
    line += 2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	607b      	str	r3, [r7, #4]
  }
  while (bytes_on_line > 1);
 800a1ac:	89fb      	ldrh	r3, [r7, #14]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d8ee      	bhi.n	800a190 <FileSrecVerifyChecksum+0x2c>
  /* the checksum is calculated by summing up the values of the byte count, address and
   * databytes and then taking the 1-complement of the sum's least signigicant byte */
  checksum = ~checksum;
 800a1b2:	7b7b      	ldrb	r3, [r7, #13]
 800a1b4:	43db      	mvns	r3, r3
 800a1b6:	737b      	strb	r3, [r7, #13]
  /* finally verify the calculated checksum with the one at the end of the line */
  if (checksum != FileLibHexStringToByte(line))
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f9c7 	bl	800a54c <FileLibHexStringToByte>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	7b7b      	ldrb	r3, [r7, #13]
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d001      	beq.n	800a1cc <FileSrecVerifyChecksum+0x68>
  {
    /* checksum incorrect */
    return BLT_FALSE;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e000      	b.n	800a1ce <FileSrecVerifyChecksum+0x6a>
  }
  /* still here so the checksum was correct */
  return BLT_TRUE;
 800a1cc:	2301      	movs	r3, #1
} /*** end of FileSrecVerifyChecksum ***/
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <FileSrecParseLine>:
**            the line is not an S1, S2 or S3 line or ERROR_SREC_INVALID_CHECKSUM
**            in case the checksum validation failed.
**
****************************************************************************************/
blt_int16s FileSrecParseLine(const blt_char *line, blt_addr *address, blt_int8u *data)
{
 800a1d8:	b590      	push	{r4, r7, lr}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  tSrecLineType lineType;
  blt_int16s    data_byte_count = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	82fb      	strh	r3, [r7, #22]
  blt_int16u    bytes_on_line;
  blt_int16u    i;

  /* check pointers and not that data can be a null pointer */
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <FileSrecParseLine+0x1c>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <FileSrecParseLine+0x26>
 800a1f4:	f240 2163 	movw	r1, #611	; 0x263
 800a1f8:	488c      	ldr	r0, [pc, #560]	; (800a42c <FileSrecParseLine+0x254>)
 800a1fa:	f7ff fb05 	bl	8009808 <AssertFailure>
  /* figure out what type of line we are dealing with */
  lineType = FileSrecGetLineType(line);
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7ff ff6c 	bl	800a0dc <FileSrecGetLineType>
 800a204:	4603      	mov	r3, r0
 800a206:	74fb      	strb	r3, [r7, #19]
  /* make sure it is one that we can parse */
  if (lineType == LINE_TYPE_UNSUPPORTED)
 800a208:	7cfb      	ldrb	r3, [r7, #19]
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d101      	bne.n	800a212 <FileSrecParseLine+0x3a>
  {
    /* not a parsing error, but simply no data on this line */
    return 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	e108      	b.n	800a424 <FileSrecParseLine+0x24c>
  }
  /* verify the checksum */
  if (FileSrecVerifyChecksum(line) == BLT_FALSE)
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff ffa6 	bl	800a164 <FileSrecVerifyChecksum>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d102      	bne.n	800a224 <FileSrecParseLine+0x4c>
  {
    /* error on data line encountered */
    return ERROR_SREC_INVALID_CHECKSUM;
 800a21e:	f04f 33ff 	mov.w	r3, #4294967295
 800a222:	e0ff      	b.n	800a424 <FileSrecParseLine+0x24c>
  }
  /* all good so far, now read out the address and databytes for the line */
  switch (lineType)
 800a224:	7cfb      	ldrb	r3, [r7, #19]
 800a226:	2b02      	cmp	r3, #2
 800a228:	f000 8098 	beq.w	800a35c <FileSrecParseLine+0x184>
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	f300 80f0 	bgt.w	800a412 <FileSrecParseLine+0x23a>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d002      	beq.n	800a23c <FileSrecParseLine+0x64>
 800a236:	2b01      	cmp	r3, #1
 800a238:	d042      	beq.n	800a2c0 <FileSrecParseLine+0xe8>
        }
      }
      break;

    default:
      break;
 800a23a:	e0ea      	b.n	800a412 <FileSrecParseLine+0x23a>
      line += 2;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3302      	adds	r3, #2
 800a240:	60fb      	str	r3, [r7, #12]
      bytes_on_line = FileLibHexStringToByte(line);
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f982 	bl	800a54c <FileLibHexStringToByte>
 800a248:	4603      	mov	r3, r0
 800a24a:	823b      	strh	r3, [r7, #16]
      line += 2;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3302      	adds	r3, #2
 800a250:	60fb      	str	r3, [r7, #12]
      *address = FileLibHexStringToByte(line) << 8;
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f97a 	bl	800a54c <FileLibHexStringToByte>
 800a258:	4603      	mov	r3, r0
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	461a      	mov	r2, r3
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	601a      	str	r2, [r3, #0]
      line += 2;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3302      	adds	r3, #2
 800a266:	60fb      	str	r3, [r7, #12]
      *address += FileLibHexStringToByte(line);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 f96f 	bl	800a54c <FileLibHexStringToByte>
 800a26e:	4603      	mov	r3, r0
 800a270:	461a      	mov	r2, r3
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	441a      	add	r2, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	601a      	str	r2, [r3, #0]
      line += 2;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3302      	adds	r3, #2
 800a280:	60fb      	str	r3, [r7, #12]
      data_byte_count = bytes_on_line - 3; /* -2 bytes address, -1 byte checksum */
 800a282:	8a3b      	ldrh	r3, [r7, #16]
 800a284:	3b03      	subs	r3, #3
 800a286:	b29b      	uxth	r3, r3
 800a288:	82fb      	strh	r3, [r7, #22]
      if (data != BLT_NULL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 80c2 	beq.w	800a416 <FileSrecParseLine+0x23e>
        for (i=0; i<data_byte_count; i++)
 800a292:	2300      	movs	r3, #0
 800a294:	82bb      	strh	r3, [r7, #20]
 800a296:	e00d      	b.n	800a2b4 <FileSrecParseLine+0xdc>
          data[i] = FileLibHexStringToByte(line);
 800a298:	8abb      	ldrh	r3, [r7, #20]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	18d4      	adds	r4, r2, r3
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 f954 	bl	800a54c <FileLibHexStringToByte>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	7023      	strb	r3, [r4, #0]
          line += 2;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3302      	adds	r3, #2
 800a2ac:	60fb      	str	r3, [r7, #12]
        for (i=0; i<data_byte_count; i++)
 800a2ae:	8abb      	ldrh	r3, [r7, #20]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	82bb      	strh	r3, [r7, #20]
 800a2b4:	8aba      	ldrh	r2, [r7, #20]
 800a2b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	dbec      	blt.n	800a298 <FileSrecParseLine+0xc0>
      break;
 800a2be:	e0aa      	b.n	800a416 <FileSrecParseLine+0x23e>
      line += 2;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3302      	adds	r3, #2
 800a2c4:	60fb      	str	r3, [r7, #12]
      bytes_on_line = FileLibHexStringToByte(line);
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 f940 	bl	800a54c <FileLibHexStringToByte>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	823b      	strh	r3, [r7, #16]
      line += 2;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3302      	adds	r3, #2
 800a2d4:	60fb      	str	r3, [r7, #12]
      *address = FileLibHexStringToByte(line) << 16;
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 f938 	bl	800a54c <FileLibHexStringToByte>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	041b      	lsls	r3, r3, #16
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	601a      	str	r2, [r3, #0]
      line += 2;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	60fb      	str	r3, [r7, #12]
      *address += FileLibHexStringToByte(line) << 8;
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f92d 	bl	800a54c <FileLibHexStringToByte>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	021a      	lsls	r2, r3, #8
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	441a      	add	r2, r3
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	601a      	str	r2, [r3, #0]
      line += 2;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3302      	adds	r3, #2
 800a304:	60fb      	str	r3, [r7, #12]
      *address += FileLibHexStringToByte(line);
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 f920 	bl	800a54c <FileLibHexStringToByte>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	441a      	add	r2, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	601a      	str	r2, [r3, #0]
      line += 2;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3302      	adds	r3, #2
 800a31e:	60fb      	str	r3, [r7, #12]
      data_byte_count = bytes_on_line - 4; /* -3 bytes address, -1 byte checksum */
 800a320:	8a3b      	ldrh	r3, [r7, #16]
 800a322:	3b04      	subs	r3, #4
 800a324:	b29b      	uxth	r3, r3
 800a326:	82fb      	strh	r3, [r7, #22]
      if (data != BLT_NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d075      	beq.n	800a41a <FileSrecParseLine+0x242>
        for (i=0; i<data_byte_count; i++)
 800a32e:	2300      	movs	r3, #0
 800a330:	82bb      	strh	r3, [r7, #20]
 800a332:	e00d      	b.n	800a350 <FileSrecParseLine+0x178>
          data[i] = FileLibHexStringToByte(line);
 800a334:	8abb      	ldrh	r3, [r7, #20]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	18d4      	adds	r4, r2, r3
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 f906 	bl	800a54c <FileLibHexStringToByte>
 800a340:	4603      	mov	r3, r0
 800a342:	7023      	strb	r3, [r4, #0]
          line += 2;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3302      	adds	r3, #2
 800a348:	60fb      	str	r3, [r7, #12]
        for (i=0; i<data_byte_count; i++)
 800a34a:	8abb      	ldrh	r3, [r7, #20]
 800a34c:	3301      	adds	r3, #1
 800a34e:	82bb      	strh	r3, [r7, #20]
 800a350:	8aba      	ldrh	r2, [r7, #20]
 800a352:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a356:	429a      	cmp	r2, r3
 800a358:	dbec      	blt.n	800a334 <FileSrecParseLine+0x15c>
      break;
 800a35a:	e05e      	b.n	800a41a <FileSrecParseLine+0x242>
      line += 2;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3302      	adds	r3, #2
 800a360:	60fb      	str	r3, [r7, #12]
      bytes_on_line = FileLibHexStringToByte(line);
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 f8f2 	bl	800a54c <FileLibHexStringToByte>
 800a368:	4603      	mov	r3, r0
 800a36a:	823b      	strh	r3, [r7, #16]
      line += 2;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3302      	adds	r3, #2
 800a370:	60fb      	str	r3, [r7, #12]
      *address = FileLibHexStringToByte(line) << 24;
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f8ea 	bl	800a54c <FileLibHexStringToByte>
 800a378:	4603      	mov	r3, r0
 800a37a:	061b      	lsls	r3, r3, #24
 800a37c:	461a      	mov	r2, r3
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	601a      	str	r2, [r3, #0]
      line += 2;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3302      	adds	r3, #2
 800a386:	60fb      	str	r3, [r7, #12]
      *address += FileLibHexStringToByte(line) << 16;
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 f8df 	bl	800a54c <FileLibHexStringToByte>
 800a38e:	4603      	mov	r3, r0
 800a390:	041a      	lsls	r2, r3, #16
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	441a      	add	r2, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	601a      	str	r2, [r3, #0]
      line += 2;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3302      	adds	r3, #2
 800a3a0:	60fb      	str	r3, [r7, #12]
      *address += FileLibHexStringToByte(line) << 8;
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 f8d2 	bl	800a54c <FileLibHexStringToByte>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	021a      	lsls	r2, r3, #8
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	601a      	str	r2, [r3, #0]
      line += 2;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3302      	adds	r3, #2
 800a3ba:	60fb      	str	r3, [r7, #12]
      *address += FileLibHexStringToByte(line);
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 f8c5 	bl	800a54c <FileLibHexStringToByte>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	441a      	add	r2, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	601a      	str	r2, [r3, #0]
      line += 2;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	60fb      	str	r3, [r7, #12]
      data_byte_count = bytes_on_line - 5; /* -4 bytes address, -1 byte checksum */
 800a3d6:	8a3b      	ldrh	r3, [r7, #16]
 800a3d8:	3b05      	subs	r3, #5
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	82fb      	strh	r3, [r7, #22]
      if (data != BLT_NULL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01c      	beq.n	800a41e <FileSrecParseLine+0x246>
        for (i=0; i<data_byte_count; i++)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	82bb      	strh	r3, [r7, #20]
 800a3e8:	e00d      	b.n	800a406 <FileSrecParseLine+0x22e>
          data[i] = FileLibHexStringToByte(line);
 800a3ea:	8abb      	ldrh	r3, [r7, #20]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	18d4      	adds	r4, r2, r3
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f8ab 	bl	800a54c <FileLibHexStringToByte>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	7023      	strb	r3, [r4, #0]
          line += 2;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	60fb      	str	r3, [r7, #12]
        for (i=0; i<data_byte_count; i++)
 800a400:	8abb      	ldrh	r3, [r7, #20]
 800a402:	3301      	adds	r3, #1
 800a404:	82bb      	strh	r3, [r7, #20]
 800a406:	8aba      	ldrh	r2, [r7, #20]
 800a408:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	dbec      	blt.n	800a3ea <FileSrecParseLine+0x212>
      break;
 800a410:	e005      	b.n	800a41e <FileSrecParseLine+0x246>
      break;
 800a412:	bf00      	nop
 800a414:	e004      	b.n	800a420 <FileSrecParseLine+0x248>
      break;
 800a416:	bf00      	nop
 800a418:	e002      	b.n	800a420 <FileSrecParseLine+0x248>
      break;
 800a41a:	bf00      	nop
 800a41c:	e000      	b.n	800a420 <FileSrecParseLine+0x248>
      break;
 800a41e:	bf00      	nop
  }

  return data_byte_count;
 800a420:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
} /*** end of FileSrecParseLine ***/
 800a424:	4618      	mov	r0, r3
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd90      	pop	{r4, r7, pc}
 800a42c:	0800ee64 	.word	0x0800ee64

0800a430 <FileLibByteNibbleToChar>:
** \param     nibble 4-bit value to convert.
** \return    The resulting byte value.
**
****************************************************************************************/
static blt_char FileLibByteNibbleToChar(blt_int8u nibble)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	71fb      	strb	r3, [r7, #7]
  blt_char  c;

  /* convert to ASCII value */
  c = (nibble & 0x0f) + '0';
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	f003 030f 	and.w	r3, r3, #15
 800a440:	b2db      	uxtb	r3, r3
 800a442:	3330      	adds	r3, #48	; 0x30
 800a444:	73fb      	strb	r3, [r7, #15]
  if (nibble > 9)
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	2b09      	cmp	r3, #9
 800a44a:	d903      	bls.n	800a454 <FileLibByteNibbleToChar+0x24>
  {
    c += 7;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	3307      	adds	r3, #7
 800a450:	73fb      	strb	r3, [r7, #15]
 800a452:	e012      	b.n	800a47a <FileLibByteNibbleToChar+0x4a>
  }
  else
  {
    c = toupper((blt_int16s)c);
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	81bb      	strh	r3, [r7, #12]
 800a458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a45c:	3301      	adds	r3, #1
 800a45e:	4a0a      	ldr	r2, [pc, #40]	; (800a488 <FileLibByteNibbleToChar+0x58>)
 800a460:	4413      	add	r3, r2
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d103      	bne.n	800a474 <FileLibByteNibbleToChar+0x44>
 800a46c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a470:	3b20      	subs	r3, #32
 800a472:	e001      	b.n	800a478 <FileLibByteNibbleToChar+0x48>
 800a474:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a478:	73fb      	strb	r3, [r7, #15]
  }
  /* return the character */
  return c;
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FileLibByteNibbleToChar ***/
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	0800f608 	.word	0x0800f608

0800a48c <FileLibByteToHexString>:
** \param     destination Pointer to character buffer for storing the results.
** \return    The resulting string.
**
****************************************************************************************/
static blt_char *FileLibByteToHexString(blt_int8u byte_val, blt_char *destination)
{
 800a48c:	b590      	push	{r4, r7, lr}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	6039      	str	r1, [r7, #0]
 800a496:	71fb      	strb	r3, [r7, #7]
  /* first the most significant n-bit nibble */
  destination[0] = FileLibByteNibbleToChar(byte_val >> 4);
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	091b      	lsrs	r3, r3, #4
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff ffc6 	bl	800a430 <FileLibByteNibbleToChar>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	701a      	strb	r2, [r3, #0]
  /* next the least significant n-bit nibble */
  destination[1] = FileLibByteNibbleToChar(byte_val & 0x0f);
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	1c5c      	adds	r4, r3, #1
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	f7ff ffb9 	bl	800a430 <FileLibByteNibbleToChar>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	7023      	strb	r3, [r4, #0]
  /* add string termination */
  destination[2] = '\0';
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	3302      	adds	r3, #2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
  /* return pointer to resulting string */
  return destination;
 800a4ca:	683b      	ldr	r3, [r7, #0]
} /*** end of FileLibByteToHexString ***/
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd90      	pop	{r4, r7, pc}

0800a4d4 <FileLibLongToIntString>:
** \param     destination Pointer to character buffer for storing the results.
** \return    The resulting string.
**
****************************************************************************************/
static blt_char *FileLibLongToIntString(blt_int32u long_val, blt_char *destination)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  blt_int32u long_val_cpy = long_val;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* first determine how many digits there will be */
  do
  {
    destination++;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	603b      	str	r3, [r7, #0]
    long_val_cpy /= 10;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4a17      	ldr	r2, [pc, #92]	; (800a548 <FileLibLongToIntString+0x74>)
 800a4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f0:	08db      	lsrs	r3, r3, #3
 800a4f2:	60fb      	str	r3, [r7, #12]
  }
  while (long_val_cpy > 0);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1f3      	bne.n	800a4e2 <FileLibLongToIntString+0xe>
  /* add space for the string termination and add it */
  *destination = '\0';
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
  /* now add the digits from right to left */
  long_val_cpy = long_val;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	60fb      	str	r3, [r7, #12]
  do
  {
    /* set write pointer to where the next character should go */
    destination--;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	3b01      	subs	r3, #1
 800a508:	603b      	str	r3, [r7, #0]
    /* write digit in ASCII format */
    *destination = long_val_cpy % 10 + '0';
 800a50a:	68f9      	ldr	r1, [r7, #12]
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <FileLibLongToIntString+0x74>)
 800a50e:	fba3 2301 	umull	r2, r3, r3, r1
 800a512:	08da      	lsrs	r2, r3, #3
 800a514:	4613      	mov	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	1aca      	subs	r2, r1, r3
 800a51e:	b2d3      	uxtb	r3, r2
 800a520:	3330      	adds	r3, #48	; 0x30
 800a522:	b2da      	uxtb	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	701a      	strb	r2, [r3, #0]
    /* move on to the next digit */
    long_val_cpy /= 10;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4a07      	ldr	r2, [pc, #28]	; (800a548 <FileLibLongToIntString+0x74>)
 800a52c:	fba2 2303 	umull	r2, r3, r2, r3
 800a530:	08db      	lsrs	r3, r3, #3
 800a532:	60fb      	str	r3, [r7, #12]
  }
  while (long_val_cpy > 0);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e4      	bne.n	800a504 <FileLibLongToIntString+0x30>

  return destination;
 800a53a:	683b      	ldr	r3, [r7, #0]
} /*** end of FileLibLongToIntString ***/
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	cccccccd 	.word	0xcccccccd

0800a54c <FileLibHexStringToByte>:
**                      decimal value.
** \return    The resulting byte value.
**
****************************************************************************************/
static blt_int8u FileLibHexStringToByte(const blt_char *hexstring)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  blt_int8u result = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	73fb      	strb	r3, [r7, #15]
  blt_char  c;
  blt_int8u counter;

  /* a hexadecimal character is 2 characters long (i.e 0x4F minus the 0x part) */
  for (counter=0; counter < 2; counter++)
 800a558:	2300      	movs	r3, #0
 800a55a:	737b      	strb	r3, [r7, #13]
 800a55c:	e035      	b.n	800a5ca <FileLibHexStringToByte+0x7e>
  {
    /* read out the character */
    c = toupper((blt_int16s)(hexstring[counter]));
 800a55e:	7b7b      	ldrb	r3, [r7, #13]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	4413      	add	r3, r2
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	817b      	strh	r3, [r7, #10]
 800a568:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a56c:	3301      	adds	r3, #1
 800a56e:	4a1c      	ldr	r2, [pc, #112]	; (800a5e0 <FileLibHexStringToByte+0x94>)
 800a570:	4413      	add	r3, r2
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	f003 0303 	and.w	r3, r3, #3
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d103      	bne.n	800a584 <FileLibHexStringToByte+0x38>
 800a57c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a580:	3b20      	subs	r3, #32
 800a582:	e001      	b.n	800a588 <FileLibHexStringToByte+0x3c>
 800a584:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a588:	73bb      	strb	r3, [r7, #14]
    /* check that the character is 0..9 or A..F */
    if ((c < '0') || (c > 'F') || ((c > '9') && (c < 'A')))
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b2f      	cmp	r3, #47	; 0x2f
 800a58e:	d908      	bls.n	800a5a2 <FileLibHexStringToByte+0x56>
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b46      	cmp	r3, #70	; 0x46
 800a594:	d805      	bhi.n	800a5a2 <FileLibHexStringToByte+0x56>
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b39      	cmp	r3, #57	; 0x39
 800a59a:	d904      	bls.n	800a5a6 <FileLibHexStringToByte+0x5a>
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	2b40      	cmp	r3, #64	; 0x40
 800a5a0:	d801      	bhi.n	800a5a6 <FileLibHexStringToByte+0x5a>
    {
      /* character not valid */
      return 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e015      	b.n	800a5d2 <FileLibHexStringToByte+0x86>
    }
    /* convert character to 4-bit value (check ASCII table for more info) */
    c -= '0';
 800a5a6:	7bbb      	ldrb	r3, [r7, #14]
 800a5a8:	3b30      	subs	r3, #48	; 0x30
 800a5aa:	73bb      	strb	r3, [r7, #14]
    if (c > 9)
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d902      	bls.n	800a5b8 <FileLibHexStringToByte+0x6c>
    {
      c -= 7;
 800a5b2:	7bbb      	ldrb	r3, [r7, #14]
 800a5b4:	3b07      	subs	r3, #7
 800a5b6:	73bb      	strb	r3, [r7, #14]
    }
    /* add it to the result */
    result = (result << 4) + c;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	73fb      	strb	r3, [r7, #15]
  for (counter=0; counter < 2; counter++)
 800a5c4:	7b7b      	ldrb	r3, [r7, #13]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	737b      	strb	r3, [r7, #13]
 800a5ca:	7b7b      	ldrb	r3, [r7, #13]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d9c6      	bls.n	800a55e <FileLibHexStringToByte+0x12>
  }
  /* return the results */
  return result;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FileLibHexStringToByte ***/
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	0800f608 	.word	0x0800f608

0800a5e4 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <XcpInit+0x40>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xcpInfo.mta = 0;
 800a5f0:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <XcpInit+0x40>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  xcpInfo.ctoPending = 0;
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <XcpInit+0x40>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  xcpInfo.ctoLen = 0;
 800a600:	4b08      	ldr	r3, [pc, #32]	; (800a624 <XcpInit+0x40>)
 800a602:	2200      	movs	r2, #0
 800a604:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  xcpInfo.s_n_k_resource = 0;
 800a608:	4b06      	ldr	r3, [pc, #24]	; (800a624 <XcpInit+0x40>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  xcpInfo.protection = 0;
 800a610:	4b04      	ldr	r3, [pc, #16]	; (800a624 <XcpInit+0x40>)
 800a612:	2200      	movs	r2, #0
 800a614:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
} /*** end of XcpInit ***/
 800a618:	bf00      	nop
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	2000179c 	.word	0x2000179c

0800a628 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <XcpIsConnected+0x20>)
 800a62e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 800a636:	2300      	movs	r3, #0
 800a638:	e000      	b.n	800a63c <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 800a63a:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 800a63c:	4618      	mov	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	2000179c 	.word	0x2000179c

0800a64c <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 800a64c:	b480      	push	{r7}
 800a64e:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <XcpPacketTransmitted+0x18>)
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpPacketTransmitted ***/
 800a658:	bf00      	nop
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	2000179c 	.word	0x2000179c

0800a668 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2bff      	cmp	r3, #255	; 0xff
 800a67a:	d103      	bne.n	800a684 <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f979 	bl	800a974 <XcpCmdConnect>
 800a682:	e0b7      	b.n	800a7f4 <XcpPacketReceived+0x18c>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 800a684:	4b6a      	ldr	r3, [pc, #424]	; (800a830 <XcpPacketReceived+0x1c8>)
 800a686:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	f040 80cb 	bne.w	800a826 <XcpPacketReceived+0x1be>
  {
    switch (data[0])
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	3bc9      	subs	r3, #201	; 0xc9
 800a696:	2b35      	cmp	r3, #53	; 0x35
 800a698:	f200 80a8 	bhi.w	800a7ec <XcpPacketReceived+0x184>
 800a69c:	a201      	add	r2, pc, #4	; (adr r2, 800a6a4 <XcpPacketReceived+0x3c>)
 800a69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a2:	bf00      	nop
 800a6a4:	0800a7bd 	.word	0x0800a7bd
 800a6a8:	0800a7ed 	.word	0x0800a7ed
 800a6ac:	0800a7ed 	.word	0x0800a7ed
 800a6b0:	0800a7e5 	.word	0x0800a7e5
 800a6b4:	0800a7ed 	.word	0x0800a7ed
 800a6b8:	0800a7ed 	.word	0x0800a7ed
 800a6bc:	0800a7dd 	.word	0x0800a7dd
 800a6c0:	0800a7c5 	.word	0x0800a7c5
 800a6c4:	0800a7d5 	.word	0x0800a7d5
 800a6c8:	0800a7cd 	.word	0x0800a7cd
 800a6cc:	0800a7ed 	.word	0x0800a7ed
 800a6d0:	0800a7ed 	.word	0x0800a7ed
 800a6d4:	0800a7ed 	.word	0x0800a7ed
 800a6d8:	0800a7ed 	.word	0x0800a7ed
 800a6dc:	0800a7ed 	.word	0x0800a7ed
 800a6e0:	0800a7ed 	.word	0x0800a7ed
 800a6e4:	0800a7ed 	.word	0x0800a7ed
 800a6e8:	0800a7ed 	.word	0x0800a7ed
 800a6ec:	0800a7ed 	.word	0x0800a7ed
 800a6f0:	0800a7ed 	.word	0x0800a7ed
 800a6f4:	0800a7ed 	.word	0x0800a7ed
 800a6f8:	0800a7ed 	.word	0x0800a7ed
 800a6fc:	0800a7ed 	.word	0x0800a7ed
 800a700:	0800a7ed 	.word	0x0800a7ed
 800a704:	0800a7ed 	.word	0x0800a7ed
 800a708:	0800a7ed 	.word	0x0800a7ed
 800a70c:	0800a7ed 	.word	0x0800a7ed
 800a710:	0800a7ed 	.word	0x0800a7ed
 800a714:	0800a7ed 	.word	0x0800a7ed
 800a718:	0800a7ed 	.word	0x0800a7ed
 800a71c:	0800a7ed 	.word	0x0800a7ed
 800a720:	0800a7ed 	.word	0x0800a7ed
 800a724:	0800a7ed 	.word	0x0800a7ed
 800a728:	0800a7ed 	.word	0x0800a7ed
 800a72c:	0800a7ed 	.word	0x0800a7ed
 800a730:	0800a7ed 	.word	0x0800a7ed
 800a734:	0800a7ed 	.word	0x0800a7ed
 800a738:	0800a7ed 	.word	0x0800a7ed
 800a73c:	0800a7ed 	.word	0x0800a7ed
 800a740:	0800a7ed 	.word	0x0800a7ed
 800a744:	0800a7ed 	.word	0x0800a7ed
 800a748:	0800a7ed 	.word	0x0800a7ed
 800a74c:	0800a795 	.word	0x0800a795
 800a750:	0800a785 	.word	0x0800a785
 800a754:	0800a77d 	.word	0x0800a77d
 800a758:	0800a78d 	.word	0x0800a78d
 800a75c:	0800a7ed 	.word	0x0800a7ed
 800a760:	0800a7ed 	.word	0x0800a7ed
 800a764:	0800a7ed 	.word	0x0800a7ed
 800a768:	0800a79d 	.word	0x0800a79d
 800a76c:	0800a7ed 	.word	0x0800a7ed
 800a770:	0800a7a5 	.word	0x0800a7a5
 800a774:	0800a7ad 	.word	0x0800a7ad
 800a778:	0800a7b5 	.word	0x0800a7b5
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f9cf 	bl	800ab20 <XcpCmdUpload>
        break;
 800a782:	e037      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fa09 	bl	800ab9c <XcpCmdShortUpload>
        break;
 800a78a:	e033      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f9ad 	bl	800aaec <XcpCmdSetMta>
        break;
 800a792:	e02f      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fa49 	bl	800ac2c <XcpCmdBuildCheckSum>
        break;
 800a79a:	e02b      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f97d 	bl	800aa9c <XcpCmdGetId>
        break;
 800a7a2:	e027      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f96d 	bl	800aa84 <XcpCmdSynch>
        break;
 800a7aa:	e023      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f945 	bl	800aa3c <XcpCmdGetStatus>
        break;
 800a7b2:	e01f      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f929 	bl	800aa0c <XcpCmdDisconnect>
        break;
 800a7ba:	e01b      	b.n	800a7f4 <XcpPacketReceived+0x18c>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fa8f 	bl	800ace0 <XcpCmdProgramMax>
        break;
 800a7c2:	e017      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fabb 	bl	800ad40 <XcpCmdProgram>
        break;
 800a7ca:	e013      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fa61 	bl	800ac94 <XcpCmdProgramStart>
        break;
 800a7d2:	e00f      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fafd 	bl	800add4 <XcpCmdProgramClear>
        break;
 800a7da:	e00b      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fb1f 	bl	800ae20 <XcpCmdProgramReset>
        break;
 800a7e2:	e007      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fb2f 	bl	800ae48 <XcpCmdProgramPrepare>
        break;
 800a7ea:	e003      	b.n	800a7f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 800a7ec:	2020      	movs	r0, #32
 800a7ee:	f000 f85f 	bl	800a8b0 <XcpSetCtoError>
        break;
 800a7f2:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <XcpPacketReceived+0x1c8>)
 800a7f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d102      	bne.n	800a804 <XcpPacketReceived+0x19c>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 800a7fe:	2010      	movs	r0, #16
 800a800:	f000 f856 	bl	800a8b0 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 800a804:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <XcpPacketReceived+0x1c8>)
 800a806:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dd0c      	ble.n	800a828 <XcpPacketReceived+0x1c0>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 800a80e:	4b08      	ldr	r3, [pc, #32]	; (800a830 <XcpPacketReceived+0x1c8>)
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 800a816:	4b06      	ldr	r3, [pc, #24]	; (800a830 <XcpPacketReceived+0x1c8>)
 800a818:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800a81c:	4619      	mov	r1, r3
 800a81e:	4804      	ldr	r0, [pc, #16]	; (800a830 <XcpPacketReceived+0x1c8>)
 800a820:	f000 f808 	bl	800a834 <XcpTransmitPacket>
 800a824:	e000      	b.n	800a828 <XcpPacketReceived+0x1c0>
    return;
 800a826:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	2000179c 	.word	0x2000179c

0800a834 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 800a840:	887b      	ldrh	r3, [r7, #2]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff f8cf 	bl	80099e8 <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b086      	sub	sp, #24
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 800a862:	e009      	b.n	800a878 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	781a      	ldrb	r2, [r3, #0]
 800a868:	7dfb      	ldrb	r3, [r7, #23]
 800a86a:	4413      	add	r3, r2
 800a86c:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3301      	adds	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 800a874:	f7ff f94f 	bl	8009b16 <CopService>
  while (length-- > 0)
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	1e5a      	subs	r2, r3, #1
 800a87c:	60ba      	str	r2, [r7, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1f0      	bne.n	800a864 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 800a882:	7dfa      	ldrb	r2, [r7, #23]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 800a888:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
	...

0800a894 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 800a894:	b480      	push	{r7}
 800a896:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <XcpProtectResources+0x18>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 800a8a0:	bf00      	nop
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	2000179c 	.word	0x2000179c

0800a8b0 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <XcpSetCtoError+0x2c>)
 800a8bc:	22fe      	movs	r2, #254	; 0xfe
 800a8be:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 800a8c0:	4a06      	ldr	r2, [pc, #24]	; (800a8dc <XcpSetCtoError+0x2c>)
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 800a8c6:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <XcpSetCtoError+0x2c>)
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpSetCtoError ***/
 800a8ce:	bf00      	nop
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	2000179c 	.word	0x2000179c

0800a8e0 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u)data[0];
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	021b      	lsls	r3, r3, #8
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3302      	adds	r3, #2
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	041b      	lsls	r3, r3, #16
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3303      	adds	r3, #3
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	061b      	lsls	r3, r3, #24
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 8);
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
 800a922:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >>  8);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	0a1a      	lsrs	r2, r3, #8
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	3301      	adds	r3, #1
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >> 16);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	0c1a      	lsrs	r2, r3, #16
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	3302      	adds	r3, #2
 800a956:	b2d2      	uxtb	r2, r2
 800a958:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u)(value >> 24);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	0e1a      	lsrs	r2, r3, #24
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	3303      	adds	r3, #3
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 800a966:	bf00      	nop
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
	...

0800a974 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]

#if (BOOT_FILE_SYS_ENABLE > 0)
  /* reject the connection if the file module is not idle. this means that a firmware
   * update from the locally attached storage is in progress
   */
  if (FileIsIdle() == BLT_FALSE)
 800a97c:	f7ff f8f2 	bl	8009b64 <FileIsIdle>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <XcpCmdConnect+0x1a>
  {
    /* command not processed because we are busy */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 800a986:	2010      	movs	r0, #16
 800a988:	f7ff ff92 	bl	800a8b0 <XcpSetCtoError>
    return;
 800a98c:	e039      	b.n	800aa02 <XcpCmdConnect+0x8e>
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 800a98e:	f7ff ff81 	bl	800a894 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 800a992:	4b1d      	ldr	r3, [pc, #116]	; (800aa08 <XcpCmdConnect+0x94>)
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800a99a:	4b1b      	ldr	r3, [pc, #108]	; (800aa08 <XcpCmdConnect+0x94>)
 800a99c:	22ff      	movs	r2, #255	; 0xff
 800a99e:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 800a9a0:	4b19      	ldr	r3, [pc, #100]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 800a9a6:	4b18      	ldr	r3, [pc, #96]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9a8:	785b      	ldrb	r3, [r3, #1]
 800a9aa:	f043 0310 	orr.w	r3, r3, #16
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	4b15      	ldr	r3, [pc, #84]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9b2:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 800a9b4:	4b14      	ldr	r3, [pc, #80]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 800a9ba:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9bc:	789a      	ldrb	r2, [r3, #2]
 800a9be:	4b12      	ldr	r3, [pc, #72]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9c0:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800a9c2:	f7ff f83d 	bl	8009a40 <ComGetActiveInterfaceMaxRxLen>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9cc:	70da      	strb	r2, [r3, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 800a9ce:	f7ff f861 	bl	8009a94 <ComGetActiveInterfaceMaxTxLen>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9d8:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 800a9da:	f7ff f85b 	bl	8009a94 <ComGetActiveInterfaceMaxTxLen>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	0a1b      	lsrs	r3, r3, #8
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9e8:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 800a9ea:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 800a9f0:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800a9f6:	4b04      	ldr	r3, [pc, #16]	; (800aa08 <XcpCmdConnect+0x94>)
 800a9f8:	2208      	movs	r2, #8
 800a9fa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 800a9fe:	f7fe f9e9 	bl	8008dd4 <NvmInit>
} /*** end of XcpCmdConnect ***/
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	2000179c 	.word	0x2000179c

0800aa0c <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 800aa14:	4b08      	ldr	r3, [pc, #32]	; (800aa38 <XcpCmdDisconnect+0x2c>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* enable resource protection */
  XcpProtectResources();
 800aa1c:	f7ff ff3a 	bl	800a894 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800aa20:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <XcpCmdDisconnect+0x2c>)
 800aa22:	22ff      	movs	r2, #255	; 0xff
 800aa24:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800aa26:	4b04      	ldr	r3, [pc, #16]	; (800aa38 <XcpCmdDisconnect+0x2c>)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdDisconnect ***/
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	2000179c 	.word	0x2000179c

0800aa3c <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800aa44:	4b0e      	ldr	r3, [pc, #56]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa46:	22ff      	movs	r2, #255	; 0xff
 800aa48:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 800aa50:	4b0b      	ldr	r3, [pc, #44]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa52:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800aa56:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa58:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 800aa60:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 800aa66:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 800aa6c:	4b04      	ldr	r3, [pc, #16]	; (800aa80 <XcpCmdGetStatus+0x44>)
 800aa6e:	2206      	movs	r2, #6
 800aa70:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetStatus ***/
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	2000179c 	.word	0x2000179c

0800aa84 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	f7ff ff0f 	bl	800a8b0 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <XcpCmdGetId+0x44>)
 800aaa6:	22ff      	movs	r2, #255	; 0xff
 800aaa8:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 800aaaa:	4a0e      	ldr	r2, [pc, #56]	; (800aae4 <XcpCmdGetId+0x48>)
 800aaac:	4b0c      	ldr	r3, [pc, #48]	; (800aae0 <XcpCmdGetId+0x44>)
 800aaae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 800aab2:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <XcpCmdGetId+0x44>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 800aab8:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <XcpCmdGetId+0x44>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 800aabe:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <XcpCmdGetId+0x44>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 800aac4:	2307      	movs	r3, #7
 800aac6:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 800aac8:	4907      	ldr	r1, [pc, #28]	; (800aae8 <XcpCmdGetId+0x4c>)
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7ff ff30 	bl	800a930 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800aad0:	4b03      	ldr	r3, [pc, #12]	; (800aae0 <XcpCmdGetId+0x44>)
 800aad2:	2208      	movs	r2, #8
 800aad4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetId ***/
 800aad8:	bf00      	nop
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	2000179c 	.word	0x2000179c
 800aae4:	0800f1c0 	.word	0x0800f1c0
 800aae8:	200017a0 	.word	0x200017a0

0800aaec <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800aaf4:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <XcpCmdSetMta+0x30>)
 800aaf6:	22ff      	movs	r2, #255	; 0xff
 800aaf8:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3304      	adds	r3, #4
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff feee 	bl	800a8e0 <XcpGetOrderedLong>
 800ab04:	4603      	mov	r3, r0
 800ab06:	4a05      	ldr	r2, [pc, #20]	; (800ab1c <XcpCmdSetMta+0x30>)
 800ab08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800ab0c:	4b03      	ldr	r3, [pc, #12]	; (800ab1c <XcpCmdSetMta+0x30>)
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdSetMta ***/
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	2000179c 	.word	0x2000179c

0800ab20 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 800ab28:	f7fe ff8a 	bl	8009a40 <ComGetActiveInterfaceMaxRxLen>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	461a      	mov	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3301      	adds	r3, #1
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d803      	bhi.n	800ab44 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800ab3c:	2022      	movs	r0, #34	; 0x22
 800ab3e:	f7ff feb7 	bl	800a8b0 <XcpSetCtoError>
    return;
 800ab42:	e024      	b.n	800ab8e <XcpCmdUpload+0x6e>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3301      	adds	r3, #1
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 800ab4c:	4b11      	ldr	r3, [pc, #68]	; (800ab94 <XcpCmdUpload+0x74>)
 800ab4e:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4a11      	ldr	r2, [pc, #68]	; (800ab98 <XcpCmdUpload+0x78>)
 800ab54:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800ab58:	89fa      	ldrh	r2, [r7, #14]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fd fdbc 	bl	80086d8 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800ab60:	4b0d      	ldr	r3, [pc, #52]	; (800ab98 <XcpCmdUpload+0x78>)
 800ab62:	22ff      	movs	r2, #255	; 0xff
 800ab64:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <XcpCmdUpload+0x78>)
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	3201      	adds	r2, #1
 800ab70:	7812      	ldrb	r2, [r2, #0]
 800ab72:	4413      	add	r3, r2
 800ab74:	4a08      	ldr	r2, [pc, #32]	; (800ab98 <XcpCmdUpload+0x78>)
 800ab76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	3301      	adds	r3, #1
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	b21a      	sxth	r2, r3
 800ab88:	4b03      	ldr	r3, [pc, #12]	; (800ab98 <XcpCmdUpload+0x78>)
 800ab8a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdUpload ***/
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	2000179d 	.word	0x2000179d
 800ab98:	2000179c 	.word	0x2000179c

0800ab9c <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 800aba4:	f7fe ff4c 	bl	8009a40 <ComGetActiveInterfaceMaxRxLen>
 800aba8:	4603      	mov	r3, r0
 800abaa:	461a      	mov	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3301      	adds	r3, #1
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d803      	bhi.n	800abc0 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800abb8:	2022      	movs	r0, #34	; 0x22
 800abba:	f7ff fe79 	bl	800a8b0 <XcpSetCtoError>
    return;
 800abbe:	e02d      	b.n	800ac1c <XcpCmdShortUpload+0x80>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff fe8b 	bl	800a8e0 <XcpGetOrderedLong>
 800abca:	4603      	mov	r3, r0
 800abcc:	4a15      	ldr	r2, [pc, #84]	; (800ac24 <XcpCmdShortUpload+0x88>)
 800abce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* read out the length of the requested upload operation */
  len = data[1];
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3301      	adds	r3, #1
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <XcpCmdShortUpload+0x8c>)
 800abdc:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4a10      	ldr	r2, [pc, #64]	; (800ac24 <XcpCmdShortUpload+0x88>)
 800abe2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800abe6:	89fa      	ldrh	r2, [r7, #14]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fd fd75 	bl	80086d8 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800abee:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <XcpCmdShortUpload+0x88>)
 800abf0:	22ff      	movs	r2, #255	; 0xff
 800abf2:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 800abf4:	4b0b      	ldr	r3, [pc, #44]	; (800ac24 <XcpCmdShortUpload+0x88>)
 800abf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	3201      	adds	r2, #1
 800abfe:	7812      	ldrb	r2, [r2, #0]
 800ac00:	4413      	add	r3, r2
 800ac02:	4a08      	ldr	r2, [pc, #32]	; (800ac24 <XcpCmdShortUpload+0x88>)
 800ac04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	3301      	adds	r3, #1
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	b21a      	sxth	r2, r3
 800ac16:	4b03      	ldr	r3, [pc, #12]	; (800ac24 <XcpCmdShortUpload+0x88>)
 800ac18:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdShortUpload ***/
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	2000179c 	.word	0x2000179c
 800ac28:	2000179d 	.word	0x2000179d

0800ac2c <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800ac38:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <XcpCmdBuildCheckSum+0x60>)
 800ac3a:	22ff      	movs	r2, #255	; 0xff
 800ac3c:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fe4c 	bl	800a8e0 <XcpGetOrderedLong>
 800ac48:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 800ac4a:	4b10      	ldr	r3, [pc, #64]	; (800ac8c <XcpCmdBuildCheckSum+0x60>)
 800ac4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac50:	f107 020c 	add.w	r2, r7, #12
 800ac54:	6979      	ldr	r1, [r7, #20]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fdfb 	bl	800a852 <XcpComputeChecksum>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 800ac60:	4a0a      	ldr	r2, [pc, #40]	; (800ac8c <XcpCmdBuildCheckSum+0x60>)
 800ac62:	7cfb      	ldrb	r3, [r7, #19]
 800ac64:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4909      	ldr	r1, [pc, #36]	; (800ac90 <XcpCmdBuildCheckSum+0x64>)
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7ff fe60 	bl	800a930 <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 800ac70:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <XcpCmdBuildCheckSum+0x60>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <XcpCmdBuildCheckSum+0x60>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800ac7c:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <XcpCmdBuildCheckSum+0x60>)
 800ac7e:	2208      	movs	r2, #8
 800ac80:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 800ac84:	bf00      	nop
 800ac86:	3718      	adds	r7, #24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	2000179c 	.word	0x2000179c
 800ac90:	200017a0 	.word	0x200017a0

0800ac94 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800ac9c:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <XcpCmdProgramStart+0x48>)
 800ac9e:	22ff      	movs	r2, #255	; 0xff
 800aca0:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 800aca2:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <XcpCmdProgramStart+0x48>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 800aca8:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <XcpCmdProgramStart+0x48>)
 800acaa:	2200      	movs	r2, #0
 800acac:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800acae:	f7fe fec7 	bl	8009a40 <ComGetActiveInterfaceMaxRxLen>
 800acb2:	4603      	mov	r3, r0
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	4b09      	ldr	r3, [pc, #36]	; (800acdc <XcpCmdProgramStart+0x48>)
 800acb8:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 800acba:	4b08      	ldr	r3, [pc, #32]	; (800acdc <XcpCmdProgramStart+0x48>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <XcpCmdProgramStart+0x48>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 800acc6:	4b05      	ldr	r3, [pc, #20]	; (800acdc <XcpCmdProgramStart+0x48>)
 800acc8:	2200      	movs	r2, #0
 800acca:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 800accc:	4b03      	ldr	r3, [pc, #12]	; (800acdc <XcpCmdProgramStart+0x48>)
 800acce:	2207      	movs	r2, #7
 800acd0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramStart ***/
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	2000179c 	.word	0x2000179c

0800ace0 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 800ace0:	b590      	push	{r4, r7, lr}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 800ace8:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <XcpCmdProgramMax+0x5c>)
 800acea:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800acee:	f7fe fea7 	bl	8009a40 <ComGetActiveInterfaceMaxRxLen>
 800acf2:	4603      	mov	r3, r0
 800acf4:	3b01      	subs	r3, #1
 800acf6:	4619      	mov	r1, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3301      	adds	r3, #1
 800acfc:	461a      	mov	r2, r3
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7fe f86e 	bl	8008de0 <NvmWrite>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d103      	bne.n	800ad12 <XcpCmdProgramMax+0x32>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800ad0a:	2031      	movs	r0, #49	; 0x31
 800ad0c:	f7ff fdd0 	bl	800a8b0 <XcpSetCtoError>
    return;
 800ad10:	e011      	b.n	800ad36 <XcpCmdProgramMax+0x56>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800ad12:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <XcpCmdProgramMax+0x5c>)
 800ad14:	22ff      	movs	r2, #255	; 0xff
 800ad16:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 800ad18:	f7fe fe92 	bl	8009a40 <ComGetActiveInterfaceMaxRxLen>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	1e5a      	subs	r2, r3, #1
 800ad20:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <XcpCmdProgramMax+0x5c>)
 800ad22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad26:	4413      	add	r3, r2
 800ad28:	4a04      	ldr	r2, [pc, #16]	; (800ad3c <XcpCmdProgramMax+0x5c>)
 800ad2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800ad2e:	4b03      	ldr	r3, [pc, #12]	; (800ad3c <XcpCmdProgramMax+0x5c>)
 800ad30:	2201      	movs	r2, #1
 800ad32:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramMax ***/
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd90      	pop	{r4, r7, pc}
 800ad3c:	2000179c 	.word	0x2000179c

0800ad40 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 800ad48:	f7fe fe7a 	bl	8009a40 <ComGetActiveInterfaceMaxRxLen>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	3201      	adds	r2, #1
 800ad54:	7812      	ldrb	r2, [r2, #0]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	dc03      	bgt.n	800ad62 <XcpCmdProgram+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800ad5a:	2022      	movs	r0, #34	; 0x22
 800ad5c:	f7ff fda8 	bl	800a8b0 <XcpSetCtoError>
    return;
 800ad60:	e033      	b.n	800adca <XcpCmdProgram+0x8a>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800ad62:	4b1b      	ldr	r3, [pc, #108]	; (800add0 <XcpCmdProgram+0x90>)
 800ad64:	22ff      	movs	r2, #255	; 0xff
 800ad66:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800ad68:	4b19      	ldr	r3, [pc, #100]	; (800add0 <XcpCmdProgram+0x90>)
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3301      	adds	r3, #1
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d108      	bne.n	800ad8c <XcpCmdProgram+0x4c>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 800ad7a:	f7fe f85d 	bl	8008e38 <NvmDone>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d121      	bne.n	800adc8 <XcpCmdProgram+0x88>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 800ad84:	2031      	movs	r0, #49	; 0x31
 800ad86:	f7ff fd93 	bl	800a8b0 <XcpSetCtoError>
    }
    return;
 800ad8a:	e01d      	b.n	800adc8 <XcpCmdProgram+0x88>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 800ad8c:	4b10      	ldr	r3, [pc, #64]	; (800add0 <XcpCmdProgram+0x90>)
 800ad8e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3301      	adds	r3, #1
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f7fe f81e 	bl	8008de0 <NvmWrite>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800adaa:	2031      	movs	r0, #49	; 0x31
 800adac:	f7ff fd80 	bl	800a8b0 <XcpSetCtoError>
    return;
 800adb0:	e00b      	b.n	800adca <XcpCmdProgram+0x8a>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 800adb2:	4b07      	ldr	r3, [pc, #28]	; (800add0 <XcpCmdProgram+0x90>)
 800adb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	3201      	adds	r2, #1
 800adbc:	7812      	ldrb	r2, [r2, #0]
 800adbe:	4413      	add	r3, r2
 800adc0:	4a03      	ldr	r2, [pc, #12]	; (800add0 <XcpCmdProgram+0x90>)
 800adc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800adc6:	e000      	b.n	800adca <XcpCmdProgram+0x8a>
    return;
 800adc8:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	2000179c 	.word	0x2000179c

0800add4 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 800addc:	4b0f      	ldr	r3, [pc, #60]	; (800ae1c <XcpCmdProgramClear+0x48>)
 800adde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade2:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3304      	adds	r3, #4
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fd79 	bl	800a8e0 <XcpGetOrderedLong>
 800adee:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7fe f804 	bl	8008e00 <NvmErase>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d103      	bne.n	800ae06 <XcpCmdProgramClear+0x32>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800adfe:	2031      	movs	r0, #49	; 0x31
 800ae00:	f7ff fd56 	bl	800a8b0 <XcpSetCtoError>
    return;
 800ae04:	e006      	b.n	800ae14 <XcpCmdProgramClear+0x40>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800ae06:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <XcpCmdProgramClear+0x48>)
 800ae08:	22ff      	movs	r2, #255	; 0xff
 800ae0a:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800ae0c:	4b03      	ldr	r3, [pc, #12]	; (800ae1c <XcpCmdProgramClear+0x48>)
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramClear ***/
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	2000179c 	.word	0x2000179c

0800ae20 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 800ae28:	f7fd fc26 	bl	8008678 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800ae2c:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <XcpCmdProgramReset+0x24>)
 800ae2e:	22ff      	movs	r2, #255	; 0xff
 800ae30:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800ae32:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <XcpCmdProgramReset+0x24>)
 800ae34:	2201      	movs	r2, #1
 800ae36:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramReset ***/
 800ae3a:	bf00      	nop
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	2000179c 	.word	0x2000179c

0800ae48 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 800ae50:	2031      	movs	r0, #49	; 0x31
 800ae52:	f7ff fd2d 	bl	800a8b0 <XcpSetCtoError>
  return;
 800ae56:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b085      	sub	sp, #20
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ae6e:	89fb      	ldrh	r3, [r7, #14]
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	b21a      	sxth	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b21b      	sxth	r3, r3
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	b21b      	sxth	r3, r3
 800ae7e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ae80:	89fb      	ldrh	r3, [r7, #14]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b085      	sub	sp, #20
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3303      	adds	r3, #3
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	3202      	adds	r2, #2
 800aea6:	7812      	ldrb	r2, [r2, #0]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	3201      	adds	r2, #1
 800aeb4:	7812      	ldrb	r2, [r2, #0]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	021b      	lsls	r3, r3, #8
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	7812      	ldrb	r2, [r2, #0]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	60fb      	str	r3, [r7, #12]
	return rv;
 800aec6:	68fb      	ldr	r3, [r7, #12]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	887a      	ldrh	r2, [r7, #2]
 800aee8:	b2d2      	uxtb	r2, r2
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	887b      	ldrh	r3, [r7, #2]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	887a      	ldrh	r2, [r7, #2]
 800aefa:	b2d2      	uxtb	r2, r2
 800aefc:	701a      	strb	r2, [r3, #0]
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800af0a:	b480      	push	{r7}
 800af0c:	b083      	sub	sp, #12
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	607a      	str	r2, [r7, #4]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	b2d2      	uxtb	r2, r2
 800af1e:	701a      	strb	r2, [r3, #0]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	0a1b      	lsrs	r3, r3, #8
 800af24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	1c5a      	adds	r2, r3, #1
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	0a1b      	lsrs	r3, r3, #8
 800af36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	607a      	str	r2, [r7, #4]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	b2d2      	uxtb	r2, r2
 800af42:	701a      	strb	r2, [r3, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	0a1b      	lsrs	r3, r3, #8
 800af48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
}
 800af56:	bf00      	nop
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800af62:	b480      	push	{r7}
 800af64:	b087      	sub	sp, #28
 800af66:	af00      	add	r7, sp, #0
 800af68:	60f8      	str	r0, [r7, #12]
 800af6a:	60b9      	str	r1, [r7, #8]
 800af6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00d      	beq.n	800af98 <mem_cpy+0x36>
		do *d++ = *s++; while (--cnt);
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	1c53      	adds	r3, r2, #1
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	1c59      	adds	r1, r3, #1
 800af86:	6179      	str	r1, [r7, #20]
 800af88:	7812      	ldrb	r2, [r2, #0]
 800af8a:	701a      	strb	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3b01      	subs	r3, #1
 800af90:	607b      	str	r3, [r7, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1f1      	bne.n	800af7c <mem_cpy+0x1a>
	}
}
 800af98:	bf00      	nop
 800af9a:	371c      	adds	r7, #28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800afa4:	b480      	push	{r7}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	617b      	str	r3, [r7, #20]

	do *d++ = (BYTE)val; while (--cnt);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	617a      	str	r2, [r7, #20]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	701a      	strb	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1f3      	bne.n	800afb4 <mem_set+0x10>
}
 800afcc:	bf00      	nop
 800afce:	bf00      	nop
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800afda:	b480      	push	{r7}
 800afdc:	b089      	sub	sp, #36	; 0x24
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	61fb      	str	r3, [r7, #28]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	61fa      	str	r2, [r7, #28]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	4619      	mov	r1, r3
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	61ba      	str	r2, [r7, #24]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	1acb      	subs	r3, r1, r3
 800b006:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	607b      	str	r3, [r7, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <mem_cmp+0x40>
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0eb      	beq.n	800aff2 <mem_cmp+0x18>

	return r;
 800b01a:	697b      	ldr	r3, [r7, #20]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3724      	adds	r7, #36	; 0x24
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b032:	e002      	b.n	800b03a <chk_chr+0x12>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3301      	adds	r3, #1
 800b038:	607b      	str	r3, [r7, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d005      	beq.n	800b04e <chk_chr+0x26>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	461a      	mov	r2, r3
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d1f2      	bne.n	800b034 <chk_chr+0xc>
	return *str;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	781b      	ldrb	r3, [r3, #0]
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b086      	sub	sp, #24
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	78db      	ldrb	r3, [r3, #3]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d034      	beq.n	800b0dc <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b076:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	7858      	ldrb	r0, [r3, #1]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b082:	2301      	movs	r3, #1
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	f7fb fdd7 	bl	8006c38 <disk_write>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b090:	2301      	movs	r3, #1
 800b092:	73fb      	strb	r3, [r7, #15]
 800b094:	e022      	b.n	800b0dc <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	1ad2      	subs	r2, r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d217      	bcs.n	800b0dc <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	789b      	ldrb	r3, [r3, #2]
 800b0b0:	613b      	str	r3, [r7, #16]
 800b0b2:	e010      	b.n	800b0d6 <sync_window+0x78>
					wsect += fs->fsize;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	699b      	ldr	r3, [r3, #24]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	7858      	ldrb	r0, [r3, #1]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	f7fb fdb4 	bl	8006c38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	613b      	str	r3, [r7, #16]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d8eb      	bhi.n	800b0b4 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d01b      	beq.n	800b136 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff ffad 	bl	800b05e <sync_window>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d113      	bne.n	800b136 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	7858      	ldrb	r0, [r3, #1]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b118:	2301      	movs	r3, #1
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	f7fb fd24 	bl	8006b68 <disk_read>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b126:	f04f 33ff 	mov.w	r3, #4294967295
 800b12a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff ff88 	bl	800b05e <sync_window>
 800b14e:	4603      	mov	r3, r0
 800b150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d158      	bne.n	800b20a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d148      	bne.n	800b1f2 <sync_fs+0xb2>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	791b      	ldrb	r3, [r3, #4]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d144      	bne.n	800b1f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3330      	adds	r3, #48	; 0x30
 800b16c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b170:	2100      	movs	r1, #0
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff ff16 	bl	800afa4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3330      	adds	r3, #48	; 0x30
 800b17c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b180:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff fea5 	bl	800aed4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3330      	adds	r3, #48	; 0x30
 800b18e:	4921      	ldr	r1, [pc, #132]	; (800b214 <sync_fs+0xd4>)
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff feba 	bl	800af0a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3330      	adds	r3, #48	; 0x30
 800b19a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b19e:	491e      	ldr	r1, [pc, #120]	; (800b218 <sync_fs+0xd8>)
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff feb2 	bl	800af0a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3330      	adds	r3, #48	; 0x30
 800b1aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7ff fea8 	bl	800af0a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	3330      	adds	r3, #48	; 0x30
 800b1be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	f7ff fe9e 	bl	800af0a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	1c5a      	adds	r2, r3, #1
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	7858      	ldrb	r0, [r3, #1]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	f7fb fd26 	bl	8006c38 <disk_write>
			fs->fsi_flag = 0;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	785b      	ldrb	r3, [r3, #1]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fb fd9a 	bl	8006d34 <disk_ioctl>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <sync_fs+0xca>
 800b206:	2301      	movs	r3, #1
 800b208:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	41615252 	.word	0x41615252
 800b218:	61417272 	.word	0x61417272

0800b21c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	3b02      	subs	r3, #2
 800b22a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	3b02      	subs	r3, #2
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d301      	bcc.n	800b23c <clust2sect+0x20>
 800b238:	2300      	movs	r3, #0
 800b23a:	e008      	b.n	800b24e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	895b      	ldrh	r3, [r3, #10]
 800b240:	461a      	mov	r2, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	fb03 f202 	mul.w	r2, r3, r2
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24c:	4413      	add	r3, r2
}
 800b24e:	4618      	mov	r0, r3
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr

0800b25a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b086      	sub	sp, #24
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d904      	bls.n	800b27a <get_fat+0x20>
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d302      	bcc.n	800b280 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b27a:	2301      	movs	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	e08d      	b.n	800b39c <get_fat+0x142>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b280:	f04f 33ff 	mov.w	r3, #4294967295
 800b284:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	2b03      	cmp	r3, #3
 800b28c:	d061      	beq.n	800b352 <get_fat+0xf8>
 800b28e:	2b03      	cmp	r3, #3
 800b290:	dc7a      	bgt.n	800b388 <get_fat+0x12e>
 800b292:	2b01      	cmp	r3, #1
 800b294:	d002      	beq.n	800b29c <get_fat+0x42>
 800b296:	2b02      	cmp	r3, #2
 800b298:	d042      	beq.n	800b320 <get_fat+0xc6>
 800b29a:	e075      	b.n	800b388 <get_fat+0x12e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	085b      	lsrs	r3, r3, #1
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6a1a      	ldr	r2, [r3, #32]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	0a5b      	lsrs	r3, r3, #9
 800b2b2:	4413      	add	r3, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6938      	ldr	r0, [r7, #16]
 800b2b8:	f7ff ff15 	bl	800b0e6 <move_window>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d165      	bne.n	800b38e <get_fat+0x134>
			wc = fs->win[bc++ % SS(fs)];
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	60fa      	str	r2, [r7, #12]
 800b2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	6a1a      	ldr	r2, [r3, #32]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	0a5b      	lsrs	r3, r3, #9
 800b2de:	4413      	add	r3, r2
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6938      	ldr	r0, [r7, #16]
 800b2e4:	f7ff feff 	bl	800b0e6 <move_window>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d151      	bne.n	800b392 <get_fat+0x138>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2fc:	021b      	lsls	r3, r3, #8
 800b2fe:	461a      	mov	r2, r3
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	4313      	orrs	r3, r2
 800b304:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <get_fat+0xbc>
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	091b      	lsrs	r3, r3, #4
 800b314:	e002      	b.n	800b31c <get_fat+0xc2>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b31c:	617b      	str	r3, [r7, #20]
			break;
 800b31e:	e03d      	b.n	800b39c <get_fat+0x142>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6a1a      	ldr	r2, [r3, #32]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	0a1b      	lsrs	r3, r3, #8
 800b328:	4413      	add	r3, r2
 800b32a:	4619      	mov	r1, r3
 800b32c:	6938      	ldr	r0, [r7, #16]
 800b32e:	f7ff feda 	bl	800b0e6 <move_window>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d12e      	bne.n	800b396 <get_fat+0x13c>
			val = ld_word(&fs->win[clst * 2 % SS(fs)]);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b340:	3330      	adds	r3, #48	; 0x30
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4413      	add	r3, r2
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff fd89 	bl	800ae5e <ld_word>
 800b34c:	4603      	mov	r3, r0
 800b34e:	617b      	str	r3, [r7, #20]
			break;
 800b350:	e024      	b.n	800b39c <get_fat+0x142>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6a1a      	ldr	r2, [r3, #32]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	09db      	lsrs	r3, r3, #7
 800b35a:	4413      	add	r3, r2
 800b35c:	4619      	mov	r1, r3
 800b35e:	6938      	ldr	r0, [r7, #16]
 800b360:	f7ff fec1 	bl	800b0e6 <move_window>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d117      	bne.n	800b39a <get_fat+0x140>
			val = ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0x0FFFFFFF;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b372:	3330      	adds	r3, #48	; 0x30
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	4413      	add	r3, r2
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff fd88 	bl	800ae8e <ld_dword>
 800b37e:	4603      	mov	r3, r0
 800b380:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b384:	617b      	str	r3, [r7, #20]
			break;
 800b386:	e009      	b.n	800b39c <get_fat+0x142>
				}
			}
			/* Go default */
#endif
		default:
			val = 1;	/* Internal error */
 800b388:	2301      	movs	r3, #1
 800b38a:	617b      	str	r3, [r7, #20]
 800b38c:	e006      	b.n	800b39c <get_fat+0x142>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b38e:	bf00      	nop
 800b390:	e004      	b.n	800b39c <get_fat+0x142>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b392:	bf00      	nop
 800b394:	e002      	b.n	800b39c <get_fat+0x142>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b396:	bf00      	nop
 800b398:	e000      	b.n	800b39c <get_fat+0x142>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b39a:	bf00      	nop
		}
	}

	return val;
 800b39c:	697b      	ldr	r3, [r7, #20]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b3a6:	b590      	push	{r4, r7, lr}
 800b3a8:	b089      	sub	sp, #36	; 0x24
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	f240 80d4 	bls.w	800b566 <put_fat+0x1c0>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	f080 80ce 	bcs.w	800b566 <put_fat+0x1c0>
		switch (fs->fs_type) {
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	f000 8093 	beq.w	800b4fa <put_fat+0x154>
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	f300 80c6 	bgt.w	800b566 <put_fat+0x1c0>
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d002      	beq.n	800b3e4 <put_fat+0x3e>
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d06c      	beq.n	800b4bc <put_fat+0x116>
 800b3e2:	e0c0      	b.n	800b566 <put_fat+0x1c0>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	61bb      	str	r3, [r7, #24]
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	085b      	lsrs	r3, r3, #1
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6a1a      	ldr	r2, [r3, #32]
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	0a5b      	lsrs	r3, r3, #9
 800b3fa:	4413      	add	r3, r2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f7ff fe71 	bl	800b0e6 <move_window>
 800b404:	4603      	mov	r3, r0
 800b406:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b408:	7ffb      	ldrb	r3, [r7, #31]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f040 80a4 	bne.w	800b558 <put_fat+0x1b2>
			p = &fs->win[bc++ % SS(fs)];
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	61ba      	str	r2, [r7, #24]
 800b416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b41a:	3330      	adds	r3, #48	; 0x30
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4413      	add	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00d      	beq.n	800b448 <put_fat+0xa2>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b25b      	sxtb	r3, r3
 800b432:	f003 030f 	and.w	r3, r3, #15
 800b436:	b25a      	sxtb	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	4313      	orrs	r3, r2
 800b442:	b25b      	sxtb	r3, r3
 800b444:	b2db      	uxtb	r3, r3
 800b446:	e001      	b.n	800b44c <put_fat+0xa6>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	697a      	ldr	r2, [r7, #20]
 800b44e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2201      	movs	r2, #1
 800b454:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6a1a      	ldr	r2, [r3, #32]
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	0a5b      	lsrs	r3, r3, #9
 800b45e:	4413      	add	r3, r2
 800b460:	4619      	mov	r1, r3
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f7ff fe3f 	bl	800b0e6 <move_window>
 800b468:	4603      	mov	r3, r0
 800b46a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b46c:	7ffb      	ldrb	r3, [r7, #31]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d174      	bne.n	800b55c <put_fat+0x1b6>
			p = &fs->win[bc % SS(fs)];
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b478:	3330      	adds	r3, #48	; 0x30
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4413      	add	r3, r2
 800b47e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	f003 0301 	and.w	r3, r3, #1
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <put_fat+0xec>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	091b      	lsrs	r3, r3, #4
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	e00e      	b.n	800b4b0 <put_fat+0x10a>
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	b25b      	sxtb	r3, r3
 800b498:	f023 030f 	bic.w	r3, r3, #15
 800b49c:	b25a      	sxtb	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	0a1b      	lsrs	r3, r3, #8
 800b4a2:	b25b      	sxtb	r3, r3
 800b4a4:	f003 030f 	and.w	r3, r3, #15
 800b4a8:	b25b      	sxtb	r3, r3
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	b25b      	sxtb	r3, r3
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	70da      	strb	r2, [r3, #3]
			break;
 800b4ba:	e054      	b.n	800b566 <put_fat+0x1c0>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6a1a      	ldr	r2, [r3, #32]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	0a1b      	lsrs	r3, r3, #8
 800b4c4:	4413      	add	r3, r2
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f7ff fe0c 	bl	800b0e6 <move_window>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4d2:	7ffb      	ldrb	r3, [r7, #31]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d143      	bne.n	800b560 <put_fat+0x1ba>
			st_word(&fs->win[clst * 2 % SS(fs)], (WORD)val);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b4e0:	3330      	adds	r3, #48	; 0x30
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	b292      	uxth	r2, r2
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff fcf1 	bl	800aed4 <st_word>
			fs->wflag = 1;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	70da      	strb	r2, [r3, #3]
			break;
 800b4f8:	e035      	b.n	800b566 <put_fat+0x1c0>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6a1a      	ldr	r2, [r3, #32]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	09db      	lsrs	r3, r3, #7
 800b502:	4413      	add	r3, r2
 800b504:	4619      	mov	r1, r3
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f7ff fded 	bl	800b0e6 <move_window>
 800b50c:	4603      	mov	r3, r0
 800b50e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b510:	7ffb      	ldrb	r3, [r7, #31]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d126      	bne.n	800b564 <put_fat+0x1be>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0xF0000000);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b524:	3330      	adds	r3, #48	; 0x30
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff fcaf 	bl	800ae8e <ld_dword>
 800b530:	4603      	mov	r3, r0
 800b532:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b536:	4323      	orrs	r3, r4
 800b538:	607b      	str	r3, [r7, #4]
			}
			st_dword(&fs->win[clst * 4 % SS(fs)], val);
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b542:	3330      	adds	r3, #48	; 0x30
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	4413      	add	r3, r2
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff fcdd 	bl	800af0a <st_dword>
			fs->wflag = 1;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2201      	movs	r2, #1
 800b554:	70da      	strb	r2, [r3, #3]
			break;
 800b556:	e006      	b.n	800b566 <put_fat+0x1c0>
			if (res != FR_OK) break;
 800b558:	bf00      	nop
 800b55a:	e004      	b.n	800b566 <put_fat+0x1c0>
			if (res != FR_OK) break;
 800b55c:	bf00      	nop
 800b55e:	e002      	b.n	800b566 <put_fat+0x1c0>
			if (res != FR_OK) break;
 800b560:	bf00      	nop
 800b562:	e000      	b.n	800b566 <put_fat+0x1c0>
			if (res != FR_OK) break;
 800b564:	bf00      	nop
		}
	}
	return res;
 800b566:	7ffb      	ldrb	r3, [r7, #31]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3724      	adds	r7, #36	; 0x24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd90      	pop	{r4, r7, pc}

0800b570 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d904      	bls.n	800b596 <remove_chain+0x26>
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	429a      	cmp	r2, r3
 800b594:	d301      	bcc.n	800b59a <remove_chain+0x2a>
 800b596:	2302      	movs	r3, #2
 800b598:	e049      	b.n	800b62e <remove_chain+0xbe>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00c      	beq.n	800b5ba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	69b8      	ldr	r0, [r7, #24]
 800b5a8:	f7ff fefd 	bl	800b3a6 <put_fat>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b5b0:	7ffb      	ldrb	r3, [r7, #31]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <remove_chain+0x4a>
 800b5b6:	7ffb      	ldrb	r3, [r7, #31]
 800b5b8:	e039      	b.n	800b62e <remove_chain+0xbe>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b5ba:	68b9      	ldr	r1, [r7, #8]
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f7ff fe4c 	bl	800b25a <get_fat>
 800b5c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d02f      	beq.n	800b62a <remove_chain+0xba>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d101      	bne.n	800b5d4 <remove_chain+0x64>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e02c      	b.n	800b62e <remove_chain+0xbe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5da:	d101      	bne.n	800b5e0 <remove_chain+0x70>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e026      	b.n	800b62e <remove_chain+0xbe>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	69b8      	ldr	r0, [r7, #24]
 800b5e6:	f7ff fede 	bl	800b3a6 <put_fat>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b5ee:	7ffb      	ldrb	r3, [r7, #31]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <remove_chain+0x88>
 800b5f4:	7ffb      	ldrb	r3, [r7, #31]
 800b5f6:	e01a      	b.n	800b62e <remove_chain+0xbe>
		}
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b600:	d00b      	beq.n	800b61a <remove_chain+0xaa>
			fs->free_clst++;
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	791b      	ldrb	r3, [r3, #4]
 800b610:	f043 0301 	orr.w	r3, r3, #1
 800b614:	b2da      	uxtb	r2, r3
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	429a      	cmp	r2, r3
 800b626:	d3c8      	bcc.n	800b5ba <remove_chain+0x4a>
 800b628:	e000      	b.n	800b62c <remove_chain+0xbc>
		if (nxt == 0) break;				/* Empty cluster? */
 800b62a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b088      	sub	sp, #32
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10d      	bne.n	800b668 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <create_chain+0x2c>
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d31b      	bcc.n	800b69a <create_chain+0x64>
 800b662:	2301      	movs	r3, #1
 800b664:	61bb      	str	r3, [r7, #24]
 800b666:	e018      	b.n	800b69a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff fdf5 	bl	800b25a <get_fat>
 800b670:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid value */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d801      	bhi.n	800b67c <create_chain+0x46>
 800b678:	2301      	movs	r3, #1
 800b67a:	e070      	b.n	800b75e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d101      	bne.n	800b688 <create_chain+0x52>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	e06a      	b.n	800b75e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d201      	bcs.n	800b696 <create_chain+0x60>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	e063      	b.n	800b75e <create_chain+0x128>
		scl = clst;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	69fa      	ldr	r2, [r7, #28]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d307      	bcc.n	800b6be <create_chain+0x88>
				ncl = 2;
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d901      	bls.n	800b6be <create_chain+0x88>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e04f      	b.n	800b75e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b6be:	69f9      	ldr	r1, [r7, #28]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff fdca 	bl	800b25a <get_fat>
 800b6c6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00e      	beq.n	800b6ec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d003      	beq.n	800b6dc <create_chain+0xa6>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d101      	bne.n	800b6e0 <create_chain+0xaa>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	e03e      	b.n	800b75e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d1da      	bne.n	800b69e <create_chain+0x68>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	e038      	b.n	800b75e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b6ec:	bf00      	nop
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f2:	69f9      	ldr	r1, [r7, #28]
 800b6f4:	6938      	ldr	r0, [r7, #16]
 800b6f6:	f7ff fe56 	bl	800b3a6 <put_fat>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst) {
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d109      	bne.n	800b718 <create_chain+0xe2>
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d006      	beq.n	800b718 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6938      	ldr	r0, [r7, #16]
 800b710:	f7ff fe49 	bl	800b3a6 <put_fat>
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d116      	bne.n	800b74c <create_chain+0x116>
		fs->last_clst = ncl;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	60da      	str	r2, [r3, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	691a      	ldr	r2, [r3, #16]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	3b02      	subs	r3, #2
 800b72e:	429a      	cmp	r2, r3
 800b730:	d204      	bcs.n	800b73c <create_chain+0x106>
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	1e5a      	subs	r2, r3, #1
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	791b      	ldrb	r3, [r3, #4]
 800b740:	f043 0301 	orr.w	r3, r3, #1
 800b744:	b2da      	uxtb	r2, r3
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	711a      	strb	r2, [r3, #4]
 800b74a:	e007      	b.n	800b75c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d102      	bne.n	800b758 <create_chain+0x122>
 800b752:	f04f 33ff 	mov.w	r3, #4294967295
 800b756:	e000      	b.n	800b75a <create_chain+0x124>
 800b758:	2301      	movs	r3, #1
 800b75a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b75c:	69fb      	ldr	r3, [r7, #28]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3720      	adds	r7, #32
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b086      	sub	sp, #24
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b77c:	d204      	bcs.n	800b788 <dir_sdi+0x22>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f003 031f 	and.w	r3, r3, #31
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <dir_sdi+0x26>
		return FR_INT_ERR;
 800b788:	2302      	movs	r3, #2
 800b78a:	e063      	b.n	800b854 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d106      	bne.n	800b7ac <dir_sdi+0x46>
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d902      	bls.n	800b7ac <dir_sdi+0x46>
		clst = fs->dirbase;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10c      	bne.n	800b7cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	095b      	lsrs	r3, r3, #5
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	8912      	ldrh	r2, [r2, #8]
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d301      	bcc.n	800b7c2 <dir_sdi+0x5c>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e048      	b.n	800b854 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	619a      	str	r2, [r3, #24]
 800b7ca:	e029      	b.n	800b820 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	895b      	ldrh	r3, [r3, #10]
 800b7d0:	025b      	lsls	r3, r3, #9
 800b7d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b7d4:	e019      	b.n	800b80a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff fd3d 	bl	800b25a <get_fat>
 800b7e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e8:	d101      	bne.n	800b7ee <dir_sdi+0x88>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e032      	b.n	800b854 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d904      	bls.n	800b7fe <dir_sdi+0x98>
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	697a      	ldr	r2, [r7, #20]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d301      	bcc.n	800b802 <dir_sdi+0x9c>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e028      	b.n	800b854 <dir_sdi+0xee>
			ofs -= csz;
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d2e1      	bcs.n	800b7d6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b812:	6979      	ldr	r1, [r7, #20]
 800b814:	6938      	ldr	r0, [r7, #16]
 800b816:	f7ff fd01 	bl	800b21c <clust2sect>
 800b81a:	4602      	mov	r2, r0
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <dir_sdi+0xcc>
 800b82e:	2302      	movs	r3, #2
 800b830:	e010      	b.n	800b854 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	699a      	ldr	r2, [r3, #24]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	0a5b      	lsrs	r3, r3, #9
 800b83a:	441a      	add	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b84c:	441a      	add	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	3320      	adds	r3, #32
 800b872:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <dir_next+0x28>
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b882:	d301      	bcc.n	800b888 <dir_next+0x2c>
 800b884:	2304      	movs	r3, #4
 800b886:	e0a9      	b.n	800b9dc <dir_next+0x180>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f040 8098 	bne.w	800b9c4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10b      	bne.n	800b8be <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	095b      	lsrs	r3, r3, #5
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	8912      	ldrh	r2, [r2, #8]
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	f0c0 8088 	bcc.w	800b9c4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	619a      	str	r2, [r3, #24]
 800b8ba:	2304      	movs	r3, #4
 800b8bc:	e08e      	b.n	800b9dc <dir_next+0x180>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	0a5b      	lsrs	r3, r3, #9
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	8952      	ldrh	r2, [r2, #10]
 800b8c6:	3a01      	subs	r2, #1
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d17a      	bne.n	800b9c4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7ff fcbf 	bl	800b25a <get_fat>
 800b8dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d801      	bhi.n	800b8e8 <dir_next+0x8c>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e079      	b.n	800b9dc <dir_next+0x180>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ee:	d101      	bne.n	800b8f4 <dir_next+0x98>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e073      	b.n	800b9dc <dir_next+0x180>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d358      	bcc.n	800b9b0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d104      	bne.n	800b90e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	619a      	str	r2, [r3, #24]
 800b90a:	2304      	movs	r3, #4
 800b90c:	e066      	b.n	800b9dc <dir_next+0x180>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f7ff fe8d 	bl	800b636 <create_chain>
 800b91c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <dir_next+0xcc>
 800b924:	2307      	movs	r3, #7
 800b926:	e059      	b.n	800b9dc <dir_next+0x180>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d101      	bne.n	800b932 <dir_next+0xd6>
 800b92e:	2302      	movs	r3, #2
 800b930:	e054      	b.n	800b9dc <dir_next+0x180>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b938:	d101      	bne.n	800b93e <dir_next+0xe2>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e04e      	b.n	800b9dc <dir_next+0x180>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f7ff fb8d 	bl	800b05e <sync_window>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <dir_next+0xf2>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e046      	b.n	800b9dc <dir_next+0x180>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3330      	adds	r3, #48	; 0x30
 800b952:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b956:	2100      	movs	r1, #0
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fb23 	bl	800afa4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b95e:	2300      	movs	r3, #0
 800b960:	613b      	str	r3, [r7, #16]
 800b962:	6979      	ldr	r1, [r7, #20]
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7ff fc59 	bl	800b21c <clust2sect>
 800b96a:	4602      	mov	r2, r0
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	62da      	str	r2, [r3, #44]	; 0x2c
 800b970:	e012      	b.n	800b998 <dir_next+0x13c>
						fs->wflag = 1;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2201      	movs	r2, #1
 800b976:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff fb70 	bl	800b05e <sync_window>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <dir_next+0x12c>
 800b984:	2301      	movs	r3, #1
 800b986:	e029      	b.n	800b9dc <dir_next+0x180>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	3301      	adds	r3, #1
 800b98c:	613b      	str	r3, [r7, #16]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b992:	1c5a      	adds	r2, r3, #1
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	62da      	str	r2, [r3, #44]	; 0x2c
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	895b      	ldrh	r3, [r3, #10]
 800b99c:	461a      	mov	r2, r3
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d3e6      	bcc.n	800b972 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 800b9b6:	6979      	ldr	r1, [r7, #20]
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f7ff fc2f 	bl	800b21c <clust2sect>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	611a      	str	r2, [r3, #16]
	dp->dir = &fs->win[ofs % SS(fs)];	/* Pointer to the entry in the win[] */
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d0:	3330      	adds	r3, #48	; 0x30
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	441a      	add	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff feb5 	bl	800b766 <dir_sdi>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d12b      	bne.n	800ba5e <dir_alloc+0x7a>
		n = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7ff fb68 	bl	800b0e6 <move_window>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d11d      	bne.n	800ba5c <dir_alloc+0x78>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	69db      	ldr	r3, [r3, #28]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2be5      	cmp	r3, #229	; 0xe5
 800ba28:	d004      	beq.n	800ba34 <dir_alloc+0x50>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d107      	bne.n	800ba44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	3301      	adds	r3, #1
 800ba38:	613b      	str	r3, [r7, #16]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d102      	bne.n	800ba48 <dir_alloc+0x64>
 800ba42:	e00c      	b.n	800ba5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ba44:	2300      	movs	r3, #0
 800ba46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ba48:	2101      	movs	r1, #1
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff ff06 	bl	800b85c <dir_next>
 800ba50:	4603      	mov	r3, r0
 800ba52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0d7      	beq.n	800ba0a <dir_alloc+0x26>
 800ba5a:	e000      	b.n	800ba5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ba5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	d101      	bne.n	800ba68 <dir_alloc+0x84>
 800ba64:	2307      	movs	r3, #7
 800ba66:	75fb      	strb	r3, [r7, #23]
	return res;
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	331a      	adds	r3, #26
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff f9ec 	bl	800ae5e <ld_word>
 800ba86:	4603      	mov	r3, r0
 800ba88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	d109      	bne.n	800baa6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	3314      	adds	r3, #20
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff f9e1 	bl	800ae5e <ld_word>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	041b      	lsls	r3, r3, #16
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800baa6:	68fb      	ldr	r3, [r7, #12]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	331a      	adds	r3, #26
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	b292      	uxth	r2, r2
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff fa04 	bl	800aed4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d109      	bne.n	800bae8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f103 0214 	add.w	r2, r3, #20
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	0c1b      	lsrs	r3, r3, #16
 800bade:	b29b      	uxth	r3, r3
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f7ff f9f6 	bl	800aed4 <st_word>
	}
}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800baf0:	b590      	push	{r4, r7, lr}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	331a      	adds	r3, #26
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff f9ad 	bl	800ae5e <ld_word>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <cmp_lfn+0x1e>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	e059      	b.n	800bbc2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb16:	1e5a      	subs	r2, r3, #1
 800bb18:	4613      	mov	r3, r2
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb24:	2301      	movs	r3, #1
 800bb26:	81fb      	strh	r3, [r7, #14]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	613b      	str	r3, [r7, #16]
 800bb2c:	e033      	b.n	800bb96 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb2e:	4a27      	ldr	r2, [pc, #156]	; (800bbcc <cmp_lfn+0xdc>)
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	4413      	add	r3, r2
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff f98e 	bl	800ae5e <ld_word>
 800bb42:	4603      	mov	r3, r0
 800bb44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bb46:	89fb      	ldrh	r3, [r7, #14]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01a      	beq.n	800bb82 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2bfe      	cmp	r3, #254	; 0xfe
 800bb50:	d812      	bhi.n	800bb78 <cmp_lfn+0x88>
 800bb52:	89bb      	ldrh	r3, [r7, #12]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f002 fa15 	bl	800df84 <ff_wtoupper>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	461c      	mov	r4, r3
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	1c5a      	adds	r2, r3, #1
 800bb62:	617a      	str	r2, [r7, #20]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	4413      	add	r3, r2
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f002 fa09 	bl	800df84 <ff_wtoupper>
 800bb72:	4603      	mov	r3, r0
 800bb74:	429c      	cmp	r4, r3
 800bb76:	d001      	beq.n	800bb7c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e022      	b.n	800bbc2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800bb7c:	89bb      	ldrh	r3, [r7, #12]
 800bb7e:	81fb      	strh	r3, [r7, #14]
 800bb80:	e006      	b.n	800bb90 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb82:	89bb      	ldrh	r3, [r7, #12]
 800bb84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d001      	beq.n	800bb90 <cmp_lfn+0xa0>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e018      	b.n	800bbc2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	3301      	adds	r3, #1
 800bb94:	613b      	str	r3, [r7, #16]
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2b0c      	cmp	r3, #12
 800bb9a:	d9c8      	bls.n	800bb2e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <cmp_lfn+0xd0>
 800bba8:	89fb      	ldrh	r3, [r7, #14]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d008      	beq.n	800bbc0 <cmp_lfn+0xd0>
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <cmp_lfn+0xd0>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	e000      	b.n	800bbc2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bbc0:	2301      	movs	r3, #1
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	371c      	adds	r7, #28
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd90      	pop	{r4, r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	0800f248 	.word	0x0800f248

0800bbd0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	331a      	adds	r3, #26
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff f93d 	bl	800ae5e <ld_word>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <pick_lfn+0x1e>
 800bbea:	2300      	movs	r3, #0
 800bbec:	e04d      	b.n	800bc8a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbf6:	1e5a      	subs	r2, r3, #1
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc04:	2301      	movs	r3, #1
 800bc06:	81fb      	strh	r3, [r7, #14]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	613b      	str	r3, [r7, #16]
 800bc0c:	e028      	b.n	800bc60 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bc0e:	4a21      	ldr	r2, [pc, #132]	; (800bc94 <pick_lfn+0xc4>)
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	4413      	add	r3, r2
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff f91e 	bl	800ae5e <ld_word>
 800bc22:	4603      	mov	r3, r0
 800bc24:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bc26:	89fb      	ldrh	r3, [r7, #14]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00f      	beq.n	800bc4c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2bfe      	cmp	r3, #254	; 0xfe
 800bc30:	d901      	bls.n	800bc36 <pick_lfn+0x66>
 800bc32:	2300      	movs	r3, #0
 800bc34:	e029      	b.n	800bc8a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc36:	89bb      	ldrh	r3, [r7, #12]
 800bc38:	81fb      	strh	r3, [r7, #14]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	617a      	str	r2, [r7, #20]
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	4413      	add	r3, r2
 800bc46:	89fa      	ldrh	r2, [r7, #14]
 800bc48:	801a      	strh	r2, [r3, #0]
 800bc4a:	e006      	b.n	800bc5a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bc4c:	89bb      	ldrh	r3, [r7, #12]
 800bc4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d001      	beq.n	800bc5a <pick_lfn+0x8a>
 800bc56:	2300      	movs	r3, #0
 800bc58:	e017      	b.n	800bc8a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	613b      	str	r3, [r7, #16]
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	2b0c      	cmp	r3, #12
 800bc64:	d9d3      	bls.n	800bc0e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2bfe      	cmp	r3, #254	; 0xfe
 800bc76:	d901      	bls.n	800bc7c <pick_lfn+0xac>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	e006      	b.n	800bc8a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	005b      	lsls	r3, r3, #1
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	2200      	movs	r2, #0
 800bc86:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bc88:	2301      	movs	r3, #1
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	0800f248 	.word	0x0800f248

0800bc98 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	4611      	mov	r1, r2
 800bca4:	461a      	mov	r2, r3
 800bca6:	460b      	mov	r3, r1
 800bca8:	71fb      	strb	r3, [r7, #7]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	330d      	adds	r3, #13
 800bcb2:	79ba      	ldrb	r2, [r7, #6]
 800bcb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	330b      	adds	r3, #11
 800bcba:	220f      	movs	r2, #15
 800bcbc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	330c      	adds	r3, #12
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	331a      	adds	r3, #26
 800bcca:	2100      	movs	r1, #0
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff f901 	bl	800aed4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	1e5a      	subs	r2, r3, #1
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	82fb      	strh	r3, [r7, #22]
 800bce6:	2300      	movs	r3, #0
 800bce8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bcea:	8afb      	ldrh	r3, [r7, #22]
 800bcec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d007      	beq.n	800bd04 <put_lfn+0x6c>
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	61fa      	str	r2, [r7, #28]
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4413      	add	r3, r2
 800bd00:	881b      	ldrh	r3, [r3, #0]
 800bd02:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bd04:	4a17      	ldr	r2, [pc, #92]	; (800bd64 <put_lfn+0xcc>)
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	4413      	add	r3, r2
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	8afa      	ldrh	r2, [r7, #22]
 800bd14:	4611      	mov	r1, r2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff f8dc 	bl	800aed4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bd1c:	8afb      	ldrh	r3, [r7, #22]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d102      	bne.n	800bd28 <put_lfn+0x90>
 800bd22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd26:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	61bb      	str	r3, [r7, #24]
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	2b0c      	cmp	r3, #12
 800bd32:	d9da      	bls.n	800bcea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bd34:	8afb      	ldrh	r3, [r7, #22]
 800bd36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d006      	beq.n	800bd4c <put_lfn+0xb4>
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	4413      	add	r3, r2
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d103      	bne.n	800bd54 <put_lfn+0xbc>
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd52:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	79fa      	ldrb	r2, [r7, #7]
 800bd58:	701a      	strb	r2, [r3, #0]
}
 800bd5a:	bf00      	nop
 800bd5c:	3720      	adds	r7, #32
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	0800f248 	.word	0x0800f248

0800bd68 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08c      	sub	sp, #48	; 0x30
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bd76:	220b      	movs	r2, #11
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7ff f8f1 	bl	800af62 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b05      	cmp	r3, #5
 800bd84:	d92b      	bls.n	800bdde <gen_numname+0x76>
		sr = seq;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bd8a:	e022      	b.n	800bdd2 <gen_numname+0x6a>
			wc = *lfn++;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	1c9a      	adds	r2, r3, #2
 800bd90:	607a      	str	r2, [r7, #4]
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bd96:	2300      	movs	r3, #0
 800bd98:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd9a:	e017      	b.n	800bdcc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	005a      	lsls	r2, r3, #1
 800bda0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	4413      	add	r3, r2
 800bda8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bdaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdac:	085b      	lsrs	r3, r3, #1
 800bdae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d005      	beq.n	800bdc6 <gen_numname+0x5e>
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bdc0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bdc4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	3301      	adds	r3, #1
 800bdca:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	2b0f      	cmp	r3, #15
 800bdd0:	d9e4      	bls.n	800bd9c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1d8      	bne.n	800bd8c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bdde:	2307      	movs	r3, #7
 800bde0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	f003 030f 	and.w	r3, r3, #15
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	3330      	adds	r3, #48	; 0x30
 800bdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdf6:	2b39      	cmp	r3, #57	; 0x39
 800bdf8:	d904      	bls.n	800be04 <gen_numname+0x9c>
 800bdfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdfe:	3307      	adds	r3, #7
 800be00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	1e5a      	subs	r2, r3, #1
 800be08:	62ba      	str	r2, [r7, #40]	; 0x28
 800be0a:	3330      	adds	r3, #48	; 0x30
 800be0c:	443b      	add	r3, r7
 800be0e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be12:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	091b      	lsrs	r3, r3, #4
 800be1a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1df      	bne.n	800bde2 <gen_numname+0x7a>
	ns[i] = '~';
 800be22:	f107 0214 	add.w	r2, r7, #20
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	4413      	add	r3, r2
 800be2a:	227e      	movs	r2, #126	; 0x7e
 800be2c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800be2e:	2300      	movs	r3, #0
 800be30:	627b      	str	r3, [r7, #36]	; 0x24
 800be32:	e002      	b.n	800be3a <gen_numname+0xd2>
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	3301      	adds	r3, #1
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
 800be3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	429a      	cmp	r2, r3
 800be40:	d205      	bcs.n	800be4e <gen_numname+0xe6>
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	4413      	add	r3, r2
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b20      	cmp	r3, #32
 800be4c:	d1f2      	bne.n	800be34 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	2b07      	cmp	r3, #7
 800be52:	d807      	bhi.n	800be64 <gen_numname+0xfc>
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	1c5a      	adds	r2, r3, #1
 800be58:	62ba      	str	r2, [r7, #40]	; 0x28
 800be5a:	3330      	adds	r3, #48	; 0x30
 800be5c:	443b      	add	r3, r7
 800be5e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800be62:	e000      	b.n	800be66 <gen_numname+0xfe>
 800be64:	2120      	movs	r1, #32
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	627a      	str	r2, [r7, #36]	; 0x24
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	4413      	add	r3, r2
 800be70:	460a      	mov	r2, r1
 800be72:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	2b07      	cmp	r3, #7
 800be78:	d9e9      	bls.n	800be4e <gen_numname+0xe6>
}
 800be7a:	bf00      	nop
 800be7c:	bf00      	nop
 800be7e:	3730      	adds	r7, #48	; 0x30
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <sum_sfn>:
#if _USE_LFN != 0
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800be90:	230b      	movs	r3, #11
 800be92:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	b2da      	uxtb	r2, r3
 800be98:	0852      	lsrs	r2, r2, #1
 800be9a:	01db      	lsls	r3, r3, #7
 800be9c:	4313      	orrs	r3, r2
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	1c59      	adds	r1, r3, #1
 800bea4:	6079      	str	r1, [r7, #4]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	4413      	add	r3, r2
 800beaa:	73fb      	strb	r3, [r7, #15]
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	3b01      	subs	r3, #1
 800beb0:	60bb      	str	r3, [r7, #8]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1ed      	bne.n	800be94 <sum_sfn+0x10>
	return sum;
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b086      	sub	sp, #24
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bed0:	2304      	movs	r3, #4
 800bed2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800beda:	23ff      	movs	r3, #255	; 0xff
 800bedc:	757b      	strb	r3, [r7, #21]
 800bede:	23ff      	movs	r3, #255	; 0xff
 800bee0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bee2:	e081      	b.n	800bfe8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	4619      	mov	r1, r3
 800beea:	6938      	ldr	r0, [r7, #16]
 800beec:	f7ff f8fb 	bl	800b0e6 <move_window>
 800bef0:	4603      	mov	r3, r0
 800bef2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d17c      	bne.n	800bff4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 800bf02:	7dbb      	ldrb	r3, [r7, #22]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <dir_read+0x48>
 800bf08:	2304      	movs	r3, #4
 800bf0a:	75fb      	strb	r3, [r7, #23]
 800bf0c:	e077      	b.n	800bffe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* At the FAT12/16/32 */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	330b      	adds	r3, #11
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf1a:	73fb      	strb	r3, [r7, #15]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	7bfa      	ldrb	r2, [r7, #15]
 800bf20:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bf22:	7dbb      	ldrb	r3, [r7, #22]
 800bf24:	2be5      	cmp	r3, #229	; 0xe5
 800bf26:	d00e      	beq.n	800bf46 <dir_read+0x80>
 800bf28:	7dbb      	ldrb	r3, [r7, #22]
 800bf2a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf2c:	d00b      	beq.n	800bf46 <dir_read+0x80>
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	f023 0320 	bic.w	r3, r3, #32
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	bf0c      	ite	eq
 800bf38:	2301      	moveq	r3, #1
 800bf3a:	2300      	movne	r3, #0
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	461a      	mov	r2, r3
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d002      	beq.n	800bf4c <dir_read+0x86>
				ord = 0xFF;
 800bf46:	23ff      	movs	r3, #255	; 0xff
 800bf48:	757b      	strb	r3, [r7, #21]
 800bf4a:	e044      	b.n	800bfd6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
 800bf4e:	2b0f      	cmp	r3, #15
 800bf50:	d12f      	bne.n	800bfb2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bf52:	7dbb      	ldrb	r3, [r7, #22]
 800bf54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	69db      	ldr	r3, [r3, #28]
 800bf60:	7b5b      	ldrb	r3, [r3, #13]
 800bf62:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;
 800bf64:	7dbb      	ldrb	r3, [r7, #22]
 800bf66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6a:	75bb      	strb	r3, [r7, #22]
 800bf6c:	7dbb      	ldrb	r3, [r7, #22]
 800bf6e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	691a      	ldr	r2, [r3, #16]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	625a      	str	r2, [r3, #36]	; 0x24
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 800bf78:	7dba      	ldrb	r2, [r7, #22]
 800bf7a:	7d7b      	ldrb	r3, [r7, #21]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d115      	bne.n	800bfac <dir_read+0xe6>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	330d      	adds	r3, #13
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	7d3a      	ldrb	r2, [r7, #20]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d10e      	bne.n	800bfac <dir_read+0xe6>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	4619      	mov	r1, r3
 800bf98:	4610      	mov	r0, r2
 800bf9a:	f7ff fe19 	bl	800bbd0 <pick_lfn>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <dir_read+0xe6>
 800bfa4:	7d7b      	ldrb	r3, [r7, #21]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	e000      	b.n	800bfae <dir_read+0xe8>
 800bfac:	23ff      	movs	r3, #255	; 0xff
 800bfae:	757b      	strb	r3, [r7, #21]
 800bfb0:	e011      	b.n	800bfd6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bfb2:	7d7b      	ldrb	r3, [r7, #21]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d109      	bne.n	800bfcc <dir_read+0x106>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	69db      	ldr	r3, [r3, #28]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff ff61 	bl	800be84 <sum_sfn>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	7d3b      	ldrb	r3, [r7, #20]
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d015      	beq.n	800bff8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd2:	625a      	str	r2, [r3, #36]	; 0x24
					}
					break;
 800bfd4:	e010      	b.n	800bff8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff fc3f 	bl	800b85c <dir_next>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d109      	bne.n	800bffc <dir_read+0x136>
	while (dp->sect) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f47f af79 	bne.w	800bee4 <dir_read+0x1e>
 800bff2:	e004      	b.n	800bffe <dir_read+0x138>
		if (res != FR_OK) break;
 800bff4:	bf00      	nop
 800bff6:	e002      	b.n	800bffe <dir_read+0x138>
					break;
 800bff8:	bf00      	nop
 800bffa:	e000      	b.n	800bffe <dir_read+0x138>
		if (res != FR_OK) break;
 800bffc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <dir_read+0x144>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	619a      	str	r2, [r3, #24]
	return res;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c022:	2100      	movs	r1, #0
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff fb9e 	bl	800b766 <dir_sdi>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <dir_find+0x24>
 800c034:	7dfb      	ldrb	r3, [r7, #23]
 800c036:	e0a7      	b.n	800c188 <dir_find+0x174>
		return res;
	}
#endif
	/* At the FAT12/16/32 */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c038:	23ff      	movs	r3, #255	; 0xff
 800c03a:	753b      	strb	r3, [r7, #20]
 800c03c:	7d3b      	ldrb	r3, [r7, #20]
 800c03e:	757b      	strb	r3, [r7, #21]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f04f 32ff 	mov.w	r2, #4294967295
 800c046:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(fs, dp->sect);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	4619      	mov	r1, r3
 800c04e:	6938      	ldr	r0, [r7, #16]
 800c050:	f7ff f849 	bl	800b0e6 <move_window>
 800c054:	4603      	mov	r3, r0
 800c056:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c058:	7dfb      	ldrb	r3, [r7, #23]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f040 808e 	bne.w	800c17c <dir_find+0x168>
		c = dp->dir[DIR_Name];
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	69db      	ldr	r3, [r3, #28]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c068:	7dbb      	ldrb	r3, [r7, #22]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d102      	bne.n	800c074 <dir_find+0x60>
 800c06e:	2304      	movs	r3, #4
 800c070:	75fb      	strb	r3, [r7, #23]
 800c072:	e088      	b.n	800c186 <dir_find+0x172>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	330b      	adds	r3, #11
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c080:	73fb      	strb	r3, [r7, #15]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	7bfa      	ldrb	r2, [r7, #15]
 800c086:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c088:	7dbb      	ldrb	r3, [r7, #22]
 800c08a:	2be5      	cmp	r3, #229	; 0xe5
 800c08c:	d007      	beq.n	800c09e <dir_find+0x8a>
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	f003 0308 	and.w	r3, r3, #8
 800c094:	2b00      	cmp	r3, #0
 800c096:	d009      	beq.n	800c0ac <dir_find+0x98>
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	2b0f      	cmp	r3, #15
 800c09c:	d006      	beq.n	800c0ac <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c09e:	23ff      	movs	r3, #255	; 0xff
 800c0a0:	757b      	strb	r3, [r7, #21]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a8:	625a      	str	r2, [r3, #36]	; 0x24
 800c0aa:	e05c      	b.n	800c166 <dir_find+0x152>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	2b0f      	cmp	r3, #15
 800c0b0:	d133      	bne.n	800c11a <dir_find+0x106>
				if (dp->lfn) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d055      	beq.n	800c166 <dir_find+0x152>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c0ba:	7dbb      	ldrb	r3, [r7, #22]
 800c0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00d      	beq.n	800c0e0 <dir_find+0xcc>
						sum = dp->dir[LDIR_Chksum];
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	69db      	ldr	r3, [r3, #28]
 800c0c8:	7b5b      	ldrb	r3, [r3, #13]
 800c0ca:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800c0cc:	7dbb      	ldrb	r3, [r7, #22]
 800c0ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0d2:	75bb      	strb	r3, [r7, #22]
 800c0d4:	7dbb      	ldrb	r3, [r7, #22]
 800c0d6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	691a      	ldr	r2, [r3, #16]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	625a      	str	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 800c0e0:	7dba      	ldrb	r2, [r7, #22]
 800c0e2:	7d7b      	ldrb	r3, [r7, #21]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d115      	bne.n	800c114 <dir_find+0x100>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69db      	ldr	r3, [r3, #28]
 800c0ec:	330d      	adds	r3, #13
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	7d3a      	ldrb	r2, [r7, #20]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d10e      	bne.n	800c114 <dir_find+0x100>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	69db      	ldr	r3, [r3, #28]
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7ff fcf5 	bl	800baf0 <cmp_lfn>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <dir_find+0x100>
 800c10c:	7d7b      	ldrb	r3, [r7, #21]
 800c10e:	3b01      	subs	r3, #1
 800c110:	b2db      	uxtb	r3, r3
 800c112:	e000      	b.n	800c116 <dir_find+0x102>
 800c114:	23ff      	movs	r3, #255	; 0xff
 800c116:	757b      	strb	r3, [r7, #21]
 800c118:	e025      	b.n	800c166 <dir_find+0x152>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c11a:	7d7b      	ldrb	r3, [r7, #21]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d109      	bne.n	800c134 <dir_find+0x120>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff fead 	bl	800be84 <sum_sfn>
 800c12a:	4603      	mov	r3, r0
 800c12c:	461a      	mov	r2, r3
 800c12e:	7d3b      	ldrb	r3, [r7, #20]
 800c130:	4293      	cmp	r3, r2
 800c132:	d025      	beq.n	800c180 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	330b      	adds	r3, #11
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <dir_find+0x146>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	69d8      	ldr	r0, [r3, #28]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	220b      	movs	r2, #11
 800c14e:	4619      	mov	r1, r3
 800c150:	f7fe ff43 	bl	800afda <mem_cmp>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d014      	beq.n	800c184 <dir_find+0x170>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c15a:	23ff      	movs	r3, #255	; 0xff
 800c15c:	757b      	strb	r3, [r7, #21]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f04f 32ff 	mov.w	r2, #4294967295
 800c164:	625a      	str	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c166:	2100      	movs	r1, #0
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff fb77 	bl	800b85c <dir_next>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	2b00      	cmp	r3, #0
 800c176:	f43f af67 	beq.w	800c048 <dir_find+0x34>
 800c17a:	e004      	b.n	800c186 <dir_find+0x172>
		if (res != FR_OK) break;
 800c17c:	bf00      	nop
 800c17e:	e002      	b.n	800c186 <dir_find+0x172>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <dir_find+0x172>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c184:	bf00      	nop

	return res;
 800c186:	7dfb      	ldrb	r3, [r7, #23]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08e      	sub	sp, #56	; 0x38
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
	UINT n, nlen, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	623b      	str	r3, [r7, #32]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a8:	61fb      	str	r3, [r7, #28]
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	330b      	adds	r3, #11
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <dir_register+0x2c>
 800c1b8:	2306      	movs	r3, #6
 800c1ba:	e0e1      	b.n	800c380 <dir_register+0x1f0>
	for (nlen = 0; lfn[nlen]; nlen++) ;	/* Get lfn length */
 800c1bc:	2300      	movs	r3, #0
 800c1be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1c0:	e002      	b.n	800c1c8 <dir_register+0x38>
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	69fa      	ldr	r2, [r7, #28]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1f5      	bne.n	800c1c2 <dir_register+0x32>
		create_xdir(fs->dirbuf, lfn);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* At the FAT12/16/32 */
	mem_cpy(sn, fn, 12);
 800c1d6:	f107 030c 	add.w	r3, r7, #12
 800c1da:	220c      	movs	r2, #12
 800c1dc:	6a39      	ldr	r1, [r7, #32]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe febf 	bl	800af62 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d035      	beq.n	800c25a <dir_register+0xca>
		fn[NSFLAG] = 0; dp->lfn = 0;		/* Find only SFN */
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	330b      	adds	r3, #11
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	701a      	strb	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	629a      	str	r2, [r3, #40]	; 0x28
		for (n = 1; n < 100; n++) {
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	633b      	str	r3, [r7, #48]	; 0x30
 800c200:	e013      	b.n	800c22a <dir_register+0x9a>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800c202:	f107 010c 	add.w	r1, r7, #12
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	69fa      	ldr	r2, [r7, #28]
 800c20a:	6a38      	ldr	r0, [r7, #32]
 800c20c:	f7ff fdac 	bl	800bd68 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff feff 	bl	800c014 <dir_find>
 800c216:	4603      	mov	r3, r0
 800c218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (res != FR_OK) break;
 800c21c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	3301      	adds	r3, #1
 800c228:	633b      	str	r3, [r7, #48]	; 0x30
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	2b63      	cmp	r3, #99	; 0x63
 800c22e:	d9e8      	bls.n	800c202 <dir_register+0x72>
 800c230:	e000      	b.n	800c234 <dir_register+0xa4>
			if (res != FR_OK) break;
 800c232:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c236:	2b64      	cmp	r3, #100	; 0x64
 800c238:	d101      	bne.n	800c23e <dir_register+0xae>
 800c23a:	2307      	movs	r3, #7
 800c23c:	e0a0      	b.n	800c380 <dir_register+0x1f0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c23e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c242:	2b04      	cmp	r3, #4
 800c244:	d002      	beq.n	800c24c <dir_register+0xbc>
 800c246:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c24a:	e099      	b.n	800c380 <dir_register+0x1f0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	330b      	adds	r3, #11
 800c250:	7dfa      	ldrb	r2, [r7, #23]
 800c252:	701a      	strb	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	69fa      	ldr	r2, [r7, #28]
 800c258:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c25a:	7dfb      	ldrb	r3, [r7, #23]
 800c25c:	f003 0302 	and.w	r3, r3, #2
 800c260:	2b00      	cmp	r3, #0
 800c262:	d007      	beq.n	800c274 <dir_register+0xe4>
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	330c      	adds	r3, #12
 800c268:	4a47      	ldr	r2, [pc, #284]	; (800c388 <dir_register+0x1f8>)
 800c26a:	fba2 2303 	umull	r2, r3, r2, r3
 800c26e:	089b      	lsrs	r3, r3, #2
 800c270:	3301      	adds	r3, #1
 800c272:	e000      	b.n	800c276 <dir_register+0xe6>
 800c274:	2301      	movs	r3, #1
 800c276:	62bb      	str	r3, [r7, #40]	; 0x28
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff fbb2 	bl	800b9e4 <dir_alloc>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d148      	bne.n	800c320 <dir_register+0x190>
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	3b01      	subs	r3, #1
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	2b00      	cmp	r3, #0
 800c298:	d042      	beq.n	800c320 <dir_register+0x190>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	691a      	ldr	r2, [r3, #16]
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	015b      	lsls	r3, r3, #5
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7ff fa5d 	bl	800b766 <dir_sdi>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {
 800c2b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d132      	bne.n	800c320 <dir_register+0x190>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a1b      	ldr	r3, [r3, #32]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff fde0 	bl	800be84 <sum_sfn>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2d0:	f7fe ff09 	bl	800b0e6 <move_window>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if (res != FR_OK) break;
 800c2da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d11d      	bne.n	800c31e <dir_register+0x18e>
				put_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	69d9      	ldr	r1, [r3, #28]
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	7efb      	ldrb	r3, [r7, #27]
 800c2f0:	f7ff fcd2 	bl	800bc98 <put_lfn>
				fs->wflag = 1;
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff faad 	bl	800b85c <dir_next>
 800c302:	4603      	mov	r3, r0
 800c304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			} while (res == FR_OK && --nent);
 800c308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d107      	bne.n	800c320 <dir_register+0x190>
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	3b01      	subs	r3, #1
 800c314:	62bb      	str	r3, [r7, #40]	; 0x28
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1d5      	bne.n	800c2c8 <dir_register+0x138>
 800c31c:	e000      	b.n	800c320 <dir_register+0x190>
				if (res != FR_OK) break;
 800c31e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c324:	2b00      	cmp	r3, #0
 800c326:	d129      	bne.n	800c37c <dir_register+0x1ec>
		res = move_window(fs, dp->sect);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	4619      	mov	r1, r3
 800c32e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c330:	f7fe fed9 	bl	800b0e6 <move_window>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {
 800c33a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d11c      	bne.n	800c37c <dir_register+0x1ec>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	2220      	movs	r2, #32
 800c348:	2100      	movs	r1, #0
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe fe2a 	bl	800afa4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	69d8      	ldr	r0, [r3, #28]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a1b      	ldr	r3, [r3, #32]
 800c358:	220b      	movs	r2, #11
 800c35a:	4619      	mov	r1, r3
 800c35c:	f7fe fe01 	bl	800af62 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a1b      	ldr	r3, [r3, #32]
 800c364:	330b      	adds	r3, #11
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	330c      	adds	r3, #12
 800c36e:	f002 0218 	and.w	r2, r2, #24
 800c372:	b2d2      	uxtb	r2, r2
 800c374:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	2201      	movs	r2, #1
 800c37a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c37c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800c380:	4618      	mov	r0, r3
 800c382:	3738      	adds	r7, #56	; 0x38
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	4ec4ec4f 	.word	0x4ec4ec4f

0800c38c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	60fb      	str	r3, [r7, #12]

	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a8:	d007      	beq.n	800c3ba <dir_remove+0x2e>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff f9d8 	bl	800b766 <dir_sdi>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	e000      	b.n	800c3bc <dir_remove+0x30>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d128      	bne.n	800c416 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6938      	ldr	r0, [r7, #16]
 800c3cc:	f7fe fe8b 	bl	800b0e6 <move_window>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d115      	bne.n	800c406 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* At the exFAT */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* At the FAT12/16/32 */
				dp->dir[DIR_Name] = DDEM;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	69db      	ldr	r3, [r3, #28]
 800c3de:	22e5      	movs	r2, #229	; 0xe5
 800c3e0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d90b      	bls.n	800c40a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff fa31 	bl	800b85c <dir_next>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0df      	beq.n	800c3c4 <dir_remove+0x38>
 800c404:	e002      	b.n	800c40c <dir_remove+0x80>
			if (res != FR_OK) break;
 800c406:	bf00      	nop
 800c408:	e000      	b.n	800c40c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c40a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	2b04      	cmp	r3, #4
 800c410:	d101      	bne.n	800c416 <dir_remove+0x8a>
 800c412:	2302      	movs	r3, #2
 800c414:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c416:	7dfb      	ldrb	r3, [r7, #23]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	WCHAR lfv;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2200      	movs	r2, #0
 800c42e:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 80ca 	beq.w	800c5ce <get_fileinfo+0x1ae>
		get_xdir_info(dp->obj.fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* At the FAT12/16/32 */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c442:	d02f      	beq.n	800c4a4 <get_fileinfo+0x84>
			i = 0; lfn = dp->lfn;
 800c444:	2300      	movs	r3, #0
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44c:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800c44e:	e01b      	b.n	800c488 <get_fileinfo+0x68>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c450:	89fb      	ldrh	r3, [r7, #14]
 800c452:	2100      	movs	r1, #0
 800c454:	4618      	mov	r0, r3
 800c456:	f001 fd59 	bl	800df0c <ff_convert>
 800c45a:	4603      	mov	r3, r0
 800c45c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c45e:	89fb      	ldrh	r3, [r7, #14]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d102      	bne.n	800c46a <get_fileinfo+0x4a>
 800c464:	2300      	movs	r3, #0
 800c466:	61fb      	str	r3, [r7, #28]
 800c468:	e016      	b.n	800c498 <get_fileinfo+0x78>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	2bfe      	cmp	r3, #254	; 0xfe
 800c46e:	d902      	bls.n	800c476 <get_fileinfo+0x56>
 800c470:	2300      	movs	r3, #0
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	e010      	b.n	800c498 <get_fileinfo+0x78>
				fno->fname[i++] = (char)w;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	61fa      	str	r2, [r7, #28]
 800c47c:	89fa      	ldrh	r2, [r7, #14]
 800c47e:	b2d1      	uxtb	r1, r2
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	4413      	add	r3, r2
 800c484:	460a      	mov	r2, r1
 800c486:	759a      	strb	r2, [r3, #22]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	1c9a      	adds	r2, r3, #2
 800c48c:	613a      	str	r2, [r7, #16]
 800c48e:	881b      	ldrh	r3, [r3, #0]
 800c490:	81fb      	strh	r3, [r7, #14]
 800c492:	89fb      	ldrh	r3, [r7, #14]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1db      	bne.n	800c450 <get_fileinfo+0x30>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	4413      	add	r3, r2
 800c49e:	3316      	adds	r3, #22
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61bb      	str	r3, [r7, #24]
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	3316      	adds	r3, #22
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c4b8:	e04c      	b.n	800c554 <get_fileinfo+0x134>
		c = (TCHAR)dp->dir[i++];
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	69da      	ldr	r2, [r3, #28]
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	1c59      	adds	r1, r3, #1
 800c4c2:	61f9      	str	r1, [r7, #28]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
 800c4cc:	2b20      	cmp	r3, #32
 800c4ce:	d100      	bne.n	800c4d2 <get_fileinfo+0xb2>
 800c4d0:	e040      	b.n	800c554 <get_fileinfo+0x134>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	2b05      	cmp	r3, #5
 800c4d6:	d101      	bne.n	800c4dc <get_fileinfo+0xbc>
 800c4d8:	23e5      	movs	r3, #229	; 0xe5
 800c4da:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d10f      	bne.n	800c502 <get_fileinfo+0xe2>
			if (!lfv) fno->fname[j] = '.';
 800c4e2:	89bb      	ldrh	r3, [r7, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d105      	bne.n	800c4f4 <get_fileinfo+0xd4>
 800c4e8:	683a      	ldr	r2, [r7, #0]
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	3316      	adds	r3, #22
 800c4f0:	222e      	movs	r2, #46	; 0x2e
 800c4f2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	61ba      	str	r2, [r7, #24]
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	222e      	movs	r2, #46	; 0x2e
 800c500:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	4413      	add	r3, r2
 800c508:	3309      	adds	r3, #9
 800c50a:	7dfa      	ldrb	r2, [r7, #23]
 800c50c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c50e:	89bb      	ldrh	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d11c      	bne.n	800c54e <get_fileinfo+0x12e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	2b40      	cmp	r3, #64	; 0x40
 800c518:	d913      	bls.n	800c542 <get_fileinfo+0x122>
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	2b5a      	cmp	r3, #90	; 0x5a
 800c51e:	d810      	bhi.n	800c542 <get_fileinfo+0x122>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	330c      	adds	r3, #12
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	461a      	mov	r2, r3
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	2b08      	cmp	r3, #8
 800c52e:	d901      	bls.n	800c534 <get_fileinfo+0x114>
 800c530:	2310      	movs	r3, #16
 800c532:	e000      	b.n	800c536 <get_fileinfo+0x116>
 800c534:	2308      	movs	r3, #8
 800c536:	4013      	ands	r3, r2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <get_fileinfo+0x122>
				c += 0x20;			/* To lower */
 800c53c:	7dfb      	ldrb	r3, [r7, #23]
 800c53e:	3320      	adds	r3, #32
 800c540:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	4413      	add	r3, r2
 800c548:	3316      	adds	r3, #22
 800c54a:	7dfa      	ldrb	r2, [r7, #23]
 800c54c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	3301      	adds	r3, #1
 800c552:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	2b0a      	cmp	r3, #10
 800c558:	d9af      	bls.n	800c4ba <get_fileinfo+0x9a>
	}
	if (!lfv) {
 800c55a:	89bb      	ldrh	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10d      	bne.n	800c57c <get_fileinfo+0x15c>
		fno->fname[j] = 0;
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	4413      	add	r3, r2
 800c566:	3316      	adds	r3, #22
 800c568:	2200      	movs	r2, #0
 800c56a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	69db      	ldr	r3, [r3, #28]
 800c570:	330c      	adds	r3, #12
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <get_fileinfo+0x15c>
 800c578:	2300      	movs	r3, #0
 800c57a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	4413      	add	r3, r2
 800c582:	3309      	adds	r3, #9
 800c584:	2200      	movs	r2, #0
 800c586:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	7ada      	ldrb	r2, [r3, #11]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	69db      	ldr	r3, [r3, #28]
 800c596:	331c      	adds	r3, #28
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fc78 	bl	800ae8e <ld_dword>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	601a      	str	r2, [r3, #0]
	fno->fdate = ld_word(dp->dir + DIR_WrtDate);	/* Date */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	3318      	adds	r3, #24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fe fc57 	bl	800ae5e <ld_word>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	809a      	strh	r2, [r3, #4]
	fno->ftime = ld_word(dp->dir + DIR_WrtTime);	/* Time */
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	3316      	adds	r3, #22
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fc4d 	bl	800ae5e <ld_word>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	80da      	strh	r2, [r3, #6]
 800c5cc:	e000      	b.n	800c5d0 <get_fileinfo+0x1b0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c5ce:	bf00      	nop
}
 800c5d0:	3720      	adds	r7, #32
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08a      	sub	sp, #40	; 0x28
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->lfn; si = di = 0;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	613b      	str	r3, [r7, #16]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	617b      	str	r3, [r7, #20]
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	61ba      	str	r2, [r7, #24]
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4413      	add	r3, r2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') {		/* Break on end of segment */
 800c604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c606:	2b1f      	cmp	r3, #31
 800c608:	d909      	bls.n	800c61e <create_name+0x46>
 800c60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c60c:	2b2f      	cmp	r3, #47	; 0x2f
 800c60e:	d006      	beq.n	800c61e <create_name+0x46>
 800c610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c612:	2b5c      	cmp	r3, #92	; 0x5c
 800c614:	d110      	bne.n	800c638 <create_name+0x60>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator */
 800c616:	e002      	b.n	800c61e <create_name+0x46>
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	3301      	adds	r3, #1
 800c61c:	61bb      	str	r3, [r7, #24]
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	4413      	add	r3, r2
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	2b2f      	cmp	r3, #47	; 0x2f
 800c628:	d0f6      	beq.n	800c618 <create_name+0x40>
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	4413      	add	r3, r2
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b5c      	cmp	r3, #92	; 0x5c
 800c634:	d0f0      	beq.n	800c618 <create_name+0x40>
			break;
 800c636:	e029      	b.n	800c68c <create_name+0xb4>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2bfe      	cmp	r3, #254	; 0xfe
 800c63c:	d901      	bls.n	800c642 <create_name+0x6a>
 800c63e:	2306      	movs	r3, #6
 800c640:	e17d      	b.n	800c93e <create_name+0x366>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c644:	b2db      	uxtb	r3, r3
 800c646:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c64a:	2101      	movs	r1, #1
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 fc5d 	bl	800df0c <ff_convert>
 800c652:	4603      	mov	r3, r0
 800c654:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <create_name+0x88>
 800c65c:	2306      	movs	r3, #6
 800c65e:	e16e      	b.n	800c93e <create_name+0x366>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c662:	2b7f      	cmp	r3, #127	; 0x7f
 800c664:	d809      	bhi.n	800c67a <create_name+0xa2>
 800c666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c668:	4619      	mov	r1, r3
 800c66a:	488d      	ldr	r0, [pc, #564]	; (800c8a0 <create_name+0x2c8>)
 800c66c:	f7fe fcdc 	bl	800b028 <chk_chr>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <create_name+0xa2>
 800c676:	2306      	movs	r3, #6
 800c678:	e161      	b.n	800c93e <create_name+0x366>
		lfn[di++] = w;					/* Store the Unicode character */
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	617a      	str	r2, [r7, #20]
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	4413      	add	r3, r2
 800c686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c688:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c68a:	e7b4      	b.n	800c5f6 <create_name+0x1e>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	441a      	add	r2, r3
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c698:	2b1f      	cmp	r3, #31
 800c69a:	d801      	bhi.n	800c6a0 <create_name+0xc8>
 800c69c:	2304      	movs	r3, #4
 800c69e:	e000      	b.n	800c6a2 <create_name+0xca>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6a6:	e011      	b.n	800c6cc <create_name+0xf4>
		w = lfn[di - 1];
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c6ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6bc:	2b20      	cmp	r3, #32
 800c6be:	d002      	beq.n	800c6c6 <create_name+0xee>
 800c6c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6c4:	d106      	bne.n	800c6d4 <create_name+0xfc>
		di--;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1ea      	bne.n	800c6a8 <create_name+0xd0>
 800c6d2:	e000      	b.n	800c6d6 <create_name+0xfe>
		if (w != ' ' && w != '.') break;
 800c6d4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	005b      	lsls	r3, r3, #1
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	4413      	add	r3, r2
 800c6de:	2200      	movs	r2, #0
 800c6e0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d101      	bne.n	800c6ec <create_name+0x114>
 800c6e8:	2306      	movs	r3, #6
 800c6ea:	e128      	b.n	800c93e <create_name+0x366>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a1b      	ldr	r3, [r3, #32]
 800c6f0:	220b      	movs	r2, #11
 800c6f2:	2120      	movs	r1, #32
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe fc55 	bl	800afa4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	61bb      	str	r3, [r7, #24]
 800c6fe:	e002      	b.n	800c706 <create_name+0x12e>
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	3301      	adds	r3, #1
 800c704:	61bb      	str	r3, [r7, #24]
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	4413      	add	r3, r2
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	2b20      	cmp	r3, #32
 800c712:	d0f5      	beq.n	800c700 <create_name+0x128>
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	005b      	lsls	r3, r3, #1
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	4413      	add	r3, r2
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	2b2e      	cmp	r3, #46	; 0x2e
 800c720:	d0ee      	beq.n	800c700 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <create_name+0x164>
 800c728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c72c:	f043 0303 	orr.w	r3, r3, #3
 800c730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c734:	e002      	b.n	800c73c <create_name+0x164>
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	3b01      	subs	r3, #1
 800c73a:	617b      	str	r3, [r7, #20]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d009      	beq.n	800c756 <create_name+0x17e>
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c748:	3b01      	subs	r3, #1
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	881b      	ldrh	r3, [r3, #0]
 800c752:	2b2e      	cmp	r3, #46	; 0x2e
 800c754:	d1ef      	bne.n	800c736 <create_name+0x15e>

	b = i = 0; ni = 8;
 800c756:	2300      	movs	r3, #0
 800c758:	623b      	str	r3, [r7, #32]
 800c75a:	2300      	movs	r3, #0
 800c75c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c760:	2308      	movs	r3, #8
 800c762:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	61ba      	str	r2, [r7, #24]
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c776:	2b00      	cmp	r3, #0
 800c778:	f000 808f 	beq.w	800c89a <create_name+0x2c2>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c77c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c77e:	2b20      	cmp	r3, #32
 800c780:	d006      	beq.n	800c790 <create_name+0x1b8>
 800c782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c784:	2b2e      	cmp	r3, #46	; 0x2e
 800c786:	d10a      	bne.n	800c79e <create_name+0x1c6>
 800c788:	69ba      	ldr	r2, [r7, #24]
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d006      	beq.n	800c79e <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800c790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c794:	f043 0303 	orr.w	r3, r3, #3
 800c798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c79c:	e07c      	b.n	800c898 <create_name+0x2c0>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c79e:	6a3a      	ldr	r2, [r7, #32]
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d203      	bcs.n	800c7ae <create_name+0x1d6>
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d123      	bne.n	800c7f6 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	2b0b      	cmp	r3, #11
 800c7b2:	d106      	bne.n	800c7c2 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800c7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b8:	f043 0303 	orr.w	r3, r3, #3
 800c7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7c0:	e075      	b.n	800c8ae <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c7c2:	69ba      	ldr	r2, [r7, #24]
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d005      	beq.n	800c7d6 <create_name+0x1fe>
 800c7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ce:	f043 0303 	orr.w	r3, r3, #3
 800c7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d866      	bhi.n	800c8ac <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	61bb      	str	r3, [r7, #24]
 800c7e2:	2308      	movs	r3, #8
 800c7e4:	623b      	str	r3, [r7, #32]
 800c7e6:	230b      	movs	r3, #11
 800c7e8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c7ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c7f4:	e050      	b.n	800c898 <create_name+0x2c0>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c7f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7f8:	2b7f      	cmp	r3, #127	; 0x7f
 800c7fa:	d914      	bls.n	800c826 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7fe:	2100      	movs	r1, #0
 800c800:	4618      	mov	r0, r3
 800c802:	f001 fb83 	bl	800df0c <ff_convert>
 800c806:	4603      	mov	r3, r0
 800c808:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d004      	beq.n	800c81a <create_name+0x242>
 800c810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c812:	3b80      	subs	r3, #128	; 0x80
 800c814:	4a23      	ldr	r2, [pc, #140]	; (800c8a4 <create_name+0x2cc>)
 800c816:	5cd3      	ldrb	r3, [r2, r3]
 800c818:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c81a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c81e:	f043 0302 	orr.w	r3, r3, #2
 800c822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d007      	beq.n	800c83c <create_name+0x264>
 800c82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c82e:	4619      	mov	r1, r3
 800c830:	481d      	ldr	r0, [pc, #116]	; (800c8a8 <create_name+0x2d0>)
 800c832:	f7fe fbf9 	bl	800b028 <chk_chr>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d008      	beq.n	800c84e <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c83c:	235f      	movs	r3, #95	; 0x5f
 800c83e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c844:	f043 0303 	orr.w	r3, r3, #3
 800c848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c84c:	e01b      	b.n	800c886 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c850:	2b40      	cmp	r3, #64	; 0x40
 800c852:	d909      	bls.n	800c868 <create_name+0x290>
 800c854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c856:	2b5a      	cmp	r3, #90	; 0x5a
 800c858:	d806      	bhi.n	800c868 <create_name+0x290>
					b |= 2;
 800c85a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c85e:	f043 0302 	orr.w	r3, r3, #2
 800c862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c866:	e00e      	b.n	800c886 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c86a:	2b60      	cmp	r3, #96	; 0x60
 800c86c:	d90b      	bls.n	800c886 <create_name+0x2ae>
 800c86e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c870:	2b7a      	cmp	r3, #122	; 0x7a
 800c872:	d808      	bhi.n	800c886 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800c874:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c878:	f043 0301 	orr.w	r3, r3, #1
 800c87c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c882:	3b20      	subs	r3, #32
 800c884:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1a      	ldr	r2, [r3, #32]
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	1c59      	adds	r1, r3, #1
 800c88e:	6239      	str	r1, [r7, #32]
 800c890:	4413      	add	r3, r2
 800c892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800c898:	e764      	b.n	800c764 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800c89a:	bf00      	nop
 800c89c:	e007      	b.n	800c8ae <create_name+0x2d6>
 800c89e:	bf00      	nop
 800c8a0:	0800f070 	.word	0x0800f070
 800c8a4:	0800f1c8 	.word	0x0800f1c8
 800c8a8:	0800f07c 	.word	0x0800f07c
			if (si > di) break;			/* No extension */
 800c8ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2be5      	cmp	r3, #229	; 0xe5
 800c8b6:	d103      	bne.n	800c8c0 <create_name+0x2e8>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a1b      	ldr	r3, [r3, #32]
 800c8bc:	2205      	movs	r2, #5
 800c8be:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	2b08      	cmp	r3, #8
 800c8c4:	d104      	bne.n	800c8d0 <create_name+0x2f8>
 800c8c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c8d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8d4:	f003 030c 	and.w	r3, r3, #12
 800c8d8:	2b0c      	cmp	r3, #12
 800c8da:	d005      	beq.n	800c8e8 <create_name+0x310>
 800c8dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8e0:	f003 0303 	and.w	r3, r3, #3
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d105      	bne.n	800c8f4 <create_name+0x31c>
 800c8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8ec:	f043 0302 	orr.w	r3, r3, #2
 800c8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d117      	bne.n	800c930 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c904:	f003 0303 	and.w	r3, r3, #3
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d105      	bne.n	800c918 <create_name+0x340>
 800c90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c910:	f043 0310 	orr.w	r3, r3, #16
 800c914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c91c:	f003 030c 	and.w	r3, r3, #12
 800c920:	2b04      	cmp	r3, #4
 800c922:	d105      	bne.n	800c930 <create_name+0x358>
 800c924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c928:	f043 0308 	orr.w	r3, r3, #8
 800c92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	330b      	adds	r3, #11
 800c936:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c93a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c93c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3728      	adds	r7, #40	; 0x28
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop

0800c948 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from the current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c95c:	e002      	b.n	800c964 <follow_path+0x1c>
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	3301      	adds	r3, #1
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	2b2f      	cmp	r3, #47	; 0x2f
 800c96a:	d0f8      	beq.n	800c95e <follow_path+0x16>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b5c      	cmp	r3, #92	; 0x5c
 800c972:	d0f4      	beq.n	800c95e <follow_path+0x16>
		obj->sclust = 0;					/* Start from the root directory */
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2200      	movs	r2, #0
 800c978:	609a      	str	r2, [r3, #8]
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b1f      	cmp	r3, #31
 800c980:	d80b      	bhi.n	800c99a <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	330b      	adds	r3, #11
 800c988:	2280      	movs	r2, #128	; 0x80
 800c98a:	701a      	strb	r2, [r3, #0]
		res = dir_sdi(dp, 0);
 800c98c:	2100      	movs	r1, #0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7fe fee9 	bl	800b766 <dir_sdi>
 800c994:	4603      	mov	r3, r0
 800c996:	75fb      	strb	r3, [r7, #23]
 800c998:	e042      	b.n	800ca20 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c99a:	463b      	mov	r3, r7
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7ff fe1a 	bl	800c5d8 <create_name>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d133      	bne.n	800ca16 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7ff fb30 	bl	800c014 <dir_find>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a1b      	ldr	r3, [r3, #32]
 800c9bc:	7adb      	ldrb	r3, [r3, #11]
 800c9be:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	d126      	bne.n	800ca1a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c9cc:	7afb      	ldrb	r3, [r7, #11]
 800c9ce:	f003 0304 	and.w	r3, r3, #4
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d121      	bne.n	800ca1a <follow_path+0xd2>
 800c9d6:	2305      	movs	r3, #5
 800c9d8:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c9da:	e01e      	b.n	800ca1a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9dc:	7afb      	ldrb	r3, [r7, #11]
 800c9de:	f003 0304 	and.w	r3, r3, #4
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d11b      	bne.n	800ca1e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	799b      	ldrb	r3, [r3, #6]
 800c9ea:	f003 0310 	and.w	r3, r3, #16
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800c9f2:	2305      	movs	r3, #5
 800c9f4:	75fb      	strb	r3, [r7, #23]
 800c9f6:	e013      	b.n	800ca20 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, &fs->win[dp->dptr % SS(fs)]);	/* Open next directory */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca00:	3330      	adds	r3, #48	; 0x30
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	4413      	add	r3, r2
 800ca06:	4619      	mov	r1, r3
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f7ff f832 	bl	800ba72 <ld_clust>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca14:	e7c1      	b.n	800c99a <follow_path+0x52>
			if (res != FR_OK) break;
 800ca16:	bf00      	nop
 800ca18:	e002      	b.n	800ca20 <follow_path+0xd8>
				break;
 800ca1a:	bf00      	nop
 800ca1c:	e000      	b.n	800ca20 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ca1e:	bf00      	nop
			}
		}
	}

	return res;
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b087      	sub	sp, #28
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ca32:	f04f 33ff 	mov.w	r3, #4294967295
 800ca36:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d031      	beq.n	800caa4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	617b      	str	r3, [r7, #20]
 800ca46:	e002      	b.n	800ca4e <get_ldnumber+0x24>
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	617b      	str	r3, [r7, #20]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	2b1f      	cmp	r3, #31
 800ca54:	d903      	bls.n	800ca5e <get_ldnumber+0x34>
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b3a      	cmp	r3, #58	; 0x3a
 800ca5c:	d1f4      	bne.n	800ca48 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b3a      	cmp	r3, #58	; 0x3a
 800ca64:	d11c      	bne.n	800caa0 <get_ldnumber+0x76>
			tp = *path;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	60fa      	str	r2, [r7, #12]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	3b30      	subs	r3, #48	; 0x30
 800ca76:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	2b09      	cmp	r3, #9
 800ca7c:	d80e      	bhi.n	800ca9c <get_ldnumber+0x72>
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d10a      	bne.n	800ca9c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d107      	bne.n	800ca9c <get_ldnumber+0x72>
					vol = (int)i;
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	3301      	adds	r3, #1
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	e002      	b.n	800caa6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800caa0:	2300      	movs	r3, #0
 800caa2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800caa4:	693b      	ldr	r3, [r7, #16]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	371c      	adds	r7, #28
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
	...

0800cab4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	70da      	strb	r2, [r3, #3]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f04f 32ff 	mov.w	r2, #4294967295
 800caca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7fe fb09 	bl	800b0e6 <move_window>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d001      	beq.n	800cade <check_fs+0x2a>
 800cada:	2304      	movs	r3, #4
 800cadc:	e028      	b.n	800cb30 <check_fs+0x7c>

	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f203 232e 	addw	r3, r3, #558	; 0x22e
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fe f9ba 	bl	800ae5e <ld_word>
 800caea:	4603      	mov	r3, r0
 800caec:	461a      	mov	r2, r3
 800caee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d001      	beq.n	800cafa <check_fs+0x46>
 800caf6:	2303      	movs	r3, #3
 800caf8:	e01a      	b.n	800cb30 <check_fs+0x7c>

	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	3366      	adds	r3, #102	; 0x66
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe f9c5 	bl	800ae8e <ld_dword>
 800cb04:	4603      	mov	r3, r0
 800cb06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb0a:	4a0b      	ldr	r2, [pc, #44]	; (800cb38 <check_fs+0x84>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d101      	bne.n	800cb14 <check_fs+0x60>
 800cb10:	2300      	movs	r3, #0
 800cb12:	e00d      	b.n	800cb30 <check_fs+0x7c>
	if ((ld_dword(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3382      	adds	r3, #130	; 0x82
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe f9b8 	bl	800ae8e <ld_dword>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb24:	4a04      	ldr	r2, [pc, #16]	; (800cb38 <check_fs+0x84>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d101      	bne.n	800cb2e <check_fs+0x7a>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e000      	b.n	800cb30 <check_fs+0x7c>
#if _FS_EXFAT
	if (!mem_cmp(&fs->win[BS_OEMName], "EXFAT   ", 8)) return 1;
#endif
	return 2;
 800cb2e:	2302      	movs	r3, #2
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	00544146 	.word	0x00544146

0800cb3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b096      	sub	sp, #88	; 0x58
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4613      	mov	r3, r2
 800cb48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff ff6a 	bl	800ca2a <get_ldnumber>
 800cb56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da01      	bge.n	800cb62 <find_volume+0x26>
 800cb5e:	230b      	movs	r3, #11
 800cb60:	e22a      	b.n	800cfb8 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb62:	4aa1      	ldr	r2, [pc, #644]	; (800cde8 <find_volume+0x2ac>)
 800cb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <find_volume+0x3a>
 800cb72:	230c      	movs	r3, #12
 800cb74:	e220      	b.n	800cfb8 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb7a:	601a      	str	r2, [r3, #0]

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
 800cb7c:	79fb      	ldrb	r3, [r7, #7]
 800cb7e:	f023 0301 	bic.w	r3, r3, #1
 800cb82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d01a      	beq.n	800cbc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	785b      	ldrb	r3, [r3, #1]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7f9 ffd3 	bl	8006b3c <disk_status>
 800cb96:	4603      	mov	r3, r0
 800cb98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10c      	bne.n	800cbc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d007      	beq.n	800cbbe <find_volume+0x82>
 800cbae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbb2:	f003 0304 	and.w	r3, r3, #4
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cbba:	230a      	movs	r3, #10
 800cbbc:	e1fc      	b.n	800cfb8 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	e1fa      	b.n	800cfb8 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	785b      	ldrb	r3, [r3, #1]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7f9 fed5 	bl	8006984 <disk_initialize>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cbe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cbec:	2303      	movs	r3, #3
 800cbee:	e1e3      	b.n	800cfb8 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d007      	beq.n	800cc06 <find_volume+0xca>
 800cbf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbfa:	f003 0304 	and.w	r3, r3, #4
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cc02:	230a      	movs	r3, #10
 800cc04:	e1d8      	b.n	800cfb8 <find_volume+0x47c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800cc0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc0e:	f7ff ff51 	bl	800cab4 <check_fs>
 800cc12:	4603      	mov	r3, r0
 800cc14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol))) {	/* Not an FAT boot sector or forced partition number */
 800cc18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d149      	bne.n	800ccb4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800cc20:	2300      	movs	r3, #0
 800cc22:	643b      	str	r3, [r7, #64]	; 0x40
 800cc24:	e01e      	b.n	800cc64 <find_volume+0x128>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 800cc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2e:	011b      	lsls	r3, r3, #4
 800cc30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cc34:	4413      	add	r3, r2
 800cc36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d006      	beq.n	800cc50 <find_volume+0x114>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	3308      	adds	r3, #8
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe f921 	bl	800ae8e <ld_dword>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	e000      	b.n	800cc52 <find_volume+0x116>
 800cc50:	2200      	movs	r2, #0
 800cc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	3358      	adds	r3, #88	; 0x58
 800cc58:	443b      	add	r3, r7
 800cc5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800cc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc60:	3301      	adds	r3, #1
 800cc62:	643b      	str	r3, [r7, #64]	; 0x40
 800cc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d9dd      	bls.n	800cc26 <find_volume+0xea>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cc6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d002      	beq.n	800cc7a <find_volume+0x13e>
 800cc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc76:	3b01      	subs	r3, #1
 800cc78:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800cc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	3358      	adds	r3, #88	; 0x58
 800cc80:	443b      	add	r3, r7
 800cc82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cc86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d005      	beq.n	800cc9a <find_volume+0x15e>
 800cc8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc92:	f7ff ff0f 	bl	800cab4 <check_fs>
 800cc96:	4603      	mov	r3, r0
 800cc98:	e000      	b.n	800cc9c <find_volume+0x160>
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 800cca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d905      	bls.n	800ccb4 <find_volume+0x178>
 800cca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccaa:	3301      	adds	r3, #1
 800ccac:	643b      	str	r3, [r7, #64]	; 0x40
 800ccae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	d9e2      	bls.n	800cc7a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ccb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d101      	bne.n	800ccc0 <find_volume+0x184>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e17b      	b.n	800cfb8 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ccc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d901      	bls.n	800cccc <find_volume+0x190>
 800ccc8:	230d      	movs	r3, #13
 800ccca:	e175      	b.n	800cfb8 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	3330      	adds	r3, #48	; 0x30
 800ccd0:	330b      	adds	r3, #11
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe f8c3 	bl	800ae5e <ld_word>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccde:	d001      	beq.n	800cce4 <find_volume+0x1a8>
 800cce0:	230d      	movs	r3, #13
 800cce2:	e169      	b.n	800cfb8 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 800cce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce6:	3330      	adds	r3, #48	; 0x30
 800cce8:	3316      	adds	r3, #22
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe f8b7 	bl	800ae5e <ld_word>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ccf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d106      	bne.n	800cd08 <find_volume+0x1cc>
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	3330      	adds	r3, #48	; 0x30
 800ccfe:	3324      	adds	r3, #36	; 0x24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fe f8c4 	bl	800ae8e <ld_dword>
 800cd06:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd0c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1a:	789b      	ldrb	r3, [r3, #2]
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d005      	beq.n	800cd2c <find_volume+0x1f0>
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	789b      	ldrb	r3, [r3, #2]
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d001      	beq.n	800cd2c <find_volume+0x1f0>
 800cd28:	230d      	movs	r3, #13
 800cd2a:	e145      	b.n	800cfb8 <find_volume+0x47c>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	789b      	ldrb	r3, [r3, #2]
 800cd30:	461a      	mov	r2, r3
 800cd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd34:	fb02 f303 	mul.w	r3, r2, r3
 800cd38:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	895b      	ldrh	r3, [r3, #10]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d008      	beq.n	800cd60 <find_volume+0x224>
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	895b      	ldrh	r3, [r3, #10]
 800cd52:	461a      	mov	r2, r3
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	895b      	ldrh	r3, [r3, #10]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <find_volume+0x228>
 800cd60:	230d      	movs	r3, #13
 800cd62:	e129      	b.n	800cfb8 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	3330      	adds	r3, #48	; 0x30
 800cd68:	3311      	adds	r3, #17
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fe f877 	bl	800ae5e <ld_word>
 800cd70:	4603      	mov	r3, r0
 800cd72:	461a      	mov	r2, r3
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7a:	891b      	ldrh	r3, [r3, #8]
 800cd7c:	f003 030f 	and.w	r3, r3, #15
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <find_volume+0x24e>
 800cd86:	230d      	movs	r3, #13
 800cd88:	e116      	b.n	800cfb8 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	3330      	adds	r3, #48	; 0x30
 800cd8e:	3313      	adds	r3, #19
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fe f864 	bl	800ae5e <ld_word>
 800cd96:	4603      	mov	r3, r0
 800cd98:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d106      	bne.n	800cdae <find_volume+0x272>
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	3330      	adds	r3, #48	; 0x30
 800cda4:	3320      	adds	r3, #32
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe f871 	bl	800ae8e <ld_dword>
 800cdac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb0:	3330      	adds	r3, #48	; 0x30
 800cdb2:	330e      	adds	r3, #14
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe f852 	bl	800ae5e <ld_word>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 800cdbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <find_volume+0x28c>
 800cdc4:	230d      	movs	r3, #13
 800cdc6:	e0f7      	b.n	800cfb8 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cdc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cdca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdcc:	4413      	add	r3, r2
 800cdce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdd0:	8912      	ldrh	r2, [r2, #8]
 800cdd2:	0912      	lsrs	r2, r2, #4
 800cdd4:	b292      	uxth	r2, r2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cdda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d204      	bcs.n	800cdec <find_volume+0x2b0>
 800cde2:	230d      	movs	r3, #13
 800cde4:	e0e8      	b.n	800cfb8 <find_volume+0x47c>
 800cde6:	bf00      	nop
 800cde8:	20001828 	.word	0x20001828
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800cdec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdf4:	8952      	ldrh	r2, [r2, #10]
 800cdf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d101      	bne.n	800ce06 <find_volume+0x2ca>
 800ce02:	230d      	movs	r3, #13
 800ce04:	e0d8      	b.n	800cfb8 <find_volume+0x47c>
		fmt = FS_FAT12;
 800ce06:	2301      	movs	r3, #1
 800ce08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d902      	bls.n	800ce1c <find_volume+0x2e0>
 800ce16:	2302      	movs	r3, #2
 800ce18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d902      	bls.n	800ce2c <find_volume+0x2f0>
 800ce26:	2303      	movs	r3, #3
 800ce28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	1c9a      	adds	r2, r3, #2
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;								/* Volume start sector */
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce38:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ce3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce3e:	441a      	add	r2, r3
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;						/* Data start sector */
 800ce44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce48:	441a      	add	r2, r3
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ce4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	d11e      	bne.n	800ce94 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	3330      	adds	r3, #48	; 0x30
 800ce5a:	332a      	adds	r3, #42	; 0x2a
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fd fffe 	bl	800ae5e <ld_word>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <find_volume+0x330>
 800ce68:	230d      	movs	r3, #13
 800ce6a:	e0a5      	b.n	800cfb8 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	891b      	ldrh	r3, [r3, #8]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d001      	beq.n	800ce78 <find_volume+0x33c>
 800ce74:	230d      	movs	r3, #13
 800ce76:	e09f      	b.n	800cfb8 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7a:	3330      	adds	r3, #48	; 0x30
 800ce7c:	332c      	adds	r3, #44	; 0x2c
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe f805 	bl	800ae8e <ld_dword>
 800ce84:	4602      	mov	r2, r0
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	647b      	str	r3, [r7, #68]	; 0x44
 800ce92:	e01f      	b.n	800ced4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	891b      	ldrh	r3, [r3, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <find_volume+0x364>
 800ce9c:	230d      	movs	r3, #13
 800ce9e:	e08b      	b.n	800cfb8 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea2:	6a1a      	ldr	r2, [r3, #32]
 800cea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea6:	441a      	add	r2, r3
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ceac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d103      	bne.n	800cebc <find_volume+0x380>
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	e00a      	b.n	800ced2 <find_volume+0x396>
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	695a      	ldr	r2, [r3, #20]
 800cec0:	4613      	mov	r3, r2
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	4413      	add	r3, r2
 800cec6:	085a      	lsrs	r2, r3, #1
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	695b      	ldr	r3, [r3, #20]
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800ced2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced6:	699a      	ldr	r2, [r3, #24]
 800ced8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceda:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cede:	0a5b      	lsrs	r3, r3, #9
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d201      	bcs.n	800cee8 <find_volume+0x3ac>
 800cee4:	230d      	movs	r3, #13
 800cee6:	e067      	b.n	800cfb8 <find_volume+0x47c>

#if !_FS_READONLY
		/* Initialize cluster allocation information */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	f04f 32ff 	mov.w	r2, #4294967295
 800ceee:	611a      	str	r2, [r3, #16]
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	691a      	ldr	r2, [r3, #16]
 800cef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef6:	60da      	str	r2, [r3, #12]

		/* Get FSINFO if available */
		fs->fsi_flag = 0x80;
 800cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefa:	2280      	movs	r2, #128	; 0x80
 800cefc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cefe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf02:	2b03      	cmp	r3, #3
 800cf04:	d149      	bne.n	800cf9a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf08:	3330      	adds	r3, #48	; 0x30
 800cf0a:	3330      	adds	r3, #48	; 0x30
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fd ffa6 	bl	800ae5e <ld_word>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d140      	bne.n	800cf9a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf20:	f7fe f8e1 	bl	800b0e6 <move_window>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d137      	bne.n	800cf9a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	3330      	adds	r3, #48	; 0x30
 800cf34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fd ff90 	bl	800ae5e <ld_word>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	461a      	mov	r2, r3
 800cf42:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d127      	bne.n	800cf9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4c:	3330      	adds	r3, #48	; 0x30
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fd ff9d 	bl	800ae8e <ld_dword>
 800cf54:	4603      	mov	r3, r0
 800cf56:	4a1a      	ldr	r2, [pc, #104]	; (800cfc0 <find_volume+0x484>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d11e      	bne.n	800cf9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	3330      	adds	r3, #48	; 0x30
 800cf60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fd ff92 	bl	800ae8e <ld_dword>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	4a15      	ldr	r2, [pc, #84]	; (800cfc4 <find_volume+0x488>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d113      	bne.n	800cf9a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf74:	3330      	adds	r3, #48	; 0x30
 800cf76:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fd ff87 	bl	800ae8e <ld_dword>
 800cf80:	4602      	mov	r2, r0
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf88:	3330      	adds	r3, #48	; 0x30
 800cf8a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fd ff7d 	bl	800ae8e <ld_dword>
 800cf94:	4602      	mov	r2, r0
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	60da      	str	r2, [r3, #12]
		}
#endif
#endif
	}

	fs->fs_type = fmt;	/* FAT sub-type */
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cfa0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800cfa2:	4b09      	ldr	r3, [pc, #36]	; (800cfc8 <find_volume+0x48c>)
 800cfa4:	881b      	ldrh	r3, [r3, #0]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	4b07      	ldr	r3, [pc, #28]	; (800cfc8 <find_volume+0x48c>)
 800cfac:	801a      	strh	r2, [r3, #0]
 800cfae:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <find_volume+0x48c>)
 800cfb0:	881a      	ldrh	r2, [r3, #0]
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3758      	adds	r7, #88	; 0x58
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	41615252 	.word	0x41615252
 800cfc4:	61417272 	.word	0x61417272
 800cfc8:	2000182c 	.word	0x2000182c

0800cfcc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60bb      	str	r3, [r7, #8]
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d01a      	beq.n	800d016 <validate+0x4a>
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d016      	beq.n	800d016 <validate+0x4a>
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d011      	beq.n	800d016 <validate+0x4a>
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	88da      	ldrh	r2, [r3, #6]
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	889b      	ldrh	r3, [r3, #4]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d10a      	bne.n	800d016 <validate+0x4a>
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	785b      	ldrb	r3, [r3, #1]
 800d006:	4618      	mov	r0, r3
 800d008:	f7f9 fd98 	bl	8006b3c <disk_status>
 800d00c:	4603      	mov	r3, r0
 800d00e:	f003 0301 	and.w	r3, r3, #1
 800d012:	2b00      	cmp	r3, #0
 800d014:	d005      	beq.n	800d022 <validate+0x56>
		*fs = 0;				/* The object is invalid */
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2200      	movs	r2, #0
 800d01a:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;
 800d01c:	2309      	movs	r3, #9
 800d01e:	73fb      	strb	r3, [r7, #15]
 800d020:	e005      	b.n	800d02e <validate+0x62>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	4613      	mov	r3, r2
 800d044:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800d04a:	f107 0310 	add.w	r3, r7, #16
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fceb 	bl	800ca2a <get_ldnumber>
 800d054:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	da01      	bge.n	800d060 <f_mount+0x28>
 800d05c:	230b      	movs	r3, #11
 800d05e:	e028      	b.n	800d0b2 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d060:	4a16      	ldr	r2, [pc, #88]	; (800d0bc <f_mount+0x84>)
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d068:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	490d      	ldr	r1, [pc, #52]	; (800d0bc <f_mount+0x84>)
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <f_mount+0x60>
 800d092:	79fb      	ldrb	r3, [r7, #7]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d001      	beq.n	800d09c <f_mount+0x64>
 800d098:	2300      	movs	r3, #0
 800d09a:	e00a      	b.n	800d0b2 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d09c:	f107 010c 	add.w	r1, r7, #12
 800d0a0:	f107 0308 	add.w	r3, r7, #8
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff fd48 	bl	800cb3c <find_volume>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3720      	adds	r7, #32
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20001828 	.word	0x20001828

0800d0c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b096      	sub	sp, #88	; 0x58
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	71fb      	strb	r3, [r7, #7]
	DWORD dw, cl;
#endif
	DEF_NAMBUF;


	if (!fp) return FR_INVALID_OBJECT;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d101      	bne.n	800d0d8 <f_open+0x18>
 800d0d4:	2309      	movs	r3, #9
 800d0d6:	e10c      	b.n	800d2f2 <f_open+0x232>
	fp->obj.fs = 0;		/* Clear file object */
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	f003 031f 	and.w	r3, r3, #31
 800d0e4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d0e6:	79fa      	ldrb	r2, [r7, #7]
 800d0e8:	f107 011c 	add.w	r1, r7, #28
 800d0ec:	f107 0308 	add.w	r3, r7, #8
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff fd23 	bl	800cb3c <find_volume>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res == FR_OK) {
 800d0fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d100:	2b00      	cmp	r3, #0
 800d102:	f040 80f4 	bne.w	800d2ee <f_open+0x22e>
		dj.obj.fs = fs;
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	623b      	str	r3, [r7, #32]
		INIT_NAMBUF(dj);
 800d10a:	f107 0310 	add.w	r3, r7, #16
 800d10e:	643b      	str	r3, [r7, #64]	; 0x40
 800d110:	4b7a      	ldr	r3, [pc, #488]	; (800d2fc <f_open+0x23c>)
 800d112:	64bb      	str	r3, [r7, #72]	; 0x48
		res = follow_path(&dj, path);	/* Follow the file path */
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	f107 0320 	add.w	r3, r7, #32
 800d11a:	4611      	mov	r1, r2
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff fc13 	bl	800c948 <follow_path>
 800d122:	4603      	mov	r3, r0
 800d124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d108      	bne.n	800d142 <f_open+0x82>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d132:	330b      	adds	r3, #11
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	b25b      	sxtb	r3, r3
 800d138:	2b00      	cmp	r3, #0
 800d13a:	da02      	bge.n	800d142 <f_open+0x82>
				res = FR_INVALID_NAME;
 800d13c:	2306      	movs	r3, #6
 800d13e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	f003 031c 	and.w	r3, r3, #28
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d078      	beq.n	800d23e <f_open+0x17e>
			if (res != FR_OK) {					/* No file, create new */
 800d14c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d150:	2b00      	cmp	r3, #0
 800d152:	d010      	beq.n	800d176 <f_open+0xb6>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800d154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d158:	2b04      	cmp	r3, #4
 800d15a:	d107      	bne.n	800d16c <f_open+0xac>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800d15c:	f107 0320 	add.w	r3, r7, #32
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff f815 	bl	800c190 <dir_register>
 800d166:	4603      	mov	r3, r0
 800d168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d16c:	79fb      	ldrb	r3, [r7, #7]
 800d16e:	f043 0308 	orr.w	r3, r3, #8
 800d172:	71fb      	strb	r3, [r7, #7]
 800d174:	e011      	b.n	800d19a <f_open+0xda>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d176:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d17a:	f003 0311 	and.w	r3, r3, #17
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d003      	beq.n	800d18a <f_open+0xca>
					res = FR_DENIED;
 800d182:	2307      	movs	r3, #7
 800d184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d188:	e007      	b.n	800d19a <f_open+0xda>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	f003 0304 	and.w	r3, r3, #4
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <f_open+0xda>
 800d194:	2308      	movs	r3, #8
 800d196:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d19a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d169      	bne.n	800d276 <f_open+0x1b6>
 800d1a2:	79fb      	ldrb	r3, [r7, #7]
 800d1a4:	f003 0308 	and.w	r3, r3, #8
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d064      	beq.n	800d276 <f_open+0x1b6>
				dw = GET_FATTIME();
 800d1ac:	4b54      	ldr	r3, [pc, #336]	; (800d300 <f_open+0x240>)
 800d1ae:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b2:	330e      	adds	r3, #14
 800d1b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fd fea7 	bl	800af0a <st_dword>
					st_dword(dj.dir + DIR_WrtTime, dw);	/* Set modified time */
 800d1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1be:	3316      	adds	r3, #22
 800d1c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fd fea1 	bl	800af0a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ca:	330b      	adds	r3, #11
 800d1cc:	2220      	movs	r2, #32
 800d1ce:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fc4b 	bl	800ba72 <ld_clust>
 800d1dc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe fc63 	bl	800bab0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ec:	331c      	adds	r3, #28
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fd fe8a 	bl	800af0a <st_dword>
					fs->wflag = 1;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d039      	beq.n	800d276 <f_open+0x1b6>
						dw = fs->winsect;
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d206:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d208:	f107 0320 	add.w	r3, r7, #32
 800d20c:	2200      	movs	r2, #0
 800d20e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d210:	4618      	mov	r0, r3
 800d212:	f7fe f9ad 	bl	800b570 <remove_chain>
 800d216:	4603      	mov	r3, r0
 800d218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						if (res == FR_OK) {
 800d21c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d220:	2b00      	cmp	r3, #0
 800d222:	d128      	bne.n	800d276 <f_open+0x1b6>
							res = move_window(fs, dw);
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d228:	4618      	mov	r0, r3
 800d22a:	f7fd ff5c 	bl	800b0e6 <move_window>
 800d22e:	4603      	mov	r3, r0
 800d230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d238:	3a01      	subs	r2, #1
 800d23a:	60da      	str	r2, [r3, #12]
 800d23c:	e01b      	b.n	800d276 <f_open+0x1b6>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d23e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d242:	2b00      	cmp	r3, #0
 800d244:	d117      	bne.n	800d276 <f_open+0x1b6>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d24a:	f003 0310 	and.w	r3, r3, #16
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d003      	beq.n	800d25a <f_open+0x19a>
					res = FR_NO_FILE;
 800d252:	2304      	movs	r3, #4
 800d254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800d258:	e00d      	b.n	800d276 <f_open+0x1b6>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	f003 0302 	and.w	r3, r3, #2
 800d260:	2b00      	cmp	r3, #0
 800d262:	d008      	beq.n	800d276 <f_open+0x1b6>
 800d264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d268:	f003 0301 	and.w	r3, r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <f_open+0x1b6>
						res = FR_DENIED;
 800d270:	2307      	movs	r3, #7
 800d272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
		}
		if (res == FR_OK) {
 800d276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10f      	bne.n	800d29e <f_open+0x1de>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	f003 0308 	and.w	r3, r3, #8
 800d284:	2b00      	cmp	r3, #0
 800d286:	d003      	beq.n	800d290 <f_open+0x1d0>
				mode |= _FA_MODIFIED;
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	f043 0320 	orr.w	r3, r3, #32
 800d28e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800d298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d29e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d123      	bne.n	800d2ee <f_open+0x22e>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fbe0 	bl	800ba72 <ld_clust>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ba:	331c      	adds	r3, #28
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fd fde6 	bl	800ae8e <ld_dword>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Normal seek mode */
#endif
			fp->err = 0;			/* Clear error flag */
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	745a      	strb	r2, [r3, #17]
			fp->fptr = 0;			/* Set file pointer */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	615a      	str	r2, [r3, #20]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	61da      	str	r2, [r3, #28]
			fp->flag = mode;		/* File access mode */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	79fa      	ldrb	r2, [r7, #7]
 800d2de:	741a      	strb	r2, [r3, #16]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2e0:	69fa      	ldr	r2, [r7, #28]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	88da      	ldrh	r2, [r3, #6]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	809a      	strh	r2, [r3, #4]
		}

		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d2ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3758      	adds	r7, #88	; 0x58
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20001830 	.word	0x20001830
 800d300:	48610000 	.word	0x48610000

0800d304 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08e      	sub	sp, #56	; 0x38
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
	res = validate(fp, &fs);
 800d31c:	f107 0314 	add.w	r3, r7, #20
 800d320:	4619      	mov	r1, r3
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7ff fe52 	bl	800cfcc <validate>
 800d328:	4603      	mov	r3, r0
 800d32a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d32e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d332:	2b00      	cmp	r3, #0
 800d334:	d107      	bne.n	800d346 <f_read+0x42>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	7c5b      	ldrb	r3, [r3, #17]
 800d33a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d33e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <f_read+0x48>
 800d346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d34a:	e10a      	b.n	800d562 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	7c1b      	ldrb	r3, [r3, #16]
 800d350:	f003 0301 	and.w	r3, r3, #1
 800d354:	2b00      	cmp	r3, #0
 800d356:	d101      	bne.n	800d35c <f_read+0x58>
 800d358:	2307      	movs	r3, #7
 800d35a:	e102      	b.n	800d562 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	68da      	ldr	r2, [r3, #12]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	6a3b      	ldr	r3, [r7, #32]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	f240 80f3 	bls.w	800d558 <f_read+0x254>
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d376:	e0ef      	b.n	800d558 <f_read+0x254>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fs)) == 0) {			/* On the sector boundary? */
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	695b      	ldr	r3, [r3, #20]
 800d37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d380:	2b00      	cmp	r3, #0
 800d382:	f040 80bc 	bne.w	800d4fe <f_read+0x1fa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	0a5b      	lsrs	r3, r3, #9
 800d38c:	697a      	ldr	r2, [r7, #20]
 800d38e:	8952      	ldrh	r2, [r2, #10]
 800d390:	3a01      	subs	r2, #1
 800d392:	4013      	ands	r3, r2
 800d394:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d123      	bne.n	800d3e4 <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d103      	bne.n	800d3ac <f_read+0xa8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	633b      	str	r3, [r7, #48]	; 0x30
 800d3aa:	e007      	b.n	800d3bc <f_read+0xb8>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	f7fd ff50 	bl	800b25a <get_fat>
 800d3ba:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d804      	bhi.n	800d3cc <f_read+0xc8>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	745a      	strb	r2, [r3, #17]
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	e0ca      	b.n	800d562 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d104      	bne.n	800d3de <f_read+0xda>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	745a      	strb	r2, [r3, #17]
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e0c1      	b.n	800d562 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e2:	619a      	str	r2, [r3, #24]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7fd ff15 	bl	800b21c <clust2sect>
 800d3f2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d104      	bne.n	800d404 <f_read+0x100>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2202      	movs	r2, #2
 800d3fe:	745a      	strb	r2, [r3, #17]
 800d400:	2302      	movs	r3, #2
 800d402:	e0ae      	b.n	800d562 <f_read+0x25e>
			sect += csect;
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	4413      	add	r3, r2
 800d40a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	0a5b      	lsrs	r3, r3, #9
 800d410:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	2b00      	cmp	r3, #0
 800d416:	d03a      	beq.n	800d48e <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d418:	69fa      	ldr	r2, [r7, #28]
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	4413      	add	r3, r2
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	8952      	ldrh	r2, [r2, #10]
 800d422:	4293      	cmp	r3, r2
 800d424:	d905      	bls.n	800d432 <f_read+0x12e>
					cc = fs->csize - csect;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	895b      	ldrh	r3, [r3, #10]
 800d42a:	461a      	mov	r2, r3
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) {
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	7858      	ldrb	r0, [r3, #1]
 800d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d438:	69ba      	ldr	r2, [r7, #24]
 800d43a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d43c:	f7f9 fb94 	bl	8006b68 <disk_read>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d004      	beq.n	800d450 <f_read+0x14c>
					ABORT(fs, FR_DISK_ERR);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2201      	movs	r2, #1
 800d44a:	745a      	strb	r2, [r3, #17]
 800d44c:	2301      	movs	r3, #1
 800d44e:	e088      	b.n	800d562 <f_read+0x25e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & _FA_DIRTY) && fp->sect - sect < cc) {
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	7c1b      	ldrb	r3, [r3, #16]
 800d454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d014      	beq.n	800d486 <f_read+0x182>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	69da      	ldr	r2, [r3, #28]
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d466:	429a      	cmp	r2, r3
 800d468:	d90d      	bls.n	800d486 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	69da      	ldr	r2, [r3, #28]
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	025b      	lsls	r3, r3, #9
 800d474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d476:	18d0      	adds	r0, r2, r3
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3328      	adds	r3, #40	; 0x28
 800d47c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d480:	4619      	mov	r1, r3
 800d482:	f7fd fd6e 	bl	800af62 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d488:	025b      	lsls	r3, r3, #9
 800d48a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d48c:	e050      	b.n	800d530 <f_read+0x22c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	429a      	cmp	r2, r3
 800d496:	d02f      	beq.n	800d4f8 <f_read+0x1f4>
#if !_FS_READONLY
				if (fp->flag & _FA_DIRTY) {		/* Write-back dirty sector cache */
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	7c1b      	ldrb	r3, [r3, #16]
 800d49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d018      	beq.n	800d4d6 <f_read+0x1d2>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	7858      	ldrb	r0, [r3, #1]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	69da      	ldr	r2, [r3, #28]
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f7f9 fbc0 	bl	8006c38 <disk_write>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d004      	beq.n	800d4c8 <f_read+0x1c4>
						ABORT(fs, FR_DISK_ERR);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	745a      	strb	r2, [r3, #17]
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e04c      	b.n	800d562 <f_read+0x25e>
					}
					fp->flag &= ~_FA_DIRTY;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	7c1b      	ldrb	r3, [r3, #16]
 800d4cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	{	/* Fill sector cache */
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	7858      	ldrb	r0, [r3, #1]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	f7f9 fb40 	bl	8006b68 <disk_read>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <f_read+0x1f4>
					ABORT(fs, FR_DISK_ERR);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	745a      	strb	r2, [r3, #17]
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e034      	b.n	800d562 <f_read+0x25e>
				}
			}
#endif
			fp->sect = sect;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Get partial sector data from sector buffer */
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d506:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d50a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;
 800d50c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d901      	bls.n	800d518 <f_read+0x214>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (move_window(fs, fp->sect) != FR_OK) {	/* Move sector window */
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(rbuff, &fs->win[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d520:	3328      	adds	r3, #40	; 0x28
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	4413      	add	r3, r2
 800d526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d528:	4619      	mov	r1, r3
 800d52a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d52c:	f7fd fd19 	bl	800af62 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	4413      	add	r3, r2
 800d536:	627b      	str	r3, [r7, #36]	; 0x24
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	695a      	ldr	r2, [r3, #20]
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53e:	441a      	add	r2, r3
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	615a      	str	r2, [r3, #20]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	441a      	add	r2, r3
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d554:	1ad3      	subs	r3, r2, r3
 800d556:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f47f af0c 	bne.w	800d378 <f_read+0x74>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	3738      	adds	r7, #56	; 0x38
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b08c      	sub	sp, #48	; 0x30
 800d56e:	af00      	add	r7, sp, #0
 800d570:	60f8      	str	r0, [r7, #12]
 800d572:	60b9      	str	r1, [r7, #8]
 800d574:	607a      	str	r2, [r7, #4]
 800d576:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
	res = validate(fp, &fs);
 800d582:	f107 0310 	add.w	r3, r7, #16
 800d586:	4619      	mov	r1, r3
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f7ff fd1f 	bl	800cfcc <validate>
 800d58e:	4603      	mov	r3, r0
 800d590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d107      	bne.n	800d5ac <f_write+0x42>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	7c5b      	ldrb	r3, [r3, #17]
 800d5a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d5a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <f_write+0x48>
 800d5ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5b0:	e13f      	b.n	800d832 <f_write+0x2c8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	7c1b      	ldrb	r3, [r3, #16]
 800d5b6:	f003 0302 	and.w	r3, r3, #2
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <f_write+0x58>
 800d5be:	2307      	movs	r3, #7
 800d5c0:	e137      	b.n	800d832 <f_write+0x2c8>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	695a      	ldr	r2, [r3, #20]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	441a      	add	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	695b      	ldr	r3, [r3, #20]
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	f080 8121 	bcs.w	800d816 <f_write+0x2ac>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	43db      	mvns	r3, r3
 800d5da:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d5dc:	e11b      	b.n	800d816 <f_write+0x2ac>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fs)) == 0) {		/* On the sector boundary? */
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	695b      	ldr	r3, [r3, #20]
 800d5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f040 80d8 	bne.w	800d79c <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	695b      	ldr	r3, [r3, #20]
 800d5f0:	0a5b      	lsrs	r3, r3, #9
 800d5f2:	693a      	ldr	r2, [r7, #16]
 800d5f4:	8952      	ldrh	r2, [r2, #10]
 800d5f6:	3a01      	subs	r2, #1
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d137      	bne.n	800d672 <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10c      	bne.n	800d624 <f_write+0xba>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10e      	bne.n	800d634 <f_write+0xca>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2100      	movs	r1, #0
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe f80b 	bl	800b636 <create_chain>
 800d620:	62b8      	str	r0, [r7, #40]	; 0x28
 800d622:	e007      	b.n	800d634 <f_write+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	4619      	mov	r1, r3
 800d62c:	4610      	mov	r0, r2
 800d62e:	f7fe f802 	bl	800b636 <create_chain>
 800d632:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 80f2 	beq.w	800d820 <f_write+0x2b6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d104      	bne.n	800d64c <f_write+0xe2>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2202      	movs	r2, #2
 800d646:	745a      	strb	r2, [r3, #17]
 800d648:	2302      	movs	r3, #2
 800d64a:	e0f2      	b.n	800d832 <f_write+0x2c8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d652:	d104      	bne.n	800d65e <f_write+0xf4>
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2201      	movs	r2, #1
 800d658:	745a      	strb	r2, [r3, #17]
 800d65a:	2301      	movs	r3, #1
 800d65c:	e0e9      	b.n	800d832 <f_write+0x2c8>
				fp->clust = clst;			/* Update current cluster */
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d662:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <f_write+0x108>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d670:	609a      	str	r2, [r3, #8]
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK)	{	/* Write-back sector cache */
				ABORT(fs, FR_DISK_ERR);
			}
#else
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	7c1b      	ldrb	r3, [r3, #16]
 800d676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d018      	beq.n	800d6b0 <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	7858      	ldrb	r0, [r3, #1]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	69da      	ldr	r2, [r3, #28]
 800d68c:	2301      	movs	r3, #1
 800d68e:	f7f9 fad3 	bl	8006c38 <disk_write>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <f_write+0x138>
					ABORT(fs, FR_DISK_ERR);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2201      	movs	r2, #1
 800d69c:	745a      	strb	r2, [r3, #17]
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e0c7      	b.n	800d832 <f_write+0x2c8>
				}
				fp->flag &= ~_FA_DIRTY;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	7c1b      	ldrb	r3, [r3, #16]
 800d6a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7fd fdaf 	bl	800b21c <clust2sect>
 800d6be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d104      	bne.n	800d6d0 <f_write+0x166>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	745a      	strb	r2, [r3, #17]
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	e0b0      	b.n	800d832 <f_write+0x2c8>
			sect += csect;
 800d6d0:	697a      	ldr	r2, [r7, #20]
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	0a5b      	lsrs	r3, r3, #9
 800d6dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d6de:	6a3b      	ldr	r3, [r7, #32]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d03c      	beq.n	800d75e <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d6e4:	69ba      	ldr	r2, [r7, #24]
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	8952      	ldrh	r2, [r2, #10]
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d905      	bls.n	800d6fe <f_write+0x194>
					cc = fs->csize - csect;
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	895b      	ldrh	r3, [r3, #10]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	7858      	ldrb	r0, [r3, #1]
 800d702:	6a3b      	ldr	r3, [r7, #32]
 800d704:	697a      	ldr	r2, [r7, #20]
 800d706:	69f9      	ldr	r1, [r7, #28]
 800d708:	f7f9 fa96 	bl	8006c38 <disk_write>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d004      	beq.n	800d71c <f_write+0x1b2>
					ABORT(fs, FR_DISK_ERR);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2201      	movs	r2, #1
 800d716:	745a      	strb	r2, [r3, #17]
 800d718:	2301      	movs	r3, #1
 800d71a:	e08a      	b.n	800d832 <f_write+0x2c8>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	69da      	ldr	r2, [r3, #28]
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	1ad3      	subs	r3, r2, r3
 800d724:	6a3a      	ldr	r2, [r7, #32]
 800d726:	429a      	cmp	r2, r3
 800d728:	d915      	bls.n	800d756 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	69da      	ldr	r2, [r3, #28]
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	025b      	lsls	r3, r3, #9
 800d73a:	69fa      	ldr	r2, [r7, #28]
 800d73c:	4413      	add	r3, r2
 800d73e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d742:	4619      	mov	r1, r3
 800d744:	f7fd fc0d 	bl	800af62 <mem_cpy>
					fp->flag &= ~_FA_DIRTY;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	7c1b      	ldrb	r3, [r3, #16]
 800d74c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d750:	b2da      	uxtb	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	025b      	lsls	r3, r3, #9
 800d75a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d75c:	e03e      	b.n	800d7dc <f_write+0x272>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	429a      	cmp	r2, r3
 800d766:	d016      	beq.n	800d796 <f_write+0x22c>
				if (fp->fptr < fp->obj.objsize &&
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	695a      	ldr	r2, [r3, #20]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	429a      	cmp	r2, r3
 800d772:	d210      	bcs.n	800d796 <f_write+0x22c>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	7858      	ldrb	r0, [r3, #1]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d77e:	2301      	movs	r3, #1
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	f7f9 f9f1 	bl	8006b68 <disk_read>
 800d786:	4603      	mov	r3, r0
				if (fp->fptr < fp->obj.objsize &&
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d004      	beq.n	800d796 <f_write+0x22c>
						ABORT(fs, FR_DISK_ERR);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2201      	movs	r2, #1
 800d790:	745a      	strb	r2, [r3, #17]
 800d792:	2301      	movs	r3, #1
 800d794:	e04d      	b.n	800d832 <f_write+0x2c8>
				}
			}
#endif
			fp->sect = sect;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Put partial sector into file I/O buffer */
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d7a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;
 800d7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d901      	bls.n	800d7b6 <f_write+0x24c>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	627b      	str	r3, [r7, #36]	; 0x24
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(&fs->win[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
		fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7be:	3328      	adds	r3, #40	; 0x28
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7c6:	69f9      	ldr	r1, [r7, #28]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fd fbca 	bl	800af62 <mem_cpy>
		fp->flag |= _FA_DIRTY;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	7c1b      	ldrb	r3, [r3, #16]
 800d7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d7dc:	69fa      	ldr	r2, [r7, #28]
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	4413      	add	r3, r2
 800d7e2:	61fb      	str	r3, [r7, #28]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	695a      	ldr	r2, [r3, #20]
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	441a      	add	r2, r3
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	615a      	str	r2, [r3, #20]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	68da      	ldr	r2, [r3, #12]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	bf38      	it	cc
 800d7fc:	461a      	movcc	r2, r3
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	60da      	str	r2, [r3, #12]
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	441a      	add	r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	601a      	str	r2, [r3, #0]
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f47f aee0 	bne.w	800d5de <f_write+0x74>
 800d81e:	e000      	b.n	800d822 <f_write+0x2b8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d820:	bf00      	nop
#endif
	}

	fp->flag |= _FA_MODIFIED;						/* Set file change flag */
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	7c1b      	ldrb	r3, [r3, #16]
 800d826:	f043 0320 	orr.w	r3, r3, #32
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3730      	adds	r7, #48	; 0x30
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
	...

0800d83c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
	DWORD tm;
	BYTE *dir;
	DEF_DIRBUF;


	res = validate(fp, &fs);	/* Check validity of the object */
 800d844:	f107 0308 	add.w	r3, r7, #8
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff fbbe 	bl	800cfcc <validate>
 800d850:	4603      	mov	r3, r0
 800d852:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d854:	7dfb      	ldrb	r3, [r7, #23]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d168      	bne.n	800d92c <f_sync+0xf0>
		if (fp->flag & _FA_MODIFIED) {	/* Is there any change to the file? */
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	7c1b      	ldrb	r3, [r3, #16]
 800d85e:	f003 0320 	and.w	r3, r3, #32
 800d862:	2b00      	cmp	r3, #0
 800d864:	d062      	beq.n	800d92c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & _FA_DIRTY) {	/* Write-back cached data if needed */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7c1b      	ldrb	r3, [r3, #16]
 800d86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d015      	beq.n	800d89e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	7858      	ldrb	r0, [r3, #1]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	69da      	ldr	r2, [r3, #28]
 800d880:	2301      	movs	r3, #1
 800d882:	f7f9 f9d9 	bl	8006c38 <disk_write>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <f_sync+0x54>
					LEAVE_FF(fs, FR_DISK_ERR);
 800d88c:	2301      	movs	r3, #1
 800d88e:	e04e      	b.n	800d92e <f_sync+0xf2>
				}
				fp->flag &= ~_FA_DIRTY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7c1b      	ldrb	r3, [r3, #16]
 800d894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d89e:	4b26      	ldr	r3, [pc, #152]	; (800d938 <f_sync+0xfc>)
 800d8a0:	613b      	str	r3, [r7, #16]
					FREE_DIRBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a1b      	ldr	r3, [r3, #32]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	f7fd fc1b 	bl	800b0e6 <move_window>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d8b4:	7dfb      	ldrb	r3, [r7, #23]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d138      	bne.n	800d92c <f_sync+0xf0>
					dir = fp->dir_ptr;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	330b      	adds	r3, #11
 800d8c4:	781a      	ldrb	r2, [r3, #0]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	330b      	adds	r3, #11
 800d8ca:	f042 0220 	orr.w	r2, r2, #32
 800d8ce:	b2d2      	uxtb	r2, r2
 800d8d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6818      	ldr	r0, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	68f9      	ldr	r1, [r7, #12]
 800d8de:	f7fe f8e7 	bl	800bab0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f103 021c 	add.w	r2, r3, #28
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	f7fd fb0b 	bl	800af0a <st_dword>
					st_dword(dir + DIR_WrtTime, tm);				/* Update modified time */
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	3316      	adds	r3, #22
 800d8f8:	6939      	ldr	r1, [r7, #16]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fd fb05 	bl	800af0a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	3312      	adds	r3, #18
 800d904:	2100      	movs	r1, #0
 800d906:	4618      	mov	r0, r3
 800d908:	f7fd fae4 	bl	800aed4 <st_word>
					fs->wflag = 1;
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	2201      	movs	r2, #1
 800d910:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	4618      	mov	r0, r3
 800d916:	f7fd fc13 	bl	800b140 <sync_fs>
 800d91a:	4603      	mov	r3, r0
 800d91c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= ~_FA_MODIFIED;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7c1b      	ldrb	r3, [r3, #16]
 800d922:	f023 0320 	bic.w	r3, r3, #32
 800d926:	b2da      	uxtb	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	48610000 	.word	0x48610000

0800d93c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7ff ff79 	bl	800d83c <f_sync>
 800d94a:	4603      	mov	r3, r0
 800d94c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10d      	bne.n	800d970 <f_close+0x34>
#endif
	{
		res = validate(fp, &fs);	/* Lock volume */
 800d954:	f107 0308 	add.w	r3, r7, #8
 800d958:	4619      	mov	r1, r3
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff fb36 	bl	800cfcc <validate>
 800d960:	4603      	mov	r3, r0
 800d962:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d102      	bne.n	800d970 <f_close+0x34>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d970:	7bfb      	ldrb	r3, [r7, #15]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b088      	sub	sp, #32
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(fp, &fs);		/* Check validity of the object */
 800d984:	f107 0308 	add.w	r3, r7, #8
 800d988:	4619      	mov	r1, r3
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff fb1e 	bl	800cfcc <validate>
 800d990:	4603      	mov	r3, r0
 800d992:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d994:	7ffb      	ldrb	r3, [r7, #31]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d105      	bne.n	800d9a6 <f_lseek+0x2c>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7c5b      	ldrb	r3, [r3, #17]
 800d99e:	77fb      	strb	r3, [r7, #31]
 800d9a0:	7ffb      	ldrb	r3, [r7, #31]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <f_lseek+0x30>
 800d9a6:	7ffb      	ldrb	r3, [r7, #31]
 800d9a8:	e110      	b.n	800dbcc <f_lseek+0x252>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->obj.objsize				/* In read-only mode, clip offset with the file size */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d908      	bls.n	800d9c6 <f_lseek+0x4c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	7c1b      	ldrb	r3, [r3, #16]
 800d9b8:	f003 0302 	and.w	r3, r3, #2
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d102      	bne.n	800d9c6 <f_lseek+0x4c>
#endif
			) ofs = fp->obj.objsize;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	615a      	str	r2, [r3, #20]
		if (ofs) {
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80a7 	beq.w	800db2c <f_lseek+0x1b2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	895b      	ldrh	r3, [r3, #10]
 800d9e2:	025b      	lsls	r3, r3, #9
 800d9e4:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d01b      	beq.n	800da24 <f_lseek+0xaa>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	1e5a      	subs	r2, r3, #1
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	1e59      	subs	r1, r3, #1
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800da00:	429a      	cmp	r2, r3
 800da02:	d30f      	bcc.n	800da24 <f_lseek+0xaa>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	1e5a      	subs	r2, r3, #1
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	425b      	negs	r3, r3
 800da0c:	401a      	ands	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	695b      	ldr	r3, [r3, #20]
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	61bb      	str	r3, [r7, #24]
 800da22:	e022      	b.n	800da6a <f_lseek+0xf0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	61bb      	str	r3, [r7, #24]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d119      	bne.n	800da64 <f_lseek+0xea>
					clst = create_chain(&fp->obj, 0);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2100      	movs	r1, #0
 800da34:	4618      	mov	r0, r3
 800da36:	f7fd fdfe 	bl	800b636 <create_chain>
 800da3a:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d104      	bne.n	800da4c <f_lseek+0xd2>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2202      	movs	r2, #2
 800da46:	745a      	strb	r2, [r3, #17]
 800da48:	2302      	movs	r3, #2
 800da4a:	e0bf      	b.n	800dbcc <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da52:	d104      	bne.n	800da5e <f_lseek+0xe4>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	745a      	strb	r2, [r3, #17]
 800da5a:	2301      	movs	r3, #1
 800da5c:	e0b6      	b.n	800dbcc <f_lseek+0x252>
					fp->obj.sclust = clst;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	69ba      	ldr	r2, [r7, #24]
 800da62:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d05d      	beq.n	800db2c <f_lseek+0x1b2>
				while (ofs > bcs) {						/* Cluster following loop */
 800da70:	e03a      	b.n	800dae8 <f_lseek+0x16e>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	7c1b      	ldrb	r3, [r3, #16]
 800da76:	f003 0302 	and.w	r3, r3, #2
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00b      	beq.n	800da96 <f_lseek+0x11c>
						clst = create_chain(&fp->obj, clst);	/* Force stretch if in write mode */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	69b9      	ldr	r1, [r7, #24]
 800da82:	4618      	mov	r0, r3
 800da84:	f7fd fdd7 	bl	800b636 <create_chain>
 800da88:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* When disk gets full, clip file size */
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d108      	bne.n	800daa2 <f_lseek+0x128>
							ofs = bcs; break;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	e02c      	b.n	800daf0 <f_lseek+0x176>
						}
					} else
#endif
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	69b9      	ldr	r1, [r7, #24]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fd fbdd 	bl	800b25a <get_fat>
 800daa0:	61b8      	str	r0, [r7, #24]
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa8:	d104      	bne.n	800dab4 <f_lseek+0x13a>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2201      	movs	r2, #1
 800daae:	745a      	strb	r2, [r3, #17]
 800dab0:	2301      	movs	r3, #1
 800dab2:	e08b      	b.n	800dbcc <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d904      	bls.n	800dac4 <f_lseek+0x14a>
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	69ba      	ldr	r2, [r7, #24]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d304      	bcc.n	800dace <f_lseek+0x154>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2202      	movs	r2, #2
 800dac8:	745a      	strb	r2, [r3, #17]
 800daca:	2302      	movs	r3, #2
 800dacc:	e07e      	b.n	800dbcc <f_lseek+0x252>
					fp->clust = clst;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	69ba      	ldr	r2, [r7, #24]
 800dad2:	619a      	str	r2, [r3, #24]
					fp->fptr += bcs;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	695a      	ldr	r2, [r3, #20]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	441a      	add	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	615a      	str	r2, [r3, #20]
					ofs -= bcs;
 800dae0:	683a      	ldr	r2, [r7, #0]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	429a      	cmp	r2, r3
 800daee:	d8c0      	bhi.n	800da72 <f_lseek+0xf8>
				}
				fp->fptr += ofs;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	695a      	ldr	r2, [r3, #20]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	441a      	add	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db02:	2b00      	cmp	r3, #0
 800db04:	d012      	beq.n	800db2c <f_lseek+0x1b2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	69b9      	ldr	r1, [r7, #24]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fd fb86 	bl	800b21c <clust2sect>
 800db10:	6178      	str	r0, [r7, #20]
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d104      	bne.n	800db22 <f_lseek+0x1a8>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2202      	movs	r2, #2
 800db1c:	745a      	strb	r2, [r3, #17]
 800db1e:	2302      	movs	r3, #2
 800db20:	e054      	b.n	800dbcc <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	0a5b      	lsrs	r3, r3, #9
 800db26:	697a      	ldr	r2, [r7, #20]
 800db28:	4413      	add	r3, r2
 800db2a:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	695b      	ldr	r3, [r3, #20]
 800db30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db34:	2b00      	cmp	r3, #0
 800db36:	d037      	beq.n	800dba8 <f_lseek+0x22e>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	69db      	ldr	r3, [r3, #28]
 800db3c:	697a      	ldr	r2, [r7, #20]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d032      	beq.n	800dba8 <f_lseek+0x22e>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & _FA_DIRTY) {			/* Write-back dirty sector cache */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7c1b      	ldrb	r3, [r3, #16]
 800db46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d018      	beq.n	800db80 <f_lseek+0x206>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	7858      	ldrb	r0, [r3, #1]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	69da      	ldr	r2, [r3, #28]
 800db5c:	2301      	movs	r3, #1
 800db5e:	f7f9 f86b 	bl	8006c38 <disk_write>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d004      	beq.n	800db72 <f_lseek+0x1f8>
					ABORT(fs, FR_DISK_ERR);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	745a      	strb	r2, [r3, #17]
 800db6e:	2301      	movs	r3, #1
 800db70:	e02c      	b.n	800dbcc <f_lseek+0x252>
				}
				fp->flag &= ~_FA_DIRTY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	7c1b      	ldrb	r3, [r3, #16]
 800db76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) {	/* Fill sector cache */
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	7858      	ldrb	r0, [r3, #1]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800db8a:	2301      	movs	r3, #1
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	f7f8 ffeb 	bl	8006b68 <disk_read>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d004      	beq.n	800dba2 <f_lseek+0x228>
				ABORT(fs, FR_DISK_ERR);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	745a      	strb	r2, [r3, #17]
 800db9e:	2301      	movs	r3, #1
 800dba0:	e014      	b.n	800dbcc <f_lseek+0x252>
			}
#endif
			fp->sect = nsect;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	697a      	ldr	r2, [r7, #20]
 800dba6:	61da      	str	r2, [r3, #28]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	695a      	ldr	r2, [r3, #20]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d90a      	bls.n	800dbca <f_lseek+0x250>
			fp->obj.objsize = fp->fptr;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	695a      	ldr	r2, [r3, #20]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	60da      	str	r2, [r3, #12]
			fp->flag |= _FA_MODIFIED;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	7c1b      	ldrb	r3, [r3, #16]
 800dbc0:	f043 0320 	orr.w	r3, r3, #32
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	741a      	strb	r2, [r3, #16]
		}
#endif
	}

	LEAVE_FF(fs, res);
 800dbca:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3720      	adds	r7, #32
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b092      	sub	sp, #72	; 0x48
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF;


	/* Get logical drive number */
	res = find_volume(&path, &dj.obj.fs, 0);
 800dbde:	f107 0118 	add.w	r1, r7, #24
 800dbe2:	1d3b      	adds	r3, r7, #4
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fe ffa8 	bl	800cb3c <find_volume>
 800dbec:	4603      	mov	r3, r0
 800dbee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800dbf2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d125      	bne.n	800dc46 <f_stat+0x72>
		INIT_NAMBUF(dj);
 800dbfa:	f107 030c 	add.w	r3, r7, #12
 800dbfe:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc00:	4b14      	ldr	r3, [pc, #80]	; (800dc54 <f_stat+0x80>)
 800dc02:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	f107 0318 	add.w	r3, r7, #24
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fe fe9b 	bl	800c948 <follow_path>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {				/* Follow completed */
 800dc18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d112      	bne.n	800dc46 <f_stat+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800dc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc22:	330b      	adds	r3, #11
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	b25b      	sxtb	r3, r3
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	da03      	bge.n	800dc34 <f_stat+0x60>
				res = FR_INVALID_NAME;
 800dc2c:	2306      	movs	r3, #6
 800dc2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc32:	e008      	b.n	800dc46 <f_stat+0x72>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d005      	beq.n	800dc46 <f_stat+0x72>
 800dc3a:	f107 0318 	add.w	r3, r7, #24
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fbed 	bl	800c420 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800dc46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3748      	adds	r7, #72	; 0x48
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20001830 	.word	0x20001830

0800dc58 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b09e      	sub	sp, #120	; 0x78
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF;


	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
 800dc64:	f107 0114 	add.w	r1, r7, #20
 800dc68:	1d3b      	adds	r3, r7, #4
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fe ff65 	bl	800cb3c <find_volume>
 800dc72:	4603      	mov	r3, r0
 800dc74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800dc7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f040 8087 	bne.w	800dd94 <f_unlink+0x13c>
		INIT_NAMBUF(dj);
 800dc86:	f107 0308 	add.w	r3, r7, #8
 800dc8a:	667b      	str	r3, [r7, #100]	; 0x64
 800dc8c:	4b44      	ldr	r3, [pc, #272]	; (800dda0 <f_unlink+0x148>)
 800dc8e:	66fb      	str	r3, [r7, #108]	; 0x6c
		res = follow_path(&dj, path);		/* Follow the file path */
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dc96:	4611      	mov	r1, r2
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fe fe55 	bl	800c948 <follow_path>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800dca4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d173      	bne.n	800dd94 <f_unlink+0x13c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800dcac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcae:	330b      	adds	r3, #11
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	b25b      	sxtb	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	da03      	bge.n	800dcc0 <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800dcb8:	2306      	movs	r3, #6
 800dcba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dcbe:	e008      	b.n	800dcd2 <f_unlink+0x7a>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800dcc0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d002      	beq.n	800dcd2 <f_unlink+0x7a>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800dccc:	2307      	movs	r3, #7
 800dcce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800dcd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d134      	bne.n	800dd44 <f_unlink+0xec>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcde:	4611      	mov	r1, r2
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fd fec6 	bl	800ba72 <ld_clust>
 800dce6:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 800dce8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800dcec:	f003 0310 	and.w	r3, r3, #16
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d027      	beq.n	800dd44 <f_unlink+0xec>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	61bb      	str	r3, [r7, #24]
						sdj.obj.sclust = dclst;
 800dcf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcfa:	623b      	str	r3, [r7, #32]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800dcfc:	f107 0318 	add.w	r3, r7, #24
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fd fd2f 	bl	800b766 <dir_sdi>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800dd0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d116      	bne.n	800dd44 <f_unlink+0xec>
							res = dir_read(&sdj, 0);			/* Read an item */
 800dd16:	f107 0318 	add.w	r3, r7, #24
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe f8d2 	bl	800bec6 <dir_read>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dd28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <f_unlink+0xde>
 800dd30:	2307      	movs	r3, #7
 800dd32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800dd36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd3a:	2b04      	cmp	r3, #4
 800dd3c:	d102      	bne.n	800dd44 <f_unlink+0xec>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800dd44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d123      	bne.n	800dd94 <f_unlink+0x13c>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800dd4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fe fb1b 	bl	800c38c <dir_remove>
 800dd56:	4603      	mov	r3, r0
 800dd58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800dd5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10c      	bne.n	800dd7e <f_unlink+0x126>
 800dd64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d009      	beq.n	800dd7e <f_unlink+0x126>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800dd6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd6e:	2200      	movs	r2, #0
 800dd70:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fd fbfc 	bl	800b570 <remove_chain>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800dd7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d106      	bne.n	800dd94 <f_unlink+0x13c>
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fd f9d9 	bl	800b140 <sync_fs>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800dd94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3778      	adds	r7, #120	; 0x78
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	20001830 	.word	0x20001830

0800dda4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b088      	sub	sp, #32
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ddb8:	e01b      	b.n	800ddf2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ddba:	f107 0310 	add.w	r3, r7, #16
 800ddbe:	f107 0114 	add.w	r1, r7, #20
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7ff fa9d 	bl	800d304 <f_read>
		if (rc != 1) break;
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d116      	bne.n	800ddfe <f_gets+0x5a>
		c = s[0];
 800ddd0:	7d3b      	ldrb	r3, [r7, #20]
 800ddd2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	2b0d      	cmp	r3, #13
 800ddd8:	d100      	bne.n	800dddc <f_gets+0x38>
 800ddda:	e00a      	b.n	800ddf2 <f_gets+0x4e>
		*p++ = c;
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	61ba      	str	r2, [r7, #24]
 800dde2:	7dfa      	ldrb	r2, [r7, #23]
 800dde4:	701a      	strb	r2, [r3, #0]
		n++;
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	3301      	adds	r3, #1
 800ddea:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	2b0a      	cmp	r3, #10
 800ddf0:	d007      	beq.n	800de02 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	69fa      	ldr	r2, [r7, #28]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	dbde      	blt.n	800ddba <f_gets+0x16>
 800ddfc:	e002      	b.n	800de04 <f_gets+0x60>
		if (rc != 1) break;
 800ddfe:	bf00      	nop
 800de00:	e000      	b.n	800de04 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800de02:	bf00      	nop
	}
	*p = 0;
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	2200      	movs	r2, #0
 800de08:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <f_gets+0x70>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	e000      	b.n	800de16 <f_gets+0x72>
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3720      	adds	r7, #32
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b084      	sub	sp, #16
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	460b      	mov	r3, r1
 800de28:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800de2a:	78fb      	ldrb	r3, [r7, #3]
 800de2c:	2b0a      	cmp	r3, #10
 800de2e:	d103      	bne.n	800de38 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800de30:	210d      	movs	r1, #13
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7ff fff3 	bl	800de1e <putc_bfd>
	}

	i = pb->idx;	/* Buffer write index (-1:error) */
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2b00      	cmp	r3, #0
 800de42:	db25      	blt.n	800de90 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	1c5a      	adds	r2, r3, #1
 800de48:	60fa      	str	r2, [r7, #12]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	4413      	add	r3, r2
 800de4e:	78fa      	ldrb	r2, [r7, #3]
 800de50:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2b3c      	cmp	r3, #60	; 0x3c
 800de56:	dd12      	ble.n	800de7e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f103 010c 	add.w	r1, r3, #12
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	f107 0308 	add.w	r3, r7, #8
 800de68:	f7ff fb7f 	bl	800d56a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	429a      	cmp	r2, r3
 800de72:	d101      	bne.n	800de78 <putc_bfd+0x5a>
 800de74:	2300      	movs	r3, #0
 800de76:	e001      	b.n	800de7c <putc_bfd+0x5e>
 800de78:	f04f 33ff 	mov.w	r3, #4294967295
 800de7c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	1c5a      	adds	r2, r3, #1
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	609a      	str	r2, [r3, #8]
 800de8e:	e000      	b.n	800de92 <putc_bfd+0x74>
	if (i < 0) return;
 800de90:	bf00      	nop
}
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800de98:	b590      	push	{r4, r7, lr}
 800de9a:	b097      	sub	sp, #92	; 0x5c
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	613b      	str	r3, [r7, #16]
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800deae:	e009      	b.n	800dec4 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	607a      	str	r2, [r7, #4]
 800deb6:	781a      	ldrb	r2, [r3, #0]
 800deb8:	f107 030c 	add.w	r3, r7, #12
 800debc:	4611      	mov	r1, r2
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff ffad 	bl	800de1e <putc_bfd>
	while (*str)			/* Put the string */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f1      	bne.n	800deb0 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	db15      	blt.n	800defe <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	461c      	mov	r4, r3
 800ded8:	f107 0208 	add.w	r2, r7, #8
 800dedc:	f107 030c 	add.w	r3, r7, #12
 800dee0:	f103 010c 	add.w	r1, r3, #12
 800dee4:	4613      	mov	r3, r2
 800dee6:	4622      	mov	r2, r4
 800dee8:	f7ff fb3f 	bl	800d56a <f_write>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d105      	bne.n	800defe <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	4293      	cmp	r3, r2
 800def8:	d101      	bne.n	800defe <f_puts+0x66>
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	e001      	b.n	800df02 <f_puts+0x6a>
	return EOF;
 800defe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df02:	4618      	mov	r0, r3
 800df04:	375c      	adds	r7, #92	; 0x5c
 800df06:	46bd      	mov	sp, r7
 800df08:	bd90      	pop	{r4, r7, pc}
	...

0800df0c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	6039      	str	r1, [r7, #0]
 800df16:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800df18:	88fb      	ldrh	r3, [r7, #6]
 800df1a:	2b7f      	cmp	r3, #127	; 0x7f
 800df1c:	d802      	bhi.n	800df24 <ff_convert+0x18>
		c = chr;
 800df1e:	88fb      	ldrh	r3, [r7, #6]
 800df20:	81fb      	strh	r3, [r7, #14]
 800df22:	e025      	b.n	800df70 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00b      	beq.n	800df42 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800df2a:	88fb      	ldrh	r3, [r7, #6]
 800df2c:	2bff      	cmp	r3, #255	; 0xff
 800df2e:	d805      	bhi.n	800df3c <ff_convert+0x30>
 800df30:	88fb      	ldrh	r3, [r7, #6]
 800df32:	3b80      	subs	r3, #128	; 0x80
 800df34:	4a12      	ldr	r2, [pc, #72]	; (800df80 <ff_convert+0x74>)
 800df36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df3a:	e000      	b.n	800df3e <ff_convert+0x32>
 800df3c:	2300      	movs	r3, #0
 800df3e:	81fb      	strh	r3, [r7, #14]
 800df40:	e016      	b.n	800df70 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800df42:	2300      	movs	r3, #0
 800df44:	81fb      	strh	r3, [r7, #14]
 800df46:	e009      	b.n	800df5c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800df48:	89fb      	ldrh	r3, [r7, #14]
 800df4a:	4a0d      	ldr	r2, [pc, #52]	; (800df80 <ff_convert+0x74>)
 800df4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df50:	88fa      	ldrh	r2, [r7, #6]
 800df52:	429a      	cmp	r2, r3
 800df54:	d006      	beq.n	800df64 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800df56:	89fb      	ldrh	r3, [r7, #14]
 800df58:	3301      	adds	r3, #1
 800df5a:	81fb      	strh	r3, [r7, #14]
 800df5c:	89fb      	ldrh	r3, [r7, #14]
 800df5e:	2b7f      	cmp	r3, #127	; 0x7f
 800df60:	d9f2      	bls.n	800df48 <ff_convert+0x3c>
 800df62:	e000      	b.n	800df66 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800df64:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800df66:	89fb      	ldrh	r3, [r7, #14]
 800df68:	3380      	adds	r3, #128	; 0x80
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800df70:	89fb      	ldrh	r3, [r7, #14]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	0800f258 	.word	0x0800f258

0800df84 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800df84:	b480      	push	{r7}
 800df86:	b087      	sub	sp, #28
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800df8e:	88fb      	ldrh	r3, [r7, #6]
 800df90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df94:	d201      	bcs.n	800df9a <ff_wtoupper+0x16>
 800df96:	4b3e      	ldr	r3, [pc, #248]	; (800e090 <ff_wtoupper+0x10c>)
 800df98:	e000      	b.n	800df9c <ff_wtoupper+0x18>
 800df9a:	4b3e      	ldr	r3, [pc, #248]	; (800e094 <ff_wtoupper+0x110>)
 800df9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	1c9a      	adds	r2, r3, #2
 800dfa2:	617a      	str	r2, [r7, #20]
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800dfa8:	8a7b      	ldrh	r3, [r7, #18]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d068      	beq.n	800e080 <ff_wtoupper+0xfc>
 800dfae:	88fa      	ldrh	r2, [r7, #6]
 800dfb0:	8a7b      	ldrh	r3, [r7, #18]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d364      	bcc.n	800e080 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	1c9a      	adds	r2, r3, #2
 800dfba:	617a      	str	r2, [r7, #20]
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	823b      	strh	r3, [r7, #16]
 800dfc0:	8a3b      	ldrh	r3, [r7, #16]
 800dfc2:	0a1b      	lsrs	r3, r3, #8
 800dfc4:	81fb      	strh	r3, [r7, #14]
 800dfc6:	8a3b      	ldrh	r3, [r7, #16]
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dfcc:	88fa      	ldrh	r2, [r7, #6]
 800dfce:	8a79      	ldrh	r1, [r7, #18]
 800dfd0:	8a3b      	ldrh	r3, [r7, #16]
 800dfd2:	440b      	add	r3, r1
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	da49      	bge.n	800e06c <ff_wtoupper+0xe8>
			switch (cmd) {
 800dfd8:	89fb      	ldrh	r3, [r7, #14]
 800dfda:	2b08      	cmp	r3, #8
 800dfdc:	d84f      	bhi.n	800e07e <ff_wtoupper+0xfa>
 800dfde:	a201      	add	r2, pc, #4	; (adr r2, 800dfe4 <ff_wtoupper+0x60>)
 800dfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe4:	0800e009 	.word	0x0800e009
 800dfe8:	0800e01b 	.word	0x0800e01b
 800dfec:	0800e031 	.word	0x0800e031
 800dff0:	0800e039 	.word	0x0800e039
 800dff4:	0800e041 	.word	0x0800e041
 800dff8:	0800e049 	.word	0x0800e049
 800dffc:	0800e051 	.word	0x0800e051
 800e000:	0800e059 	.word	0x0800e059
 800e004:	0800e061 	.word	0x0800e061
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e008:	88fa      	ldrh	r2, [r7, #6]
 800e00a:	8a7b      	ldrh	r3, [r7, #18]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	4413      	add	r3, r2
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	80fb      	strh	r3, [r7, #6]
 800e018:	e027      	b.n	800e06a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e01a:	88fa      	ldrh	r2, [r7, #6]
 800e01c:	8a7b      	ldrh	r3, [r7, #18]
 800e01e:	1ad3      	subs	r3, r2, r3
 800e020:	b29b      	uxth	r3, r3
 800e022:	f003 0301 	and.w	r3, r3, #1
 800e026:	b29b      	uxth	r3, r3
 800e028:	88fa      	ldrh	r2, [r7, #6]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	80fb      	strh	r3, [r7, #6]
 800e02e:	e01c      	b.n	800e06a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e030:	88fb      	ldrh	r3, [r7, #6]
 800e032:	3b10      	subs	r3, #16
 800e034:	80fb      	strh	r3, [r7, #6]
 800e036:	e018      	b.n	800e06a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e038:	88fb      	ldrh	r3, [r7, #6]
 800e03a:	3b20      	subs	r3, #32
 800e03c:	80fb      	strh	r3, [r7, #6]
 800e03e:	e014      	b.n	800e06a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e040:	88fb      	ldrh	r3, [r7, #6]
 800e042:	3b30      	subs	r3, #48	; 0x30
 800e044:	80fb      	strh	r3, [r7, #6]
 800e046:	e010      	b.n	800e06a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e048:	88fb      	ldrh	r3, [r7, #6]
 800e04a:	3b1a      	subs	r3, #26
 800e04c:	80fb      	strh	r3, [r7, #6]
 800e04e:	e00c      	b.n	800e06a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	3308      	adds	r3, #8
 800e054:	80fb      	strh	r3, [r7, #6]
 800e056:	e008      	b.n	800e06a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e058:	88fb      	ldrh	r3, [r7, #6]
 800e05a:	3b50      	subs	r3, #80	; 0x50
 800e05c:	80fb      	strh	r3, [r7, #6]
 800e05e:	e004      	b.n	800e06a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e060:	88fb      	ldrh	r3, [r7, #6]
 800e062:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e066:	80fb      	strh	r3, [r7, #6]
 800e068:	bf00      	nop
			}
			break;
 800e06a:	e008      	b.n	800e07e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e06c:	89fb      	ldrh	r3, [r7, #14]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d195      	bne.n	800df9e <ff_wtoupper+0x1a>
 800e072:	8a3b      	ldrh	r3, [r7, #16]
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	4413      	add	r3, r2
 800e07a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e07c:	e78f      	b.n	800df9e <ff_wtoupper+0x1a>
			break;
 800e07e:	bf00      	nop
	}

	return chr;
 800e080:	88fb      	ldrh	r3, [r7, #6]
}
 800e082:	4618      	mov	r0, r3
 800e084:	371c      	adds	r7, #28
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	0800f358 	.word	0x0800f358
 800e094:	0800f54c 	.word	0x0800f54c

0800e098 <USBD_Bulk_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Bulk_Init (USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 800e0a8:	2340      	movs	r3, #64	; 0x40
 800e0aa:	2202      	movs	r2, #2
 800e0ac:	2181      	movs	r1, #129	; 0x81
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fbf0 	bl	800e894 <USBD_LL_OpenEP>
                 BULK_IN_EP,
                 USBD_EP_TYPE_BULK,
                 BULK_DATA_FS_IN_PACKET_SIZE);

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 800e0b4:	2340      	movs	r3, #64	; 0x40
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fbea 	bl	800e894 <USBD_LL_OpenEP>
                 BULK_OUT_EP,
                 USBD_EP_TYPE_BULK,
                 BULK_DATA_FS_OUT_PACKET_SIZE);

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
 800e0c0:	2340      	movs	r3, #64	; 0x40
 800e0c2:	4a05      	ldr	r2, [pc, #20]	; (800e0d8 <USBD_Bulk_Init+0x40>)
 800e0c4:	2101      	movs	r1, #1
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fd5e 	bl	800eb88 <USBD_LL_PrepareReceive>
                         BULK_OUT_EP,
                         &USB_Rx_Buffer[0],
                         BULK_DATA_FS_OUT_PACKET_SIZE);
  
  return ret;
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20001a34 	.word	0x20001a34

0800e0dc <USBD_Bulk_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Bulk_DeInit (USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	73fb      	strb	r3, [r7, #15]
  
  /* Close EP IN */
  USBD_LL_CloseEP(pdev, BULK_IN_EP);
 800e0ec:	2181      	movs	r1, #129	; 0x81
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fc0e 	bl	800e910 <USBD_LL_CloseEP>
  
  /* lose EP OUT */
  USBD_LL_CloseEP(pdev, BULK_OUT_EP);
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fc0a 	bl	800e910 <USBD_LL_CloseEP>
  
  return ret;
 800e0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <USBD_Bulk_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Bulk_Setup (USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_BULK_DESC_SIZ;
 800e112:	2317      	movs	r3, #23
 800e114:	81fb      	strh	r3, [r7, #14]
  uint8_t  *pbuf=USBD_Bulk_CfgFSDesc + 9;
 800e116:	4b2e      	ldr	r3, [pc, #184]	; (800e1d0 <USBD_Bulk_Setup+0xc8>)
 800e118:	60bb      	str	r3, [r7, #8]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e122:	2b00      	cmp	r3, #0
 800e124:	d016      	beq.n	800e154 <USBD_Bulk_Setup+0x4c>
 800e126:	2b40      	cmp	r3, #64	; 0x40
 800e128:	d14b      	bne.n	800e1c2 <USBD_Bulk_Setup+0xba>
  {
#if (USBD_WINUSB_ENABLED == 1)
  case USB_REQ_TYPE_VENDOR:
    switch (req->bRequest)
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	785b      	ldrb	r3, [r3, #1]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d10e      	bne.n	800e150 <USBD_Bulk_Setup+0x48>
    {
    case USB_BULK_MS_VENDORCODE: /* bMS_VendorCode */
      if (req->wIndex == 7) /*This is defined by the MS spec (Table 6)*/
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	889b      	ldrh	r3, [r3, #4]
 800e136:	2b07      	cmp	r3, #7
 800e138:	d10a      	bne.n	800e150 <USBD_Bulk_Setup+0x48>
      {
        pbuf = USBD_Bulk_MSOS20Desc;
 800e13a:	4b26      	ldr	r3, [pc, #152]	; (800e1d4 <USBD_Bulk_Setup+0xcc>)
 800e13c:	60bb      	str	r3, [r7, #8]
        len = USB_LEN_MSOS20_DESC;
 800e13e:	239e      	movs	r3, #158	; 0x9e
 800e140:	81fb      	strh	r3, [r7, #14]
        USBD_CtlSendData(pdev, pbuf, len);
 800e142:	89fb      	ldrh	r3, [r7, #14]
 800e144:	461a      	mov	r2, r3
 800e146:	68b9      	ldr	r1, [r7, #8]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7fa f889 	bl	8008260 <USBD_CtlSendData>
        break;
 800e14e:	e000      	b.n	800e152 <USBD_Bulk_Setup+0x4a>
      }

    default:
      break;
 800e150:	bf00      	nop
    }
    break;
 800e152:	e037      	b.n	800e1c4 <USBD_Bulk_Setup+0xbc>
#endif /* (USBD_WINUSB_ENABLED == 1) */

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	785b      	ldrb	r3, [r3, #1]
 800e158:	2b0b      	cmp	r3, #11
 800e15a:	d021      	beq.n	800e1a0 <USBD_Bulk_Setup+0x98>
 800e15c:	2b0b      	cmp	r3, #11
 800e15e:	dc30      	bgt.n	800e1c2 <USBD_Bulk_Setup+0xba>
 800e160:	2b06      	cmp	r3, #6
 800e162:	d002      	beq.n	800e16a <USBD_Bulk_Setup+0x62>
 800e164:	2b0a      	cmp	r3, #10
 800e166:	d015      	beq.n	800e194 <USBD_Bulk_Setup+0x8c>
      }
      break;
    }
 
  default: 
    break;
 800e168:	e02b      	b.n	800e1c2 <USBD_Bulk_Setup+0xba>
      if ( (req->wValue >> 8) == BULK_DESCRIPTOR_TYPE)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	885b      	ldrh	r3, [r3, #2]
 800e16e:	0a1b      	lsrs	r3, r3, #8
 800e170:	b29b      	uxth	r3, r3
 800e172:	2b21      	cmp	r3, #33	; 0x21
 800e174:	d107      	bne.n	800e186 <USBD_Bulk_Setup+0x7e>
        pbuf = USBD_Bulk_CfgFSDesc + 9 + (9 * USBD_MAX_NUM_INTERFACES);
 800e176:	4b18      	ldr	r3, [pc, #96]	; (800e1d8 <USBD_Bulk_Setup+0xd0>)
 800e178:	60bb      	str	r3, [r7, #8]
        len = MIN(USB_BULK_DESC_SIZ , req->wLength);
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	88db      	ldrh	r3, [r3, #6]
 800e17e:	2b17      	cmp	r3, #23
 800e180:	bf28      	it	cs
 800e182:	2317      	movcs	r3, #23
 800e184:	81fb      	strh	r3, [r7, #14]
      USBD_CtlSendData (pdev, pbuf, len);
 800e186:	89fb      	ldrh	r3, [r7, #14]
 800e188:	461a      	mov	r2, r3
 800e18a:	68b9      	ldr	r1, [r7, #8]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7fa f867 	bl	8008260 <USBD_CtlSendData>
      break;
 800e192:	e016      	b.n	800e1c2 <USBD_Bulk_Setup+0xba>
      USBD_CtlSendData (pdev,
 800e194:	2201      	movs	r2, #1
 800e196:	4911      	ldr	r1, [pc, #68]	; (800e1dc <USBD_Bulk_Setup+0xd4>)
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7fa f861 	bl	8008260 <USBD_CtlSendData>
      break;
 800e19e:	e010      	b.n	800e1c2 <USBD_Bulk_Setup+0xba>
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	885b      	ldrh	r3, [r3, #2]
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d106      	bne.n	800e1b8 <USBD_Bulk_Setup+0xb0>
        usbd_bulk_AltSet = (uint8_t)(req->wValue);
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	885b      	ldrh	r3, [r3, #2]
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	4b0a      	ldr	r3, [pc, #40]	; (800e1dc <USBD_Bulk_Setup+0xd4>)
 800e1b4:	601a      	str	r2, [r3, #0]
      break;
 800e1b6:	e003      	b.n	800e1c0 <USBD_Bulk_Setup+0xb8>
        USBD_CtlError (pdev, req);
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7f9 ffdf 	bl	800817e <USBD_CtlError>
      break;
 800e1c0:	bf00      	nop
    break;
 800e1c2:	bf00      	nop
  }
  return USBD_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000059 	.word	0x20000059
 800e1d4:	20000070 	.word	0x20000070
 800e1d8:	20000062 	.word	0x20000062
 800e1dc:	20001a30 	.word	0x20001a30

0800e1e0 <USBD_Bulk_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_Bulk_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  /* endpoint finished the previous transmission so see if more data is left */
  UsbTransmitPipeBulkIN();
 800e1ec:	f7fb f904 	bl	80093f8 <UsbTransmitPipeBulkIN>
  return USBD_OK;
 800e1f0:	2300      	movs	r3, #0
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <USBD_Bulk_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_Bulk_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b082      	sub	sp, #8
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
 800e202:	460b      	mov	r3, r1
 800e204:	70fb      	strb	r3, [r7, #3]
  /* read the data from the bulk OUT pipe */
  UsbReceivePipeBulkOUT(epnum);
 800e206:	78fb      	ldrb	r3, [r7, #3]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fb f939 	bl	8009480 <UsbReceivePipeBulkOUT>
  return USBD_OK;
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <USBD_Bulk_SOF>:
  *         Start Of Frame event management
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_Bulk_SOF (USBD_HandleTypeDef *pdev)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e226:	2b03      	cmp	r3, #3
 800e228:	d101      	bne.n	800e22e <USBD_Bulk_SOF+0x16>
  {
    /* Check the data to be sent through IN pipe */
    UsbTransmitPipeBulkIN();
 800e22a:	f7fb f8e5 	bl	80093f8 <UsbTransmitPipeBulkIN>
  }
  return USBD_OK;
 800e22e:	2300      	movs	r3, #0

}
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_Bulk_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Bulk_GetFSCfgDesc (uint16_t *length)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Bulk_CfgFSDesc);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2220      	movs	r2, #32
 800e244:	801a      	strh	r2, [r3, #0]
  return USBD_Bulk_CfgFSDesc;
 800e246:	4b03      	ldr	r3, [pc, #12]	; (800e254 <USBD_Bulk_GetFSCfgDesc+0x1c>)
}
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	20000050 	.word	0x20000050

0800e258 <USBD_Bulk_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Bulk_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Bulk_DeviceQualifierDesc);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	220a      	movs	r2, #10
 800e264:	801a      	strh	r2, [r3, #0]
  return USBD_Bulk_DeviceQualifierDesc;
 800e266:	4b03      	ldr	r3, [pc, #12]	; (800e274 <USBD_Bulk_GetDeviceQualifierDescriptor+0x1c>)
}
 800e268:	4618      	mov	r0, r3
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	2000000c 	.word	0x2000000c

0800e278 <USBD_Bulk_GetRxBufferPtr>:
/**
  * @brief  USBD_Bulk_GetRxBufferPtr
  * @retval Pointer to reception buffer.
  */
uint8_t * USBD_Bulk_GetRxBufferPtr(void)
{
 800e278:	b480      	push	{r7}
 800e27a:	af00      	add	r7, sp, #0
  return &USB_Rx_Buffer[0];
 800e27c:	4b02      	ldr	r3, [pc, #8]	; (800e288 <USBD_Bulk_GetRxBufferPtr+0x10>)
}
 800e27e:	4618      	mov	r0, r3
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	20001a34 	.word	0x20001a34

0800e28c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	4603      	mov	r3, r0
 800e294:	6039      	str	r1, [r7, #0]
 800e296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	2212      	movs	r2, #18
 800e29c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e29e:	4b03      	ldr	r3, [pc, #12]	; (800e2ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	20000130 	.word	0x20000130

0800e2b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	6039      	str	r1, [r7, #0]
 800e2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2204      	movs	r2, #4
 800e2c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e2c2:	4b03      	ldr	r3, [pc, #12]	; (800e2d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr
 800e2d0:	20000168 	.word	0x20000168

0800e2d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	4603      	mov	r3, r0
 800e2dc:	6039      	str	r1, [r7, #0]
 800e2de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2e0:	79fb      	ldrb	r3, [r7, #7]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d105      	bne.n	800e2f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e2e6:	683a      	ldr	r2, [r7, #0]
 800e2e8:	4907      	ldr	r1, [pc, #28]	; (800e308 <USBD_FS_ProductStrDescriptor+0x34>)
 800e2ea:	4808      	ldr	r0, [pc, #32]	; (800e30c <USBD_FS_ProductStrDescriptor+0x38>)
 800e2ec:	f7f9 ff58 	bl	80081a0 <USBD_GetString>
 800e2f0:	e004      	b.n	800e2fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e2f2:	683a      	ldr	r2, [r7, #0]
 800e2f4:	4904      	ldr	r1, [pc, #16]	; (800e308 <USBD_FS_ProductStrDescriptor+0x34>)
 800e2f6:	4805      	ldr	r0, [pc, #20]	; (800e30c <USBD_FS_ProductStrDescriptor+0x38>)
 800e2f8:	f7f9 ff52 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2fc:	4b02      	ldr	r3, [pc, #8]	; (800e308 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	20001a74 	.word	0x20001a74
 800e30c:	0800f084 	.word	0x0800f084

0800e310 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	4603      	mov	r3, r0
 800e318:	6039      	str	r1, [r7, #0]
 800e31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	4904      	ldr	r1, [pc, #16]	; (800e330 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e320:	4804      	ldr	r0, [pc, #16]	; (800e334 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e322:	f7f9 ff3d 	bl	80081a0 <USBD_GetString>
  return USBD_StrDesc;
 800e326:	4b02      	ldr	r3, [pc, #8]	; (800e330 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20001a74 	.word	0x20001a74
 800e334:	0800f098 	.word	0x0800f098

0800e338 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	221a      	movs	r2, #26
 800e348:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e34a:	f000 f855 	bl	800e3f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e34e:	4b02      	ldr	r3, [pc, #8]	; (800e358 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e350:	4618      	mov	r0, r3
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	2000016c 	.word	0x2000016c

0800e35c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	6039      	str	r1, [r7, #0]
 800e366:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e36e:	683a      	ldr	r2, [r7, #0]
 800e370:	4907      	ldr	r1, [pc, #28]	; (800e390 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e372:	4808      	ldr	r0, [pc, #32]	; (800e394 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e374:	f7f9 ff14 	bl	80081a0 <USBD_GetString>
 800e378:	e004      	b.n	800e384 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	4904      	ldr	r1, [pc, #16]	; (800e390 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e37e:	4805      	ldr	r0, [pc, #20]	; (800e394 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e380:	f7f9 ff0e 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e384:	4b02      	ldr	r3, [pc, #8]	; (800e390 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e386:	4618      	mov	r0, r3
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	20001a74 	.word	0x20001a74
 800e394:	0800f0a8 	.word	0x0800f0a8

0800e398 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	4603      	mov	r3, r0
 800e3a0:	6039      	str	r1, [r7, #0]
 800e3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d105      	bne.n	800e3b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e3aa:	683a      	ldr	r2, [r7, #0]
 800e3ac:	4907      	ldr	r1, [pc, #28]	; (800e3cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e3ae:	4808      	ldr	r0, [pc, #32]	; (800e3d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e3b0:	f7f9 fef6 	bl	80081a0 <USBD_GetString>
 800e3b4:	e004      	b.n	800e3c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	4904      	ldr	r1, [pc, #16]	; (800e3cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e3ba:	4805      	ldr	r0, [pc, #20]	; (800e3d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e3bc:	f7f9 fef0 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3c0:	4b02      	ldr	r3, [pc, #8]	; (800e3cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	20001a74 	.word	0x20001a74
 800e3d0:	0800f0b0 	.word	0x0800f0b0

0800e3d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	6039      	str	r1, [r7, #0]
 800e3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2221      	movs	r2, #33	; 0x21
 800e3e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e3e6:	4b03      	ldr	r3, [pc, #12]	; (800e3f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	20000144 	.word	0x20000144

0800e3f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e3fe:	4b0f      	ldr	r3, [pc, #60]	; (800e43c <Get_SerialNum+0x44>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e404:	4b0e      	ldr	r3, [pc, #56]	; (800e440 <Get_SerialNum+0x48>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e40a:	4b0e      	ldr	r3, [pc, #56]	; (800e444 <Get_SerialNum+0x4c>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4413      	add	r3, r2
 800e416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d009      	beq.n	800e432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e41e:	2208      	movs	r2, #8
 800e420:	4909      	ldr	r1, [pc, #36]	; (800e448 <Get_SerialNum+0x50>)
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f000 f814 	bl	800e450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e428:	2204      	movs	r2, #4
 800e42a:	4908      	ldr	r1, [pc, #32]	; (800e44c <Get_SerialNum+0x54>)
 800e42c:	68b8      	ldr	r0, [r7, #8]
 800e42e:	f000 f80f 	bl	800e450 <IntToUnicode>
  }
}
 800e432:	bf00      	nop
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	1fff7a10 	.word	0x1fff7a10
 800e440:	1fff7a14 	.word	0x1fff7a14
 800e444:	1fff7a18 	.word	0x1fff7a18
 800e448:	2000016e 	.word	0x2000016e
 800e44c:	2000017e 	.word	0x2000017e

0800e450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e450:	b480      	push	{r7}
 800e452:	b087      	sub	sp, #28
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	4613      	mov	r3, r2
 800e45c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e462:	2300      	movs	r3, #0
 800e464:	75fb      	strb	r3, [r7, #23]
 800e466:	e027      	b.n	800e4b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	0f1b      	lsrs	r3, r3, #28
 800e46c:	2b09      	cmp	r3, #9
 800e46e:	d80b      	bhi.n	800e488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	0f1b      	lsrs	r3, r3, #28
 800e474:	b2da      	uxtb	r2, r3
 800e476:	7dfb      	ldrb	r3, [r7, #23]
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	4619      	mov	r1, r3
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	440b      	add	r3, r1
 800e480:	3230      	adds	r2, #48	; 0x30
 800e482:	b2d2      	uxtb	r2, r2
 800e484:	701a      	strb	r2, [r3, #0]
 800e486:	e00a      	b.n	800e49e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	0f1b      	lsrs	r3, r3, #28
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	005b      	lsls	r3, r3, #1
 800e492:	4619      	mov	r1, r3
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	440b      	add	r3, r1
 800e498:	3237      	adds	r2, #55	; 0x37
 800e49a:	b2d2      	uxtb	r2, r2
 800e49c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	011b      	lsls	r3, r3, #4
 800e4a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
 800e4a6:	005b      	lsls	r3, r3, #1
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e4b2:	7dfb      	ldrb	r3, [r7, #23]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	75fb      	strb	r3, [r7, #23]
 800e4b8:	7dfa      	ldrb	r2, [r7, #23]
 800e4ba:	79fb      	ldrb	r3, [r7, #7]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d3d3      	bcc.n	800e468 <IntToUnicode+0x18>
  }
}
 800e4c0:	bf00      	nop
 800e4c2:	bf00      	nop
 800e4c4:	371c      	adds	r7, #28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b082      	sub	sp, #8
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	f7f8 fe9f 	bl	8007228 <USBD_LL_SetupStage>
}
 800e4ea:	bf00      	nop
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b082      	sub	sp, #8
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e504:	78fa      	ldrb	r2, [r7, #3]
 800e506:	6879      	ldr	r1, [r7, #4]
 800e508:	4613      	mov	r3, r2
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	1a9b      	subs	r3, r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	440b      	add	r3, r1
 800e512:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	78fb      	ldrb	r3, [r7, #3]
 800e51a:	4619      	mov	r1, r3
 800e51c:	f7f8 fed9 	bl	80072d2 <USBD_LL_DataOutStage>
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e53a:	78fa      	ldrb	r2, [r7, #3]
 800e53c:	6879      	ldr	r1, [r7, #4]
 800e53e:	4613      	mov	r3, r2
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	1a9b      	subs	r3, r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	440b      	add	r3, r1
 800e548:	3348      	adds	r3, #72	; 0x48
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	78fb      	ldrb	r3, [r7, #3]
 800e54e:	4619      	mov	r1, r3
 800e550:	f7f8 ff22 	bl	8007398 <USBD_LL_DataInStage>
}
 800e554:	bf00      	nop
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7f9 f826 	bl	80075bc <USBD_LL_SOF>
}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e580:	2301      	movs	r3, #1
 800e582:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <HAL_PCD_ResetCallback+0x1a>
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d003      	beq.n	800e598 <HAL_PCD_ResetCallback+0x20>
 800e590:	e005      	b.n	800e59e <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800e592:	2300      	movs	r3, #0
 800e594:	73fb      	strb	r3, [r7, #15]
    break;
 800e596:	e005      	b.n	800e5a4 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800e598:	2301      	movs	r3, #1
 800e59a:	73fb      	strb	r3, [r7, #15]
    break;
 800e59c:	e002      	b.n	800e5a4 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	73fb      	strb	r3, [r7, #15]
    break;    
 800e5a2:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5aa:	7bfa      	ldrb	r2, [r7, #15]
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7f8 ffc9 	bl	8007546 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7f8 ff82 	bl	80074c4 <USBD_LL_Reset>
}
 800e5c0:	bf00      	nop
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7f8 ffc5 	bl	8007566 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	6812      	ldr	r2, [r2, #0]
 800e5ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e5ee:	f043 0301 	orr.w	r3, r3, #1
 800e5f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6a1b      	ldr	r3, [r3, #32]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d005      	beq.n	800e608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5fc:	4b05      	ldr	r3, [pc, #20]	; (800e614 <HAL_PCD_SuspendCallback+0x4c>)
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	4a04      	ldr	r2, [pc, #16]	; (800e614 <HAL_PCD_SuspendCallback+0x4c>)
 800e602:	f043 0306 	orr.w	r3, r3, #6
 800e606:	6113      	str	r3, [r2, #16]
  }
  /* Inform application that the USB entered low power mode. */
  UsbEnterLowPowerModeHook();
 800e608:	f7f2 f83e 	bl	8000688 <UsbEnterLowPowerModeHook>
  /* USER CODE END 2 */
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	e000ed00 	.word	0xe000ed00

0800e618 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* Inform application that the USB left low power mode. */
  UsbLeaveLowPowerModeHook();
 800e620:	f7f2 f839 	bl	8000696 <UsbLeaveLowPowerModeHook>
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7f8 ffb0 	bl	8007590 <USBD_LL_Resume>
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	460b      	mov	r3, r1
 800e642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e64a:	78fa      	ldrb	r2, [r7, #3]
 800e64c:	4611      	mov	r1, r2
 800e64e:	4618      	mov	r0, r3
 800e650:	f7f8 ffdb 	bl	800760a <USBD_LL_IsoOUTIncomplete>
}
 800e654:	bf00      	nop
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e66e:	78fa      	ldrb	r2, [r7, #3]
 800e670:	4611      	mov	r1, r2
 800e672:	4618      	mov	r0, r3
 800e674:	f7f8 ffbc 	bl	80075f0 <USBD_LL_IsoINIncomplete>
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  /* Configure Low connection state. */
  UsbConnectHook(BLT_TRUE);
 800e688:	2001      	movs	r0, #1
 800e68a:	f7f1 ffc7 	bl	800061c <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e694:	4618      	mov	r0, r3
 800e696:	f7f8 ffc5 	bl	8007624 <USBD_LL_DevConnected>
}
 800e69a:	bf00      	nop
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  /* Configure High connection state. */
  UsbConnectHook(BLT_FALSE);
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	f7f1 ffb6 	bl	800061c <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f8 ffbf 	bl	800763a <USBD_LL_DevDisconnected>
}
 800e6bc:	bf00      	nop
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d13f      	bne.n	800e754 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6d4:	4a22      	ldr	r2, [pc, #136]	; (800e760 <USBD_LL_Init+0x9c>)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a20      	ldr	r2, [pc, #128]	; (800e760 <USBD_LL_Init+0x9c>)
 800e6e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6e4:	4b1e      	ldr	r3, [pc, #120]	; (800e760 <USBD_LL_Init+0x9c>)
 800e6e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e6ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e6ec:	4b1c      	ldr	r3, [pc, #112]	; (800e760 <USBD_LL_Init+0x9c>)
 800e6ee:	2204      	movs	r2, #4
 800e6f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6f2:	4b1b      	ldr	r3, [pc, #108]	; (800e760 <USBD_LL_Init+0x9c>)
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6f8:	4b19      	ldr	r3, [pc, #100]	; (800e760 <USBD_LL_Init+0x9c>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6fe:	4b18      	ldr	r3, [pc, #96]	; (800e760 <USBD_LL_Init+0x9c>)
 800e700:	2202      	movs	r2, #2
 800e702:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e704:	4b16      	ldr	r3, [pc, #88]	; (800e760 <USBD_LL_Init+0x9c>)
 800e706:	2201      	movs	r2, #1
 800e708:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e70a:	4b15      	ldr	r3, [pc, #84]	; (800e760 <USBD_LL_Init+0x9c>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e710:	4b13      	ldr	r3, [pc, #76]	; (800e760 <USBD_LL_Init+0x9c>)
 800e712:	2200      	movs	r2, #0
 800e714:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e716:	4b12      	ldr	r3, [pc, #72]	; (800e760 <USBD_LL_Init+0x9c>)
 800e718:	2200      	movs	r2, #0
 800e71a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e71c:	4b10      	ldr	r3, [pc, #64]	; (800e760 <USBD_LL_Init+0x9c>)
 800e71e:	2200      	movs	r2, #0
 800e720:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e722:	480f      	ldr	r0, [pc, #60]	; (800e760 <USBD_LL_Init+0x9c>)
 800e724:	f7f4 f8b0 	bl	8002888 <HAL_PCD_Init>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d004      	beq.n	800e738 <USBD_LL_Init+0x74>
  {
    ASSERT_RT(BLT_FALSE);
 800e72e:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800e732:	480c      	ldr	r0, [pc, #48]	; (800e764 <USBD_LL_Init+0xa0>)
 800e734:	f7fb f868 	bl	8009808 <AssertFailure>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e738:	2180      	movs	r1, #128	; 0x80
 800e73a:	4809      	ldr	r0, [pc, #36]	; (800e760 <USBD_LL_Init+0x9c>)
 800e73c:	f7f5 fac3 	bl	8003cc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e740:	2240      	movs	r2, #64	; 0x40
 800e742:	2100      	movs	r1, #0
 800e744:	4806      	ldr	r0, [pc, #24]	; (800e760 <USBD_LL_Init+0x9c>)
 800e746:	f7f5 fa77 	bl	8003c38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e74a:	2280      	movs	r2, #128	; 0x80
 800e74c:	2101      	movs	r1, #1
 800e74e:	4804      	ldr	r0, [pc, #16]	; (800e760 <USBD_LL_Init+0x9c>)
 800e750:	f7f5 fa72 	bl	8003c38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	200003dc 	.word	0x200003dc
 800e764:	0800f0c8 	.word	0x0800f0c8

0800e768 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f4 f99f 	bl	8002ac2 <HAL_PCD_DeInit>
 800e784:	4603      	mov	r3, r0
 800e786:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e788:	7bbb      	ldrb	r3, [r7, #14]
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d816      	bhi.n	800e7bc <USBD_LL_DeInit+0x54>
 800e78e:	a201      	add	r2, pc, #4	; (adr r2, 800e794 <USBD_LL_DeInit+0x2c>)
 800e790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e794:	0800e7a5 	.word	0x0800e7a5
 800e798:	0800e7ab 	.word	0x0800e7ab
 800e79c:	0800e7b1 	.word	0x0800e7b1
 800e7a0:	0800e7b7 	.word	0x0800e7b7
    case HAL_OK :
      usb_status = USBD_OK;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7a8:	e00b      	b.n	800e7c2 <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e7aa:	2303      	movs	r3, #3
 800e7ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ae:	e008      	b.n	800e7c2 <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e7b4:	e005      	b.n	800e7c2 <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ba:	e002      	b.n	800e7c2 <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e7bc:	2303      	movs	r3, #3
 800e7be:	73fb      	strb	r3, [r7, #15]
    break;
 800e7c0:	bf00      	nop
  }
  return usb_status; 
 800e7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7f4 f990 	bl	8002b08 <HAL_PCD_Start>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d816      	bhi.n	800e820 <USBD_LL_Start+0x54>
 800e7f2:	a201      	add	r2, pc, #4	; (adr r2, 800e7f8 <USBD_LL_Start+0x2c>)
 800e7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f8:	0800e809 	.word	0x0800e809
 800e7fc:	0800e80f 	.word	0x0800e80f
 800e800:	0800e815 	.word	0x0800e815
 800e804:	0800e81b 	.word	0x0800e81b
    case HAL_OK :
      usb_status = USBD_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	73fb      	strb	r3, [r7, #15]
    break;
 800e80c:	e00b      	b.n	800e826 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e80e:	2303      	movs	r3, #3
 800e810:	73fb      	strb	r3, [r7, #15]
    break;
 800e812:	e008      	b.n	800e826 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e814:	2301      	movs	r3, #1
 800e816:	73fb      	strb	r3, [r7, #15]
    break;
 800e818:	e005      	b.n	800e826 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e81a:	2303      	movs	r3, #3
 800e81c:	73fb      	strb	r3, [r7, #15]
    break;
 800e81e:	e002      	b.n	800e826 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e820:	2303      	movs	r3, #3
 800e822:	73fb      	strb	r3, [r7, #15]
    break;
 800e824:	bf00      	nop
  }
  return usb_status;
 800e826:	7bfb      	ldrb	r3, [r7, #15]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e838:	2300      	movs	r3, #0
 800e83a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e846:	4618      	mov	r0, r3
 800e848:	f7f4 f991 	bl	8002b6e <HAL_PCD_Stop>
 800e84c:	4603      	mov	r3, r0
 800e84e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e850:	7bbb      	ldrb	r3, [r7, #14]
 800e852:	2b03      	cmp	r3, #3
 800e854:	d816      	bhi.n	800e884 <USBD_LL_Stop+0x54>
 800e856:	a201      	add	r2, pc, #4	; (adr r2, 800e85c <USBD_LL_Stop+0x2c>)
 800e858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e85c:	0800e86d 	.word	0x0800e86d
 800e860:	0800e873 	.word	0x0800e873
 800e864:	0800e879 	.word	0x0800e879
 800e868:	0800e87f 	.word	0x0800e87f
    case HAL_OK :
      usb_status = USBD_OK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	73fb      	strb	r3, [r7, #15]
    break;
 800e870:	e00b      	b.n	800e88a <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e872:	2303      	movs	r3, #3
 800e874:	73fb      	strb	r3, [r7, #15]
    break;
 800e876:	e008      	b.n	800e88a <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e878:	2301      	movs	r3, #1
 800e87a:	73fb      	strb	r3, [r7, #15]
    break;
 800e87c:	e005      	b.n	800e88a <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e87e:	2303      	movs	r3, #3
 800e880:	73fb      	strb	r3, [r7, #15]
    break;
 800e882:	e002      	b.n	800e88a <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e884:	2303      	movs	r3, #3
 800e886:	73fb      	strb	r3, [r7, #15]
    break;
 800e888:	bf00      	nop
  }
  return usb_status;
 800e88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	4608      	mov	r0, r1
 800e89e:	4611      	mov	r1, r2
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	70fb      	strb	r3, [r7, #3]
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	70bb      	strb	r3, [r7, #2]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8bc:	78bb      	ldrb	r3, [r7, #2]
 800e8be:	883a      	ldrh	r2, [r7, #0]
 800e8c0:	78f9      	ldrb	r1, [r7, #3]
 800e8c2:	f7f4 fdc0 	bl	8003446 <HAL_PCD_EP_Open>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e8ca:	7bbb      	ldrb	r3, [r7, #14]
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d817      	bhi.n	800e900 <USBD_LL_OpenEP+0x6c>
 800e8d0:	a201      	add	r2, pc, #4	; (adr r2, 800e8d8 <USBD_LL_OpenEP+0x44>)
 800e8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d6:	bf00      	nop
 800e8d8:	0800e8e9 	.word	0x0800e8e9
 800e8dc:	0800e8ef 	.word	0x0800e8ef
 800e8e0:	0800e8f5 	.word	0x0800e8f5
 800e8e4:	0800e8fb 	.word	0x0800e8fb
    case HAL_OK :
      usb_status = USBD_OK;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ec:	e00b      	b.n	800e906 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8f2:	e008      	b.n	800e906 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8f8:	e005      	b.n	800e906 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8fa:	2303      	movs	r3, #3
 800e8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e8fe:	e002      	b.n	800e906 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e900:	2303      	movs	r3, #3
 800e902:	73fb      	strb	r3, [r7, #15]
    break;
 800e904:	bf00      	nop
  }
  return usb_status;
 800e906:	7bfb      	ldrb	r3, [r7, #15]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e920:	2300      	movs	r3, #0
 800e922:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e92a:	78fa      	ldrb	r2, [r7, #3]
 800e92c:	4611      	mov	r1, r2
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f4 fdf1 	bl	8003516 <HAL_PCD_EP_Close>
 800e934:	4603      	mov	r3, r0
 800e936:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800e938:	7bbb      	ldrb	r3, [r7, #14]
 800e93a:	2b03      	cmp	r3, #3
 800e93c:	d816      	bhi.n	800e96c <USBD_LL_CloseEP+0x5c>
 800e93e:	a201      	add	r2, pc, #4	; (adr r2, 800e944 <USBD_LL_CloseEP+0x34>)
 800e940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e944:	0800e955 	.word	0x0800e955
 800e948:	0800e95b 	.word	0x0800e95b
 800e94c:	0800e961 	.word	0x0800e961
 800e950:	0800e967 	.word	0x0800e967
    case HAL_OK :
      usb_status = USBD_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]
    break;
 800e958:	e00b      	b.n	800e972 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e95a:	2303      	movs	r3, #3
 800e95c:	73fb      	strb	r3, [r7, #15]
    break;
 800e95e:	e008      	b.n	800e972 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e960:	2301      	movs	r3, #1
 800e962:	73fb      	strb	r3, [r7, #15]
    break;
 800e964:	e005      	b.n	800e972 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e966:	2303      	movs	r3, #3
 800e968:	73fb      	strb	r3, [r7, #15]
    break;
 800e96a:	e002      	b.n	800e972 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e96c:	2303      	movs	r3, #3
 800e96e:	73fb      	strb	r3, [r7, #15]
    break;
 800e970:	bf00      	nop
  }
  return usb_status;  
 800e972:	7bfb      	ldrb	r3, [r7, #15]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e988:	2300      	movs	r3, #0
 800e98a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e98c:	2300      	movs	r3, #0
 800e98e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e996:	78fa      	ldrb	r2, [r7, #3]
 800e998:	4611      	mov	r1, r2
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7f4 feb2 	bl	8003704 <HAL_PCD_EP_SetStall>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e9a4:	7bbb      	ldrb	r3, [r7, #14]
 800e9a6:	2b03      	cmp	r3, #3
 800e9a8:	d816      	bhi.n	800e9d8 <USBD_LL_StallEP+0x5c>
 800e9aa:	a201      	add	r2, pc, #4	; (adr r2, 800e9b0 <USBD_LL_StallEP+0x34>)
 800e9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b0:	0800e9c1 	.word	0x0800e9c1
 800e9b4:	0800e9c7 	.word	0x0800e9c7
 800e9b8:	0800e9cd 	.word	0x0800e9cd
 800e9bc:	0800e9d3 	.word	0x0800e9d3
    case HAL_OK :
      usb_status = USBD_OK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9c4:	e00b      	b.n	800e9de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e9c6:	2303      	movs	r3, #3
 800e9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ca:	e008      	b.n	800e9de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e9d0:	e005      	b.n	800e9de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e9d2:	2303      	movs	r3, #3
 800e9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e9d6:	e002      	b.n	800e9de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	73fb      	strb	r3, [r7, #15]
    break;
 800e9dc:	bf00      	nop
  }
  return usb_status;  
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea02:	78fa      	ldrb	r2, [r7, #3]
 800ea04:	4611      	mov	r1, r2
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7f4 fee0 	bl	80037cc <HAL_PCD_EP_ClrStall>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ea10:	7bbb      	ldrb	r3, [r7, #14]
 800ea12:	2b03      	cmp	r3, #3
 800ea14:	d816      	bhi.n	800ea44 <USBD_LL_ClearStallEP+0x5c>
 800ea16:	a201      	add	r2, pc, #4	; (adr r2, 800ea1c <USBD_LL_ClearStallEP+0x34>)
 800ea18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea1c:	0800ea2d 	.word	0x0800ea2d
 800ea20:	0800ea33 	.word	0x0800ea33
 800ea24:	0800ea39 	.word	0x0800ea39
 800ea28:	0800ea3f 	.word	0x0800ea3f
    case HAL_OK :
      usb_status = USBD_OK;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea30:	e00b      	b.n	800ea4a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea32:	2303      	movs	r3, #3
 800ea34:	73fb      	strb	r3, [r7, #15]
    break;
 800ea36:	e008      	b.n	800ea4a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea3c:	e005      	b.n	800ea4a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	73fb      	strb	r3, [r7, #15]
    break;
 800ea42:	e002      	b.n	800ea4a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ea44:	2303      	movs	r3, #3
 800ea46:	73fb      	strb	r3, [r7, #15]
    break;
 800ea48:	bf00      	nop
  }
  return usb_status; 
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea66:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800ea68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da0b      	bge.n	800ea88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800ea70:	78fb      	ldrb	r3, [r7, #3]
 800ea72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea76:	68f9      	ldr	r1, [r7, #12]
 800ea78:	4613      	mov	r3, r2
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	1a9b      	subs	r3, r3, r2
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	440b      	add	r3, r1
 800ea82:	333e      	adds	r3, #62	; 0x3e
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	e00b      	b.n	800eaa0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800ea88:	78fb      	ldrb	r3, [r7, #3]
 800ea8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea8e:	68f9      	ldr	r1, [r7, #12]
 800ea90:	4613      	mov	r3, r2
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	1a9b      	subs	r3, r3, r2
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	440b      	add	r3, r1
 800ea9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eabc:	2300      	movs	r3, #0
 800eabe:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eac6:	78fa      	ldrb	r2, [r7, #3]
 800eac8:	4611      	mov	r1, r2
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f4 fc96 	bl	80033fc <HAL_PCD_SetAddress>
 800ead0:	4603      	mov	r3, r0
 800ead2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ead4:	7bbb      	ldrb	r3, [r7, #14]
 800ead6:	2b03      	cmp	r3, #3
 800ead8:	d816      	bhi.n	800eb08 <USBD_LL_SetUSBAddress+0x5c>
 800eada:	a201      	add	r2, pc, #4	; (adr r2, 800eae0 <USBD_LL_SetUSBAddress+0x34>)
 800eadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae0:	0800eaf1 	.word	0x0800eaf1
 800eae4:	0800eaf7 	.word	0x0800eaf7
 800eae8:	0800eafd 	.word	0x0800eafd
 800eaec:	0800eb03 	.word	0x0800eb03
    case HAL_OK :
      usb_status = USBD_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf4:	e00b      	b.n	800eb0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	73fb      	strb	r3, [r7, #15]
    break;
 800eafa:	e008      	b.n	800eb0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eafc:	2301      	movs	r3, #1
 800eafe:	73fb      	strb	r3, [r7, #15]
    break;
 800eb00:	e005      	b.n	800eb0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb02:	2303      	movs	r3, #3
 800eb04:	73fb      	strb	r3, [r7, #15]
    break;
 800eb06:	e002      	b.n	800eb0e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb08:	2303      	movs	r3, #3
 800eb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb0c:	bf00      	nop
  }
  return usb_status;  
 800eb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	607a      	str	r2, [r7, #4]
 800eb22:	603b      	str	r3, [r7, #0]
 800eb24:	460b      	mov	r3, r1
 800eb26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb36:	7af9      	ldrb	r1, [r7, #11]
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	f7f4 fd98 	bl	8003670 <HAL_PCD_EP_Transmit>
 800eb40:	4603      	mov	r3, r0
 800eb42:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800eb44:	7dbb      	ldrb	r3, [r7, #22]
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	d816      	bhi.n	800eb78 <USBD_LL_Transmit+0x60>
 800eb4a:	a201      	add	r2, pc, #4	; (adr r2, 800eb50 <USBD_LL_Transmit+0x38>)
 800eb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb50:	0800eb61 	.word	0x0800eb61
 800eb54:	0800eb67 	.word	0x0800eb67
 800eb58:	0800eb6d 	.word	0x0800eb6d
 800eb5c:	0800eb73 	.word	0x0800eb73
    case HAL_OK :
      usb_status = USBD_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	75fb      	strb	r3, [r7, #23]
    break;
 800eb64:	e00b      	b.n	800eb7e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb66:	2303      	movs	r3, #3
 800eb68:	75fb      	strb	r3, [r7, #23]
    break;
 800eb6a:	e008      	b.n	800eb7e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	75fb      	strb	r3, [r7, #23]
    break;
 800eb70:	e005      	b.n	800eb7e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb72:	2303      	movs	r3, #3
 800eb74:	75fb      	strb	r3, [r7, #23]
    break;
 800eb76:	e002      	b.n	800eb7e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	75fb      	strb	r3, [r7, #23]
    break;
 800eb7c:	bf00      	nop
  }
  return usb_status;    
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3718      	adds	r7, #24
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	607a      	str	r2, [r7, #4]
 800eb92:	603b      	str	r3, [r7, #0]
 800eb94:	460b      	mov	r3, r1
 800eb96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eba6:	7af9      	ldrb	r1, [r7, #11]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	f7f4 fcfd 	bl	80035aa <HAL_PCD_EP_Receive>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ebb4:	7dbb      	ldrb	r3, [r7, #22]
 800ebb6:	2b03      	cmp	r3, #3
 800ebb8:	d816      	bhi.n	800ebe8 <USBD_LL_PrepareReceive+0x60>
 800ebba:	a201      	add	r2, pc, #4	; (adr r2, 800ebc0 <USBD_LL_PrepareReceive+0x38>)
 800ebbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc0:	0800ebd1 	.word	0x0800ebd1
 800ebc4:	0800ebd7 	.word	0x0800ebd7
 800ebc8:	0800ebdd 	.word	0x0800ebdd
 800ebcc:	0800ebe3 	.word	0x0800ebe3
    case HAL_OK :
      usb_status = USBD_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	75fb      	strb	r3, [r7, #23]
    break;
 800ebd4:	e00b      	b.n	800ebee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	75fb      	strb	r3, [r7, #23]
    break;
 800ebda:	e008      	b.n	800ebee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	75fb      	strb	r3, [r7, #23]
    break;
 800ebe0:	e005      	b.n	800ebee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	75fb      	strb	r3, [r7, #23]
    break;
 800ebe6:	e002      	b.n	800ebee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	75fb      	strb	r3, [r7, #23]
    break;
 800ebec:	bf00      	nop
  }
  return usb_status; 
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3718      	adds	r7, #24
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec0a:	78fa      	ldrb	r2, [r7, #3]
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7f4 fd16 	bl	8003640 <HAL_PCD_EP_GetRxCount>
 800ec14:	4603      	mov	r3, r0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <memset>:
 800ec1e:	4402      	add	r2, r0
 800ec20:	4603      	mov	r3, r0
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d100      	bne.n	800ec28 <memset+0xa>
 800ec26:	4770      	bx	lr
 800ec28:	f803 1b01 	strb.w	r1, [r3], #1
 800ec2c:	e7f9      	b.n	800ec22 <memset+0x4>
	...

0800ec30 <__libc_init_array>:
 800ec30:	b570      	push	{r4, r5, r6, lr}
 800ec32:	4d0d      	ldr	r5, [pc, #52]	; (800ec68 <__libc_init_array+0x38>)
 800ec34:	4c0d      	ldr	r4, [pc, #52]	; (800ec6c <__libc_init_array+0x3c>)
 800ec36:	1b64      	subs	r4, r4, r5
 800ec38:	10a4      	asrs	r4, r4, #2
 800ec3a:	2600      	movs	r6, #0
 800ec3c:	42a6      	cmp	r6, r4
 800ec3e:	d109      	bne.n	800ec54 <__libc_init_array+0x24>
 800ec40:	4d0b      	ldr	r5, [pc, #44]	; (800ec70 <__libc_init_array+0x40>)
 800ec42:	4c0c      	ldr	r4, [pc, #48]	; (800ec74 <__libc_init_array+0x44>)
 800ec44:	f000 f818 	bl	800ec78 <_init>
 800ec48:	1b64      	subs	r4, r4, r5
 800ec4a:	10a4      	asrs	r4, r4, #2
 800ec4c:	2600      	movs	r6, #0
 800ec4e:	42a6      	cmp	r6, r4
 800ec50:	d105      	bne.n	800ec5e <__libc_init_array+0x2e>
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
 800ec54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec58:	4798      	blx	r3
 800ec5a:	3601      	adds	r6, #1
 800ec5c:	e7ee      	b.n	800ec3c <__libc_init_array+0xc>
 800ec5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec62:	4798      	blx	r3
 800ec64:	3601      	adds	r6, #1
 800ec66:	e7f2      	b.n	800ec4e <__libc_init_array+0x1e>
 800ec68:	0800f714 	.word	0x0800f714
 800ec6c:	0800f714 	.word	0x0800f714
 800ec70:	0800f714 	.word	0x0800f714
 800ec74:	0800f718 	.word	0x0800f718

0800ec78 <_init>:
 800ec78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7a:	bf00      	nop
 800ec7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7e:	bc08      	pop	{r3}
 800ec80:	469e      	mov	lr, r3
 800ec82:	4770      	bx	lr

0800ec84 <_fini>:
 800ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec86:	bf00      	nop
 800ec88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec8a:	bc08      	pop	{r3}
 800ec8c:	469e      	mov	lr, r3
 800ec8e:	4770      	bx	lr
