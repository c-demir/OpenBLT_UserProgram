
My_UserProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001afc  08010188  08010188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08011c84  08011c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011cc0  08011cc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08011cc0  08011cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cc8  08011cc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cc8  08011cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ccc  08011ccc  00011ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08011cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000118  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000090c3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ba1  00000000  00000000  00029142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000798  00000000  00000000  0002ace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005c2  00000000  00000000  0002b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000200c0  00000000  00000000  0002ba42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b264  00000000  00000000  0004bb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0e64  00000000  00000000  00056d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000011c0  00000000  00000000  00117bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000026d9  00000000  00000000  00118d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0011b465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010188 <__do_global_dtors_aux>:
 8010188:	b510      	push	{r4, lr}
 801018a:	4c05      	ldr	r4, [pc, #20]	; (80101a0 <__do_global_dtors_aux+0x18>)
 801018c:	7823      	ldrb	r3, [r4, #0]
 801018e:	b933      	cbnz	r3, 801019e <__do_global_dtors_aux+0x16>
 8010190:	4b04      	ldr	r3, [pc, #16]	; (80101a4 <__do_global_dtors_aux+0x1c>)
 8010192:	b113      	cbz	r3, 801019a <__do_global_dtors_aux+0x12>
 8010194:	4804      	ldr	r0, [pc, #16]	; (80101a8 <__do_global_dtors_aux+0x20>)
 8010196:	f3af 8000 	nop.w
 801019a:	2301      	movs	r3, #1
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	bd10      	pop	{r4, pc}
 80101a0:	2000000c 	.word	0x2000000c
 80101a4:	00000000 	.word	0x00000000
 80101a8:	08011c6c 	.word	0x08011c6c

080101ac <frame_dummy>:
 80101ac:	b508      	push	{r3, lr}
 80101ae:	4b03      	ldr	r3, [pc, #12]	; (80101bc <frame_dummy+0x10>)
 80101b0:	b11b      	cbz	r3, 80101ba <frame_dummy+0xe>
 80101b2:	4903      	ldr	r1, [pc, #12]	; (80101c0 <frame_dummy+0x14>)
 80101b4:	4803      	ldr	r0, [pc, #12]	; (80101c4 <frame_dummy+0x18>)
 80101b6:	f3af 8000 	nop.w
 80101ba:	bd08      	pop	{r3, pc}
 80101bc:	00000000 	.word	0x00000000
 80101c0:	20000010 	.word	0x20000010
 80101c4:	08011c6c 	.word	0x08011c6c

080101c8 <__aeabi_uldivmod>:
 80101c8:	b953      	cbnz	r3, 80101e0 <__aeabi_uldivmod+0x18>
 80101ca:	b94a      	cbnz	r2, 80101e0 <__aeabi_uldivmod+0x18>
 80101cc:	2900      	cmp	r1, #0
 80101ce:	bf08      	it	eq
 80101d0:	2800      	cmpeq	r0, #0
 80101d2:	bf1c      	itt	ne
 80101d4:	f04f 31ff 	movne.w	r1, #4294967295
 80101d8:	f04f 30ff 	movne.w	r0, #4294967295
 80101dc:	f000 b970 	b.w	80104c0 <__aeabi_idiv0>
 80101e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80101e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80101e8:	f000 f806 	bl	80101f8 <__udivmoddi4>
 80101ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80101f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101f4:	b004      	add	sp, #16
 80101f6:	4770      	bx	lr

080101f8 <__udivmoddi4>:
 80101f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fc:	9e08      	ldr	r6, [sp, #32]
 80101fe:	460d      	mov	r5, r1
 8010200:	4604      	mov	r4, r0
 8010202:	460f      	mov	r7, r1
 8010204:	2b00      	cmp	r3, #0
 8010206:	d14a      	bne.n	801029e <__udivmoddi4+0xa6>
 8010208:	428a      	cmp	r2, r1
 801020a:	4694      	mov	ip, r2
 801020c:	d965      	bls.n	80102da <__udivmoddi4+0xe2>
 801020e:	fab2 f382 	clz	r3, r2
 8010212:	b143      	cbz	r3, 8010226 <__udivmoddi4+0x2e>
 8010214:	fa02 fc03 	lsl.w	ip, r2, r3
 8010218:	f1c3 0220 	rsb	r2, r3, #32
 801021c:	409f      	lsls	r7, r3
 801021e:	fa20 f202 	lsr.w	r2, r0, r2
 8010222:	4317      	orrs	r7, r2
 8010224:	409c      	lsls	r4, r3
 8010226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 801022a:	fa1f f58c 	uxth.w	r5, ip
 801022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8010232:	0c22      	lsrs	r2, r4, #16
 8010234:	fb0e 7711 	mls	r7, lr, r1, r7
 8010238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 801023c:	fb01 f005 	mul.w	r0, r1, r5
 8010240:	4290      	cmp	r0, r2
 8010242:	d90a      	bls.n	801025a <__udivmoddi4+0x62>
 8010244:	eb1c 0202 	adds.w	r2, ip, r2
 8010248:	f101 37ff 	add.w	r7, r1, #4294967295
 801024c:	f080 811c 	bcs.w	8010488 <__udivmoddi4+0x290>
 8010250:	4290      	cmp	r0, r2
 8010252:	f240 8119 	bls.w	8010488 <__udivmoddi4+0x290>
 8010256:	3902      	subs	r1, #2
 8010258:	4462      	add	r2, ip
 801025a:	1a12      	subs	r2, r2, r0
 801025c:	b2a4      	uxth	r4, r4
 801025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8010262:	fb0e 2210 	mls	r2, lr, r0, r2
 8010266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801026a:	fb00 f505 	mul.w	r5, r0, r5
 801026e:	42a5      	cmp	r5, r4
 8010270:	d90a      	bls.n	8010288 <__udivmoddi4+0x90>
 8010272:	eb1c 0404 	adds.w	r4, ip, r4
 8010276:	f100 32ff 	add.w	r2, r0, #4294967295
 801027a:	f080 8107 	bcs.w	801048c <__udivmoddi4+0x294>
 801027e:	42a5      	cmp	r5, r4
 8010280:	f240 8104 	bls.w	801048c <__udivmoddi4+0x294>
 8010284:	4464      	add	r4, ip
 8010286:	3802      	subs	r0, #2
 8010288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801028c:	1b64      	subs	r4, r4, r5
 801028e:	2100      	movs	r1, #0
 8010290:	b11e      	cbz	r6, 801029a <__udivmoddi4+0xa2>
 8010292:	40dc      	lsrs	r4, r3
 8010294:	2300      	movs	r3, #0
 8010296:	e9c6 4300 	strd	r4, r3, [r6]
 801029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029e:	428b      	cmp	r3, r1
 80102a0:	d908      	bls.n	80102b4 <__udivmoddi4+0xbc>
 80102a2:	2e00      	cmp	r6, #0
 80102a4:	f000 80ed 	beq.w	8010482 <__udivmoddi4+0x28a>
 80102a8:	2100      	movs	r1, #0
 80102aa:	e9c6 0500 	strd	r0, r5, [r6]
 80102ae:	4608      	mov	r0, r1
 80102b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b4:	fab3 f183 	clz	r1, r3
 80102b8:	2900      	cmp	r1, #0
 80102ba:	d149      	bne.n	8010350 <__udivmoddi4+0x158>
 80102bc:	42ab      	cmp	r3, r5
 80102be:	d302      	bcc.n	80102c6 <__udivmoddi4+0xce>
 80102c0:	4282      	cmp	r2, r0
 80102c2:	f200 80f8 	bhi.w	80104b6 <__udivmoddi4+0x2be>
 80102c6:	1a84      	subs	r4, r0, r2
 80102c8:	eb65 0203 	sbc.w	r2, r5, r3
 80102cc:	2001      	movs	r0, #1
 80102ce:	4617      	mov	r7, r2
 80102d0:	2e00      	cmp	r6, #0
 80102d2:	d0e2      	beq.n	801029a <__udivmoddi4+0xa2>
 80102d4:	e9c6 4700 	strd	r4, r7, [r6]
 80102d8:	e7df      	b.n	801029a <__udivmoddi4+0xa2>
 80102da:	b902      	cbnz	r2, 80102de <__udivmoddi4+0xe6>
 80102dc:	deff      	udf	#255	; 0xff
 80102de:	fab2 f382 	clz	r3, r2
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f040 8090 	bne.w	8010408 <__udivmoddi4+0x210>
 80102e8:	1a8a      	subs	r2, r1, r2
 80102ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80102ee:	fa1f fe8c 	uxth.w	lr, ip
 80102f2:	2101      	movs	r1, #1
 80102f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80102f8:	fb07 2015 	mls	r0, r7, r5, r2
 80102fc:	0c22      	lsrs	r2, r4, #16
 80102fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010302:	fb0e f005 	mul.w	r0, lr, r5
 8010306:	4290      	cmp	r0, r2
 8010308:	d908      	bls.n	801031c <__udivmoddi4+0x124>
 801030a:	eb1c 0202 	adds.w	r2, ip, r2
 801030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8010312:	d202      	bcs.n	801031a <__udivmoddi4+0x122>
 8010314:	4290      	cmp	r0, r2
 8010316:	f200 80cb 	bhi.w	80104b0 <__udivmoddi4+0x2b8>
 801031a:	4645      	mov	r5, r8
 801031c:	1a12      	subs	r2, r2, r0
 801031e:	b2a4      	uxth	r4, r4
 8010320:	fbb2 f0f7 	udiv	r0, r2, r7
 8010324:	fb07 2210 	mls	r2, r7, r0, r2
 8010328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801032c:	fb0e fe00 	mul.w	lr, lr, r0
 8010330:	45a6      	cmp	lr, r4
 8010332:	d908      	bls.n	8010346 <__udivmoddi4+0x14e>
 8010334:	eb1c 0404 	adds.w	r4, ip, r4
 8010338:	f100 32ff 	add.w	r2, r0, #4294967295
 801033c:	d202      	bcs.n	8010344 <__udivmoddi4+0x14c>
 801033e:	45a6      	cmp	lr, r4
 8010340:	f200 80bb 	bhi.w	80104ba <__udivmoddi4+0x2c2>
 8010344:	4610      	mov	r0, r2
 8010346:	eba4 040e 	sub.w	r4, r4, lr
 801034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 801034e:	e79f      	b.n	8010290 <__udivmoddi4+0x98>
 8010350:	f1c1 0720 	rsb	r7, r1, #32
 8010354:	408b      	lsls	r3, r1
 8010356:	fa22 fc07 	lsr.w	ip, r2, r7
 801035a:	ea4c 0c03 	orr.w	ip, ip, r3
 801035e:	fa05 f401 	lsl.w	r4, r5, r1
 8010362:	fa20 f307 	lsr.w	r3, r0, r7
 8010366:	40fd      	lsrs	r5, r7
 8010368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801036c:	4323      	orrs	r3, r4
 801036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8010372:	fa1f fe8c 	uxth.w	lr, ip
 8010376:	fb09 5518 	mls	r5, r9, r8, r5
 801037a:	0c1c      	lsrs	r4, r3, #16
 801037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010380:	fb08 f50e 	mul.w	r5, r8, lr
 8010384:	42a5      	cmp	r5, r4
 8010386:	fa02 f201 	lsl.w	r2, r2, r1
 801038a:	fa00 f001 	lsl.w	r0, r0, r1
 801038e:	d90b      	bls.n	80103a8 <__udivmoddi4+0x1b0>
 8010390:	eb1c 0404 	adds.w	r4, ip, r4
 8010394:	f108 3aff 	add.w	sl, r8, #4294967295
 8010398:	f080 8088 	bcs.w	80104ac <__udivmoddi4+0x2b4>
 801039c:	42a5      	cmp	r5, r4
 801039e:	f240 8085 	bls.w	80104ac <__udivmoddi4+0x2b4>
 80103a2:	f1a8 0802 	sub.w	r8, r8, #2
 80103a6:	4464      	add	r4, ip
 80103a8:	1b64      	subs	r4, r4, r5
 80103aa:	b29d      	uxth	r5, r3
 80103ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80103b0:	fb09 4413 	mls	r4, r9, r3, r4
 80103b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80103b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80103bc:	45a6      	cmp	lr, r4
 80103be:	d908      	bls.n	80103d2 <__udivmoddi4+0x1da>
 80103c0:	eb1c 0404 	adds.w	r4, ip, r4
 80103c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80103c8:	d26c      	bcs.n	80104a4 <__udivmoddi4+0x2ac>
 80103ca:	45a6      	cmp	lr, r4
 80103cc:	d96a      	bls.n	80104a4 <__udivmoddi4+0x2ac>
 80103ce:	3b02      	subs	r3, #2
 80103d0:	4464      	add	r4, ip
 80103d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80103d6:	fba3 9502 	umull	r9, r5, r3, r2
 80103da:	eba4 040e 	sub.w	r4, r4, lr
 80103de:	42ac      	cmp	r4, r5
 80103e0:	46c8      	mov	r8, r9
 80103e2:	46ae      	mov	lr, r5
 80103e4:	d356      	bcc.n	8010494 <__udivmoddi4+0x29c>
 80103e6:	d053      	beq.n	8010490 <__udivmoddi4+0x298>
 80103e8:	b156      	cbz	r6, 8010400 <__udivmoddi4+0x208>
 80103ea:	ebb0 0208 	subs.w	r2, r0, r8
 80103ee:	eb64 040e 	sbc.w	r4, r4, lr
 80103f2:	fa04 f707 	lsl.w	r7, r4, r7
 80103f6:	40ca      	lsrs	r2, r1
 80103f8:	40cc      	lsrs	r4, r1
 80103fa:	4317      	orrs	r7, r2
 80103fc:	e9c6 7400 	strd	r7, r4, [r6]
 8010400:	4618      	mov	r0, r3
 8010402:	2100      	movs	r1, #0
 8010404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010408:	f1c3 0120 	rsb	r1, r3, #32
 801040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8010410:	fa20 f201 	lsr.w	r2, r0, r1
 8010414:	fa25 f101 	lsr.w	r1, r5, r1
 8010418:	409d      	lsls	r5, r3
 801041a:	432a      	orrs	r2, r5
 801041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010420:	fa1f fe8c 	uxth.w	lr, ip
 8010424:	fbb1 f0f7 	udiv	r0, r1, r7
 8010428:	fb07 1510 	mls	r5, r7, r0, r1
 801042c:	0c11      	lsrs	r1, r2, #16
 801042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010432:	fb00 f50e 	mul.w	r5, r0, lr
 8010436:	428d      	cmp	r5, r1
 8010438:	fa04 f403 	lsl.w	r4, r4, r3
 801043c:	d908      	bls.n	8010450 <__udivmoddi4+0x258>
 801043e:	eb1c 0101 	adds.w	r1, ip, r1
 8010442:	f100 38ff 	add.w	r8, r0, #4294967295
 8010446:	d22f      	bcs.n	80104a8 <__udivmoddi4+0x2b0>
 8010448:	428d      	cmp	r5, r1
 801044a:	d92d      	bls.n	80104a8 <__udivmoddi4+0x2b0>
 801044c:	3802      	subs	r0, #2
 801044e:	4461      	add	r1, ip
 8010450:	1b49      	subs	r1, r1, r5
 8010452:	b292      	uxth	r2, r2
 8010454:	fbb1 f5f7 	udiv	r5, r1, r7
 8010458:	fb07 1115 	mls	r1, r7, r5, r1
 801045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010460:	fb05 f10e 	mul.w	r1, r5, lr
 8010464:	4291      	cmp	r1, r2
 8010466:	d908      	bls.n	801047a <__udivmoddi4+0x282>
 8010468:	eb1c 0202 	adds.w	r2, ip, r2
 801046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8010470:	d216      	bcs.n	80104a0 <__udivmoddi4+0x2a8>
 8010472:	4291      	cmp	r1, r2
 8010474:	d914      	bls.n	80104a0 <__udivmoddi4+0x2a8>
 8010476:	3d02      	subs	r5, #2
 8010478:	4462      	add	r2, ip
 801047a:	1a52      	subs	r2, r2, r1
 801047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8010480:	e738      	b.n	80102f4 <__udivmoddi4+0xfc>
 8010482:	4631      	mov	r1, r6
 8010484:	4630      	mov	r0, r6
 8010486:	e708      	b.n	801029a <__udivmoddi4+0xa2>
 8010488:	4639      	mov	r1, r7
 801048a:	e6e6      	b.n	801025a <__udivmoddi4+0x62>
 801048c:	4610      	mov	r0, r2
 801048e:	e6fb      	b.n	8010288 <__udivmoddi4+0x90>
 8010490:	4548      	cmp	r0, r9
 8010492:	d2a9      	bcs.n	80103e8 <__udivmoddi4+0x1f0>
 8010494:	ebb9 0802 	subs.w	r8, r9, r2
 8010498:	eb65 0e0c 	sbc.w	lr, r5, ip
 801049c:	3b01      	subs	r3, #1
 801049e:	e7a3      	b.n	80103e8 <__udivmoddi4+0x1f0>
 80104a0:	4645      	mov	r5, r8
 80104a2:	e7ea      	b.n	801047a <__udivmoddi4+0x282>
 80104a4:	462b      	mov	r3, r5
 80104a6:	e794      	b.n	80103d2 <__udivmoddi4+0x1da>
 80104a8:	4640      	mov	r0, r8
 80104aa:	e7d1      	b.n	8010450 <__udivmoddi4+0x258>
 80104ac:	46d0      	mov	r8, sl
 80104ae:	e77b      	b.n	80103a8 <__udivmoddi4+0x1b0>
 80104b0:	3d02      	subs	r5, #2
 80104b2:	4462      	add	r2, ip
 80104b4:	e732      	b.n	801031c <__udivmoddi4+0x124>
 80104b6:	4608      	mov	r0, r1
 80104b8:	e70a      	b.n	80102d0 <__udivmoddi4+0xd8>
 80104ba:	4464      	add	r4, ip
 80104bc:	3802      	subs	r0, #2
 80104be:	e742      	b.n	8010346 <__udivmoddi4+0x14e>

080104c0 <__aeabi_idiv0>:
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop

080104c4 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80104c4:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 80104c6:	f000 f973 	bl	80107b0 <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 80104ca:	f000 f93d 	bl	8010748 <LedInit>
  /* initialize the bootloader interface */
  BootComInit();
 80104ce:	f000 f8b1 	bl	8010634 <BootComInit>
} /*** end of AppInit ***/
 80104d2:	bd08      	pop	{r3, pc}

080104d4 <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80104d4:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80104d6:	f000 f941 	bl	801075c <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80104da:	f000 f92f 	bl	801073c <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80104de:	bd08      	pop	{r3, pc}

080104e0 <BootComRs232Init>:
** \brief     Initializes the UART communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComRs232Init(void)
{
 80104e0:	b508      	push	{r3, lr}
  /* Configure UART peripheral. */
  rs232Handle.Instance = USART2;
 80104e2:	4808      	ldr	r0, [pc, #32]	; (8010504 <BootComRs232Init+0x24>)
 80104e4:	4b08      	ldr	r3, [pc, #32]	; (8010508 <BootComRs232Init+0x28>)
 80104e6:	6003      	str	r3, [r0, #0]
  rs232Handle.Init.BaudRate = BOOT_COM_RS232_BAUDRATE;
 80104e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80104ec:	6043      	str	r3, [r0, #4]
  rs232Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80104ee:	2300      	movs	r3, #0
 80104f0:	6083      	str	r3, [r0, #8]
  rs232Handle.Init.StopBits = UART_STOPBITS_1;
 80104f2:	60c3      	str	r3, [r0, #12]
  rs232Handle.Init.Parity = UART_PARITY_NONE;
 80104f4:	6103      	str	r3, [r0, #16]
  rs232Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80104f6:	6183      	str	r3, [r0, #24]
  rs232Handle.Init.Mode = UART_MODE_TX_RX;
 80104f8:	220c      	movs	r2, #12
 80104fa:	6142      	str	r2, [r0, #20]
  rs232Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80104fc:	61c3      	str	r3, [r0, #28]
  /* Initialize the UART peripheral. */
  HAL_UART_Init(&rs232Handle);
 80104fe:	f001 fae5 	bl	8011acc <HAL_UART_Init>
} /*** end of BootComRs232Init ***/
 8010502:	bd08      	pop	{r3, pc}
 8010504:	20000050 	.word	0x20000050
 8010508:	40004400 	.word	0x40004400

0801050c <CanGetSpeedConfig>:
** \return    1 if the CAN bustiming register values were found, 0 otherwise.
**
****************************************************************************************/
static unsigned char CanGetSpeedConfig(unsigned short baud, unsigned short *prescaler,
                                       unsigned char *tseg1, unsigned char *tseg2)
{
 801050c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010510:	4604      	mov	r4, r0
 8010512:	460d      	mov	r5, r1
 8010514:	4617      	mov	r7, r2
 8010516:	4698      	mov	r8, r3
  unsigned char cnt;
  unsigned long canClockFreqkHz;

  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = HAL_RCC_GetPCLK1Freq() / 1000u;
 8010518:	f001 f99a 	bl	8011850 <HAL_RCC_GetPCLK1Freq>
 801051c:	4b16      	ldr	r3, [pc, #88]	; (8010578 <CanGetSpeedConfig+0x6c>)
 801051e:	fba3 3100 	umull	r3, r1, r3, r0
 8010522:	0989      	lsrs	r1, r1, #6

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 8010524:	2300      	movs	r3, #0
 8010526:	e001      	b.n	801052c <CanGetSpeedConfig+0x20>
 8010528:	3301      	adds	r3, #1
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b11      	cmp	r3, #17
 801052e:	d81f      	bhi.n	8010570 <CanGetSpeedConfig+0x64>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 8010530:	4a12      	ldr	r2, [pc, #72]	; (801057c <CanGetSpeedConfig+0x70>)
 8010532:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8010536:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801053a:	7852      	ldrb	r2, [r2, #1]
 801053c:	eb00 0c02 	add.w	ip, r0, r2
 8010540:	fb0c 4c04 	mla	ip, ip, r4, r4
 8010544:	fbb1 fefc 	udiv	lr, r1, ip
 8010548:	fb0c 161e 	mls	r6, ip, lr, r1
 801054c:	2e00      	cmp	r6, #0
 801054e:	d1eb      	bne.n	8010528 <CanGetSpeedConfig+0x1c>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 8010550:	fa1f fc8e 	uxth.w	ip, lr
 8010554:	f8a5 c000 	strh.w	ip, [r5]

      /* make sure the prescaler is valid */
      if ( (*prescaler > 0) && (*prescaler <= 1024) )
 8010558:	f10c 3cff 	add.w	ip, ip, #4294967295
 801055c:	fa1f fc8c 	uxth.w	ip, ip
 8010560:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8010564:	d2e0      	bcs.n	8010528 <CanGetSpeedConfig+0x1c>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 8010566:	7038      	strb	r0, [r7, #0]
        *tseg2 = canTiming[cnt].tseg2;
 8010568:	f888 2000 	strb.w	r2, [r8]
        /* found a good bus timing configuration */
        return 1;
 801056c:	2001      	movs	r0, #1
 801056e:	e000      	b.n	8010572 <CanGetSpeedConfig+0x66>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return 0;
 8010570:	2000      	movs	r0, #0
} /*** end of CanGetSpeedConfig ***/
 8010572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010576:	bf00      	nop
 8010578:	10624dd3 	.word	0x10624dd3
 801057c:	08011c84 	.word	0x08011c84

08010580 <BootComCanInit>:
** \brief     Initializes the CAN communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComCanInit(void)
{
 8010580:	b570      	push	{r4, r5, r6, lr}
 8010582:	b08c      	sub	sp, #48	; 0x30
  unsigned short prescaler = 0;
 8010584:	2500      	movs	r5, #0
 8010586:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
  unsigned char tseg1 = 0, tseg2 = 0;
 801058a:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801058e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  CAN_FilterTypeDef filterConfig;
  unsigned long rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
  unsigned long rxFilterId, rxFilterMask;

  /* obtain bittiming configuration information. */
  CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2);
 8010592:	ab0b      	add	r3, sp, #44	; 0x2c
 8010594:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8010598:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801059c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80105a0:	f7ff ffb4 	bl	801050c <CanGetSpeedConfig>

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN1;
 80105a4:	4c1a      	ldr	r4, [pc, #104]	; (8010610 <BootComCanInit+0x90>)
 80105a6:	4b1b      	ldr	r3, [pc, #108]	; (8010614 <BootComCanInit+0x94>)
 80105a8:	6023      	str	r3, [r4, #0]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 80105aa:	7625      	strb	r5, [r4, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 80105ac:	7665      	strb	r5, [r4, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 80105ae:	76a5      	strb	r5, [r4, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 80105b0:	2601      	movs	r6, #1
 80105b2:	76e6      	strb	r6, [r4, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 80105b4:	7725      	strb	r5, [r4, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 80105b6:	7765      	strb	r5, [r4, #29]
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 80105b8:	60a5      	str	r5, [r4, #8]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80105ba:	60e5      	str	r5, [r4, #12]
  canHandle.Init.TimeSeg1 = ((unsigned long)tseg1 - 1) << CAN_BTR_TS1_Pos;
 80105bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80105c0:	3b01      	subs	r3, #1
 80105c2:	041b      	lsls	r3, r3, #16
 80105c4:	6123      	str	r3, [r4, #16]
  canHandle.Init.TimeSeg2 = ((unsigned long)tseg2 - 1) << CAN_BTR_TS2_Pos;
 80105c6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80105ca:	3b01      	subs	r3, #1
 80105cc:	051b      	lsls	r3, r3, #20
 80105ce:	6163      	str	r3, [r4, #20]
  canHandle.Init.Prescaler = prescaler;
 80105d0:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80105d4:	6063      	str	r3, [r4, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 80105d6:	4620      	mov	r0, r4
 80105d8:	f000 fabe 	bl	8010b58 <HAL_CAN_Init>
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
  }
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
  filterConfig.FilterBank = 0;
 80105dc:	9506      	str	r5, [sp, #24]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80105de:	9507      	str	r5, [sp, #28]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80105e0:	9608      	str	r6, [sp, #32]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 80105e2:	f64c 43e0 	movw	r3, #52448	; 0xcce0
 80105e6:	9301      	str	r3, [sp, #4]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 80105e8:	9502      	str	r5, [sp, #8]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 80105ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80105ee:	9303      	str	r3, [sp, #12]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 80105f0:	2304      	movs	r3, #4
 80105f2:	9304      	str	r3, [sp, #16]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80105f4:	9505      	str	r5, [sp, #20]
  filterConfig.FilterActivation = ENABLE;
 80105f6:	9609      	str	r6, [sp, #36]	; 0x24
  filterConfig.SlaveStartFilterBank = 14;
 80105f8:	230e      	movs	r3, #14
 80105fa:	930a      	str	r3, [sp, #40]	; 0x28
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 80105fc:	a901      	add	r1, sp, #4
 80105fe:	4620      	mov	r0, r4
 8010600:	f000 fb50 	bl	8010ca4 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 8010604:	4620      	mov	r0, r4
 8010606:	f000 fbe9 	bl	8010ddc <HAL_CAN_Start>
} /*** end of BootComCanInit ***/
 801060a:	b00c      	add	sp, #48	; 0x30
 801060c:	bd70      	pop	{r4, r5, r6, pc}
 801060e:	bf00      	nop
 8010610:	20000028 	.word	0x20000028
 8010614:	40006400 	.word	0x40006400

08010618 <Rs232ReceiveByte>:
{
 8010618:	b508      	push	{r3, lr}
 801061a:	4601      	mov	r1, r0
  result = HAL_UART_Receive(&rs232Handle, data, 1, 0);
 801061c:	2300      	movs	r3, #0
 801061e:	2201      	movs	r2, #1
 8010620:	4803      	ldr	r0, [pc, #12]	; (8010630 <Rs232ReceiveByte+0x18>)
 8010622:	f001 fa82 	bl	8011b2a <HAL_UART_Receive>
  if (result == HAL_OK)
 8010626:	b108      	cbz	r0, 801062c <Rs232ReceiveByte+0x14>
  return 0;
 8010628:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 801062a:	bd08      	pop	{r3, pc}
    return 1;
 801062c:	2001      	movs	r0, #1
 801062e:	e7fc      	b.n	801062a <Rs232ReceiveByte+0x12>
 8010630:	20000050 	.word	0x20000050

08010634 <BootComInit>:
{
 8010634:	b508      	push	{r3, lr}
  BootComRs232Init();
 8010636:	f7ff ff53 	bl	80104e0 <BootComRs232Init>
  BootComCanInit();
 801063a:	f7ff ffa1 	bl	8010580 <BootComCanInit>
} /*** end of BootComInit ***/
 801063e:	bd08      	pop	{r3, pc}

08010640 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010640:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010644:	4905      	ldr	r1, [pc, #20]	; (801065c <BootActivate+0x1c>)
 8010646:	68ca      	ldr	r2, [r1, #12]
 8010648:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801064c:	4b04      	ldr	r3, [pc, #16]	; (8010660 <BootActivate+0x20>)
 801064e:	4313      	orrs	r3, r2
 8010650:	60cb      	str	r3, [r1, #12]
 8010652:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010656:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8010658:	e7fd      	b.n	8010656 <BootActivate+0x16>
 801065a:	bf00      	nop
 801065c:	e000ed00 	.word	0xe000ed00
 8010660:	05fa0004 	.word	0x05fa0004

08010664 <BootComRs232CheckActivationRequest>:
{
 8010664:	b508      	push	{r3, lr}
  if (xcpCtoRxInProgress == 0)
 8010666:	4b21      	ldr	r3, [pc, #132]	; (80106ec <BootComRs232CheckActivationRequest+0x88>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	b9b3      	cbnz	r3, 801069a <BootComRs232CheckActivationRequest+0x36>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == 1)
 801066c:	4820      	ldr	r0, [pc, #128]	; (80106f0 <BootComRs232CheckActivationRequest+0x8c>)
 801066e:	f7ff ffd3 	bl	8010618 <Rs232ReceiveByte>
 8010672:	2801      	cmp	r0, #1
 8010674:	d000      	beq.n	8010678 <BootComRs232CheckActivationRequest+0x14>
} /*** end of BootComRs232CheckActivationRequest ***/
 8010676:	bd08      	pop	{r3, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8010678:	4b1d      	ldr	r3, [pc, #116]	; (80106f0 <BootComRs232CheckActivationRequest+0x8c>)
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	3b01      	subs	r3, #1
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b80      	cmp	r3, #128	; 0x80
 8010682:	d8f8      	bhi.n	8010676 <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxStartTime = TimerGet();
 8010684:	f000 f895 	bl	80107b2 <TimerGet>
 8010688:	4b1a      	ldr	r3, [pc, #104]	; (80106f4 <BootComRs232CheckActivationRequest+0x90>)
 801068a:	6018      	str	r0, [r3, #0]
        xcpCtoRxInProgress = 1;
 801068c:	4b17      	ldr	r3, [pc, #92]	; (80106ec <BootComRs232CheckActivationRequest+0x88>)
 801068e:	2201      	movs	r2, #1
 8010690:	701a      	strb	r2, [r3, #0]
        xcpCtoRxLength = 0;
 8010692:	4b19      	ldr	r3, [pc, #100]	; (80106f8 <BootComRs232CheckActivationRequest+0x94>)
 8010694:	2200      	movs	r2, #0
 8010696:	701a      	strb	r2, [r3, #0]
 8010698:	e7ed      	b.n	8010676 <BootComRs232CheckActivationRequest+0x12>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == 1)
 801069a:	4b17      	ldr	r3, [pc, #92]	; (80106f8 <BootComRs232CheckActivationRequest+0x94>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	3301      	adds	r3, #1
 80106a0:	4813      	ldr	r0, [pc, #76]	; (80106f0 <BootComRs232CheckActivationRequest+0x8c>)
 80106a2:	4418      	add	r0, r3
 80106a4:	f7ff ffb8 	bl	8010618 <Rs232ReceiveByte>
 80106a8:	2801      	cmp	r0, #1
 80106aa:	d113      	bne.n	80106d4 <BootComRs232CheckActivationRequest+0x70>
      xcpCtoRxLength++;
 80106ac:	4a12      	ldr	r2, [pc, #72]	; (80106f8 <BootComRs232CheckActivationRequest+0x94>)
 80106ae:	7813      	ldrb	r3, [r2, #0]
 80106b0:	3301      	adds	r3, #1
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	7013      	strb	r3, [r2, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80106b6:	4a0e      	ldr	r2, [pc, #56]	; (80106f0 <BootComRs232CheckActivationRequest+0x8c>)
 80106b8:	7812      	ldrb	r2, [r2, #0]
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d1db      	bne.n	8010676 <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80106be:	4a0b      	ldr	r2, [pc, #44]	; (80106ec <BootComRs232CheckActivationRequest+0x88>)
 80106c0:	2100      	movs	r1, #0
 80106c2:	7011      	strb	r1, [r2, #0]
        if ((xcpCtoReqPacket[1] == 0xff) && (xcpCtoRxLength == 2))
 80106c4:	4a0a      	ldr	r2, [pc, #40]	; (80106f0 <BootComRs232CheckActivationRequest+0x8c>)
 80106c6:	7852      	ldrb	r2, [r2, #1]
 80106c8:	2aff      	cmp	r2, #255	; 0xff
 80106ca:	d1d4      	bne.n	8010676 <BootComRs232CheckActivationRequest+0x12>
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d1d2      	bne.n	8010676 <BootComRs232CheckActivationRequest+0x12>
          BootActivate();
 80106d0:	f7ff ffb6 	bl	8010640 <BootActivate>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 80106d4:	f000 f86d 	bl	80107b2 <TimerGet>
 80106d8:	4b06      	ldr	r3, [pc, #24]	; (80106f4 <BootComRs232CheckActivationRequest+0x90>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	3364      	adds	r3, #100	; 0x64
 80106de:	4298      	cmp	r0, r3
 80106e0:	d9c9      	bls.n	8010676 <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80106e2:	4b02      	ldr	r3, [pc, #8]	; (80106ec <BootComRs232CheckActivationRequest+0x88>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	701a      	strb	r2, [r3, #0]
} /*** end of BootComRs232CheckActivationRequest ***/
 80106e8:	e7c5      	b.n	8010676 <BootComRs232CheckActivationRequest+0x12>
 80106ea:	bf00      	nop
 80106ec:	20000112 	.word	0x20000112
 80106f0:	20000090 	.word	0x20000090
 80106f4:	20000114 	.word	0x20000114
 80106f8:	20000113 	.word	0x20000113

080106fc <BootComCanCheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
static void BootComCanCheckActivationRequest(void)
{
 80106fc:	b500      	push	{lr}
 80106fe:	b08b      	sub	sp, #44	; 0x2c
  unsigned char packetIdMatches = 0;
  CAN_RxHeaderTypeDef rxMsgHeader;
  unsigned char rxMsgData[8];

  /* poll for received CAN messages that await processing. */
  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, rxMsgData) == HAL_OK)
 8010700:	ab01      	add	r3, sp, #4
 8010702:	aa03      	add	r2, sp, #12
 8010704:	2100      	movs	r1, #0
 8010706:	480c      	ldr	r0, [pc, #48]	; (8010738 <BootComCanCheckActivationRequest+0x3c>)
 8010708:	f000 fb96 	bl	8010e38 <HAL_CAN_GetRxMessage>
 801070c:	b920      	cbnz	r0, 8010718 <BootComCanCheckActivationRequest+0x1c>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 801070e:	9a03      	ldr	r2, [sp, #12]
 8010710:	f240 6367 	movw	r3, #1639	; 0x667
 8010714:	429a      	cmp	r2, r3
 8010716:	d002      	beq.n	801071e <BootComCanCheckActivationRequest+0x22>
        /* connection request received so start the bootloader */
        BootActivate();
      }
    }
  }
} /*** end of BootComCanCheckActivationRequest ***/
 8010718:	b00b      	add	sp, #44	; 0x2c
 801071a:	f85d fb04 	ldr.w	pc, [sp], #4
           (rxMsgHeader.IDE == CAN_ID_STD) )
 801071e:	9b05      	ldr	r3, [sp, #20]
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1f9      	bne.n	8010718 <BootComCanCheckActivationRequest+0x1c>
      if ((rxMsgData[0] == 0xff) && (rxMsgHeader.DLC == 2))
 8010724:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010728:	2bff      	cmp	r3, #255	; 0xff
 801072a:	d1f5      	bne.n	8010718 <BootComCanCheckActivationRequest+0x1c>
 801072c:	9b07      	ldr	r3, [sp, #28]
 801072e:	2b02      	cmp	r3, #2
 8010730:	d1f2      	bne.n	8010718 <BootComCanCheckActivationRequest+0x1c>
        BootActivate();
 8010732:	f7ff ff85 	bl	8010640 <BootActivate>
 8010736:	bf00      	nop
 8010738:	20000028 	.word	0x20000028

0801073c <BootComCheckActivationRequest>:
{
 801073c:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 801073e:	f7ff ff91 	bl	8010664 <BootComRs232CheckActivationRequest>
  BootComCanCheckActivationRequest();
 8010742:	f7ff ffdb 	bl	80106fc <BootComCanCheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 8010746:	bd08      	pop	{r3, pc}

08010748 <LedInit>:
** \brief     Initializes the LED. 
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 8010748:	b508      	push	{r3, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 801074a:	2201      	movs	r2, #1
 801074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010750:	4801      	ldr	r0, [pc, #4]	; (8010758 <LedInit+0x10>)
 8010752:	f000 fd5d 	bl	8011210 <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8010756:	bd08      	pop	{r3, pc}
 8010758:	40020c00 	.word	0x40020c00

0801075c <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 801075c:	b510      	push	{r4, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 801075e:	f000 f828 	bl	80107b2 <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 8010762:	4b10      	ldr	r3, [pc, #64]	; (80107a4 <LedToggle+0x48>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	1ac3      	subs	r3, r0, r3
 8010768:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801076c:	d30e      	bcc.n	801078c <LedToggle+0x30>
 801076e:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 8010770:	4b0d      	ldr	r3, [pc, #52]	; (80107a8 <LedToggle+0x4c>)
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	b95b      	cbnz	r3, 801078e <LedToggle+0x32>
  {
    led_toggle_state = 1;
 8010776:	4b0c      	ldr	r3, [pc, #48]	; (80107a8 <LedToggle+0x4c>)
 8010778:	2201      	movs	r2, #1
 801077a:	701a      	strb	r2, [r3, #0]
    /* turn the LED on */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 801077c:	2200      	movs	r2, #0
 801077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010782:	480a      	ldr	r0, [pc, #40]	; (80107ac <LedToggle+0x50>)
 8010784:	f000 fd44 	bl	8011210 <HAL_GPIO_WritePin>
    /* turn the LED off */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 8010788:	4b06      	ldr	r3, [pc, #24]	; (80107a4 <LedToggle+0x48>)
 801078a:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 801078c:	bd10      	pop	{r4, pc}
    led_toggle_state = 0;
 801078e:	4b06      	ldr	r3, [pc, #24]	; (80107a8 <LedToggle+0x4c>)
 8010790:	2200      	movs	r2, #0
 8010792:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8010794:	2201      	movs	r2, #1
 8010796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801079a:	4804      	ldr	r0, [pc, #16]	; (80107ac <LedToggle+0x50>)
 801079c:	f000 fd38 	bl	8011210 <HAL_GPIO_WritePin>
 80107a0:	e7f2      	b.n	8010788 <LedToggle+0x2c>
 80107a2:	bf00      	nop
 80107a4:	2000011c 	.word	0x2000011c
 80107a8:	20000118 	.word	0x20000118
 80107ac:	40020c00 	.word	0x40020c00

080107b0 <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80107b0:	4770      	bx	lr

080107b2 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80107b2:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80107b4:	f000 f9ca 	bl	8010b4c <HAL_GetTick>
} /*** end of TimerGet ***/
 80107b8:	bd08      	pop	{r3, pc}
	...

080107bc <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 80107bc:	4a01      	ldr	r2, [pc, #4]	; (80107c4 <VectorBase_Config+0x8>)
 80107be:	4b02      	ldr	r3, [pc, #8]	; (80107c8 <VectorBase_Config+0xc>)
 80107c0:	609a      	str	r2, [r3, #8]
}
 80107c2:	4770      	bx	lr
 80107c4:	08010000 	.word	0x08010000
 80107c8:	e000ed00 	.word	0xe000ed00

080107cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80107cc:	b530      	push	{r4, r5, lr}
 80107ce:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107d0:	2400      	movs	r4, #0
 80107d2:	9405      	str	r4, [sp, #20]
 80107d4:	9406      	str	r4, [sp, #24]
 80107d6:	9407      	str	r4, [sp, #28]
 80107d8:	9408      	str	r4, [sp, #32]
 80107da:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80107dc:	9401      	str	r4, [sp, #4]
 80107de:	4b1e      	ldr	r3, [pc, #120]	; (8010858 <MX_GPIO_Init+0x8c>)
 80107e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80107e6:	631a      	str	r2, [r3, #48]	; 0x30
 80107e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80107ee:	9201      	str	r2, [sp, #4]
 80107f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80107f2:	9402      	str	r4, [sp, #8]
 80107f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107f6:	f042 0201 	orr.w	r2, r2, #1
 80107fa:	631a      	str	r2, [r3, #48]	; 0x30
 80107fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107fe:	f002 0201 	and.w	r2, r2, #1
 8010802:	9202      	str	r2, [sp, #8]
 8010804:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010806:	9403      	str	r4, [sp, #12]
 8010808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801080a:	f042 0204 	orr.w	r2, r2, #4
 801080e:	631a      	str	r2, [r3, #48]	; 0x30
 8010810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010812:	f002 0204 	and.w	r2, r2, #4
 8010816:	9203      	str	r2, [sp, #12]
 8010818:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801081a:	9404      	str	r4, [sp, #16]
 801081c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801081e:	f042 0202 	orr.w	r2, r2, #2
 8010822:	631a      	str	r2, [r3, #48]	; 0x30
 8010824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010826:	f003 0302 	and.w	r3, r3, #2
 801082a:	9304      	str	r3, [sp, #16]
 801082c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 801082e:	4d0b      	ldr	r5, [pc, #44]	; (801085c <MX_GPIO_Init+0x90>)
 8010830:	2201      	movs	r2, #1
 8010832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010836:	4628      	mov	r0, r5
 8010838:	f000 fcea 	bl	8011210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 801083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010840:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010842:	2301      	movs	r3, #1
 8010844:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010846:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010848:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801084a:	a905      	add	r1, sp, #20
 801084c:	4628      	mov	r0, r5
 801084e:	f000 fbf7 	bl	8011040 <HAL_GPIO_Init>

}
 8010852:	b00b      	add	sp, #44	; 0x2c
 8010854:	bd30      	pop	{r4, r5, pc}
 8010856:	bf00      	nop
 8010858:	40023800 	.word	0x40023800
 801085c:	40020800 	.word	0x40020800

08010860 <SystemClock_Config>:
{
 8010860:	b530      	push	{r4, r5, lr}
 8010862:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010864:	2230      	movs	r2, #48	; 0x30
 8010866:	2100      	movs	r1, #0
 8010868:	a808      	add	r0, sp, #32
 801086a:	f001 f9d3 	bl	8011c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801086e:	2400      	movs	r4, #0
 8010870:	9403      	str	r4, [sp, #12]
 8010872:	9404      	str	r4, [sp, #16]
 8010874:	9405      	str	r4, [sp, #20]
 8010876:	9406      	str	r4, [sp, #24]
 8010878:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 801087a:	9401      	str	r4, [sp, #4]
 801087c:	4b1c      	ldr	r3, [pc, #112]	; (80108f0 <SystemClock_Config+0x90>)
 801087e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010880:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010884:	641a      	str	r2, [r3, #64]	; 0x40
 8010886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010890:	9402      	str	r4, [sp, #8]
 8010892:	4b18      	ldr	r3, [pc, #96]	; (80108f4 <SystemClock_Config+0x94>)
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801089a:	601a      	str	r2, [r3, #0]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108a2:	9302      	str	r3, [sp, #8]
 80108a4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80108a6:	2301      	movs	r3, #1
 80108a8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80108aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80108ae:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80108b0:	2502      	movs	r5, #2
 80108b2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80108b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80108b8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80108ba:	2308      	movs	r3, #8
 80108bc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80108be:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80108c2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80108c4:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80108c6:	2304      	movs	r3, #4
 80108c8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80108ca:	a808      	add	r0, sp, #32
 80108cc:	f000 fca6 	bl	801121c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80108d0:	230f      	movs	r3, #15
 80108d2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80108d4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80108d6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80108d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80108dc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80108de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108e2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80108e4:	2105      	movs	r1, #5
 80108e6:	a803      	add	r0, sp, #12
 80108e8:	f000 fefc 	bl	80116e4 <HAL_RCC_ClockConfig>
}
 80108ec:	b015      	add	sp, #84	; 0x54
 80108ee:	bd30      	pop	{r4, r5, pc}
 80108f0:	40023800 	.word	0x40023800
 80108f4:	40007000 	.word	0x40007000

080108f8 <main>:
{
 80108f8:	b508      	push	{r3, lr}
  VectorBase_Config();
 80108fa:	f7ff ff5f 	bl	80107bc <VectorBase_Config>
  HAL_Init();
 80108fe:	f000 f8ff 	bl	8010b00 <HAL_Init>
  SystemClock_Config();
 8010902:	f7ff ffad 	bl	8010860 <SystemClock_Config>
  MX_GPIO_Init();
 8010906:	f7ff ff61 	bl	80107cc <MX_GPIO_Init>
  AppInit();
 801090a:	f7ff fddb 	bl	80104c4 <AppInit>
    AppTask();
 801090e:	f7ff fde1 	bl	80104d4 <AppTask>
  while (1)
 8010912:	e7fc      	b.n	801090e <main+0x16>

08010914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010914:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010916:	2100      	movs	r1, #0
 8010918:	9100      	str	r1, [sp, #0]
 801091a:	4b0b      	ldr	r3, [pc, #44]	; (8010948 <HAL_MspInit+0x34>)
 801091c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801091e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010922:	645a      	str	r2, [r3, #68]	; 0x44
 8010924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010926:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801092a:	9200      	str	r2, [sp, #0]
 801092c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801092e:	9101      	str	r1, [sp, #4]
 8010930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010932:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010936:	641a      	str	r2, [r3, #64]	; 0x40
 8010938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801093e:	9301      	str	r3, [sp, #4]
 8010940:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010942:	b002      	add	sp, #8
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	40023800 	.word	0x40023800

0801094c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 801094c:	b500      	push	{lr}
 801094e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010950:	2300      	movs	r3, #0
 8010952:	9303      	str	r3, [sp, #12]
 8010954:	9304      	str	r3, [sp, #16]
 8010956:	9305      	str	r3, [sp, #20]
 8010958:	9306      	str	r3, [sp, #24]
 801095a:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 801095c:	6802      	ldr	r2, [r0, #0]
 801095e:	4b15      	ldr	r3, [pc, #84]	; (80109b4 <HAL_CAN_MspInit+0x68>)
 8010960:	429a      	cmp	r2, r3
 8010962:	d002      	beq.n	801096a <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8010964:	b009      	add	sp, #36	; 0x24
 8010966:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 801096a:	2100      	movs	r1, #0
 801096c:	9101      	str	r1, [sp, #4]
 801096e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8010972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010974:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8010978:	641a      	str	r2, [r3, #64]	; 0x40
 801097a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801097c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8010980:	9201      	str	r2, [sp, #4]
 8010982:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010984:	9102      	str	r1, [sp, #8]
 8010986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010988:	f042 0202 	orr.w	r2, r2, #2
 801098c:	631a      	str	r2, [r3, #48]	; 0x30
 801098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010990:	f003 0302 	and.w	r3, r3, #2
 8010994:	9302      	str	r3, [sp, #8]
 8010996:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8010998:	f44f 7340 	mov.w	r3, #768	; 0x300
 801099c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801099e:	2302      	movs	r3, #2
 80109a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109a2:	2303      	movs	r3, #3
 80109a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80109a6:	2309      	movs	r3, #9
 80109a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109aa:	a903      	add	r1, sp, #12
 80109ac:	4802      	ldr	r0, [pc, #8]	; (80109b8 <HAL_CAN_MspInit+0x6c>)
 80109ae:	f000 fb47 	bl	8011040 <HAL_GPIO_Init>
}
 80109b2:	e7d7      	b.n	8010964 <HAL_CAN_MspInit+0x18>
 80109b4:	40006400 	.word	0x40006400
 80109b8:	40020400 	.word	0x40020400

080109bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80109bc:	b500      	push	{lr}
 80109be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109c0:	2300      	movs	r3, #0
 80109c2:	9303      	str	r3, [sp, #12]
 80109c4:	9304      	str	r3, [sp, #16]
 80109c6:	9305      	str	r3, [sp, #20]
 80109c8:	9306      	str	r3, [sp, #24]
 80109ca:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80109cc:	6802      	ldr	r2, [r0, #0]
 80109ce:	4b15      	ldr	r3, [pc, #84]	; (8010a24 <HAL_UART_MspInit+0x68>)
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d002      	beq.n	80109da <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80109d4:	b009      	add	sp, #36	; 0x24
 80109d6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80109da:	2100      	movs	r1, #0
 80109dc:	9101      	str	r1, [sp, #4]
 80109de:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80109e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80109e8:	641a      	str	r2, [r3, #64]	; 0x40
 80109ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109ec:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80109f0:	9201      	str	r2, [sp, #4]
 80109f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109f4:	9102      	str	r1, [sp, #8]
 80109f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109f8:	f042 0201 	orr.w	r2, r2, #1
 80109fc:	631a      	str	r2, [r3, #48]	; 0x30
 80109fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a00:	f003 0301 	and.w	r3, r3, #1
 8010a04:	9302      	str	r3, [sp, #8]
 8010a06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8010a08:	230c      	movs	r3, #12
 8010a0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a0c:	2302      	movs	r3, #2
 8010a0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a10:	2303      	movs	r3, #3
 8010a12:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010a14:	2307      	movs	r3, #7
 8010a16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a18:	a903      	add	r1, sp, #12
 8010a1a:	4803      	ldr	r0, [pc, #12]	; (8010a28 <HAL_UART_MspInit+0x6c>)
 8010a1c:	f000 fb10 	bl	8011040 <HAL_GPIO_Init>
}
 8010a20:	e7d8      	b.n	80109d4 <HAL_UART_MspInit+0x18>
 8010a22:	bf00      	nop
 8010a24:	40004400 	.word	0x40004400
 8010a28:	40020000 	.word	0x40020000

08010a2c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010a2c:	4770      	bx	lr

08010a2e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010a2e:	e7fe      	b.n	8010a2e <HardFault_Handler>

08010a30 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010a30:	e7fe      	b.n	8010a30 <MemManage_Handler>

08010a32 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010a32:	e7fe      	b.n	8010a32 <BusFault_Handler>

08010a34 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010a34:	e7fe      	b.n	8010a34 <UsageFault_Handler>

08010a36 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010a36:	4770      	bx	lr

08010a38 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010a38:	4770      	bx	lr

08010a3a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010a3a:	4770      	bx	lr

08010a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010a3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010a3e:	f000 f879 	bl	8010b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010a42:	bd08      	pop	{r3, pc}

08010a44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010a44:	4b05      	ldr	r3, [pc, #20]	; (8010a5c <SystemInit+0x18>)
 8010a46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010a4a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8010a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010a56:	609a      	str	r2, [r3, #8]
#endif
}
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	e000ed00 	.word	0xe000ed00

08010a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010a98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8010a64:	f7ff ffee 	bl	8010a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010a68:	480c      	ldr	r0, [pc, #48]	; (8010a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010a6a:	490d      	ldr	r1, [pc, #52]	; (8010aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010a6c:	4a0d      	ldr	r2, [pc, #52]	; (8010aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010a70:	e002      	b.n	8010a78 <LoopCopyDataInit>

08010a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010a76:	3304      	adds	r3, #4

08010a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010a7c:	d3f9      	bcc.n	8010a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010a7e:	4a0a      	ldr	r2, [pc, #40]	; (8010aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8010a80:	4c0a      	ldr	r4, [pc, #40]	; (8010aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8010a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010a84:	e001      	b.n	8010a8a <LoopFillZerobss>

08010a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010a88:	3204      	adds	r2, #4

08010a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010a8c:	d3fb      	bcc.n	8010a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010a8e:	f001 f8c9 	bl	8011c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010a92:	f7ff ff31 	bl	80108f8 <main>
  bx  lr    
 8010a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8010aa4:	08011cd0 	.word	0x08011cd0
  ldr r2, =_sbss
 8010aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8010aac:	20000124 	.word	0x20000124

08010ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010ab0:	e7fe      	b.n	8010ab0 <ADC_IRQHandler>
	...

08010ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010ab4:	b510      	push	{r4, lr}
 8010ab6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010ab8:	4b0e      	ldr	r3, [pc, #56]	; (8010af4 <HAL_InitTick+0x40>)
 8010aba:	781a      	ldrb	r2, [r3, #0]
 8010abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ac4:	4a0c      	ldr	r2, [pc, #48]	; (8010af8 <HAL_InitTick+0x44>)
 8010ac6:	6810      	ldr	r0, [r2, #0]
 8010ac8:	fbb0 f0f3 	udiv	r0, r0, r3
 8010acc:	f000 faa4 	bl	8011018 <HAL_SYSTICK_Config>
 8010ad0:	b968      	cbnz	r0, 8010aee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010ad2:	2c0f      	cmp	r4, #15
 8010ad4:	d901      	bls.n	8010ada <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	e00a      	b.n	8010af0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010ada:	2200      	movs	r2, #0
 8010adc:	4621      	mov	r1, r4
 8010ade:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae2:	f000 fa61 	bl	8010fa8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010ae6:	4b05      	ldr	r3, [pc, #20]	; (8010afc <HAL_InitTick+0x48>)
 8010ae8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010aea:	2000      	movs	r0, #0
 8010aec:	e000      	b.n	8010af0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8010aee:	2001      	movs	r0, #1
}
 8010af0:	bd10      	pop	{r4, pc}
 8010af2:	bf00      	nop
 8010af4:	20000004 	.word	0x20000004
 8010af8:	20000000 	.word	0x20000000
 8010afc:	20000008 	.word	0x20000008

08010b00 <HAL_Init>:
{
 8010b00:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010b02:	4b0b      	ldr	r3, [pc, #44]	; (8010b30 <HAL_Init+0x30>)
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010b12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010b1a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010b1c:	2003      	movs	r0, #3
 8010b1e:	f000 fa31 	bl	8010f84 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b22:	2000      	movs	r0, #0
 8010b24:	f7ff ffc6 	bl	8010ab4 <HAL_InitTick>
  HAL_MspInit();
 8010b28:	f7ff fef4 	bl	8010914 <HAL_MspInit>
}
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	bd08      	pop	{r3, pc}
 8010b30:	40023c00 	.word	0x40023c00

08010b34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8010b34:	4a03      	ldr	r2, [pc, #12]	; (8010b44 <HAL_IncTick+0x10>)
 8010b36:	6811      	ldr	r1, [r2, #0]
 8010b38:	4b03      	ldr	r3, [pc, #12]	; (8010b48 <HAL_IncTick+0x14>)
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	440b      	add	r3, r1
 8010b3e:	6013      	str	r3, [r2, #0]
}
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	20000120 	.word	0x20000120
 8010b48:	20000004 	.word	0x20000004

08010b4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010b4c:	4b01      	ldr	r3, [pc, #4]	; (8010b54 <HAL_GetTick+0x8>)
 8010b4e:	6818      	ldr	r0, [r3, #0]
}
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	20000120 	.word	0x20000120

08010b58 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	f000 80a1 	beq.w	8010ca0 <HAL_CAN_Init+0x148>
{
 8010b5e:	b538      	push	{r3, r4, r5, lr}
 8010b60:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8010b62:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010b66:	b1d3      	cbz	r3, 8010b9e <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8010b68:	6822      	ldr	r2, [r4, #0]
 8010b6a:	6813      	ldr	r3, [r2, #0]
 8010b6c:	f023 0302 	bic.w	r3, r3, #2
 8010b70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010b72:	f7ff ffeb 	bl	8010b4c <HAL_GetTick>
 8010b76:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010b78:	6823      	ldr	r3, [r4, #0]
 8010b7a:	685a      	ldr	r2, [r3, #4]
 8010b7c:	f012 0f02 	tst.w	r2, #2
 8010b80:	d010      	beq.n	8010ba4 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010b82:	f7ff ffe3 	bl	8010b4c <HAL_GetTick>
 8010b86:	1b40      	subs	r0, r0, r5
 8010b88:	280a      	cmp	r0, #10
 8010b8a:	d9f5      	bls.n	8010b78 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b92:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010b94:	2305      	movs	r3, #5
 8010b96:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8010b9a:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8010b9c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8010b9e:	f7ff fed5 	bl	801094c <HAL_CAN_MspInit>
 8010ba2:	e7e1      	b.n	8010b68 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	f042 0201 	orr.w	r2, r2, #1
 8010baa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010bac:	f7ff ffce 	bl	8010b4c <HAL_GetTick>
 8010bb0:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	685a      	ldr	r2, [r3, #4]
 8010bb6:	f012 0f01 	tst.w	r2, #1
 8010bba:	d10d      	bne.n	8010bd8 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010bbc:	f7ff ffc6 	bl	8010b4c <HAL_GetTick>
 8010bc0:	1b40      	subs	r0, r0, r5
 8010bc2:	280a      	cmp	r0, #10
 8010bc4:	d9f5      	bls.n	8010bb2 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010bcc:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8010bce:	2305      	movs	r3, #5
 8010bd0:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8010bd4:	2001      	movs	r0, #1
 8010bd6:	e7e1      	b.n	8010b9c <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010bd8:	7e22      	ldrb	r2, [r4, #24]
 8010bda:	2a01      	cmp	r2, #1
 8010bdc:	d03d      	beq.n	8010c5a <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010be4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8010be6:	7e63      	ldrb	r3, [r4, #25]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d03b      	beq.n	8010c64 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010bec:	6822      	ldr	r2, [r4, #0]
 8010bee:	6813      	ldr	r3, [r2, #0]
 8010bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bf4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8010bf6:	7ea3      	ldrb	r3, [r4, #26]
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d039      	beq.n	8010c70 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010bfc:	6822      	ldr	r2, [r4, #0]
 8010bfe:	6813      	ldr	r3, [r2, #0]
 8010c00:	f023 0320 	bic.w	r3, r3, #32
 8010c04:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8010c06:	7ee3      	ldrb	r3, [r4, #27]
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d037      	beq.n	8010c7c <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010c0c:	6822      	ldr	r2, [r4, #0]
 8010c0e:	6813      	ldr	r3, [r2, #0]
 8010c10:	f043 0310 	orr.w	r3, r3, #16
 8010c14:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8010c16:	7f23      	ldrb	r3, [r4, #28]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d035      	beq.n	8010c88 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010c1c:	6822      	ldr	r2, [r4, #0]
 8010c1e:	6813      	ldr	r3, [r2, #0]
 8010c20:	f023 0308 	bic.w	r3, r3, #8
 8010c24:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8010c26:	7f63      	ldrb	r3, [r4, #29]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d033      	beq.n	8010c94 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010c2c:	6822      	ldr	r2, [r4, #0]
 8010c2e:	6813      	ldr	r3, [r2, #0]
 8010c30:	f023 0304 	bic.w	r3, r3, #4
 8010c34:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8010c36:	68a3      	ldr	r3, [r4, #8]
 8010c38:	68e2      	ldr	r2, [r4, #12]
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	6922      	ldr	r2, [r4, #16]
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	6962      	ldr	r2, [r4, #20]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	6862      	ldr	r2, [r4, #4]
 8010c46:	3a01      	subs	r2, #1
 8010c48:	6821      	ldr	r1, [r4, #0]
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010c4e:	2000      	movs	r0, #0
 8010c50:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8010c52:	2301      	movs	r3, #1
 8010c54:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8010c58:	e7a0      	b.n	8010b9c <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010c60:	601a      	str	r2, [r3, #0]
 8010c62:	e7c0      	b.n	8010be6 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010c64:	6822      	ldr	r2, [r4, #0]
 8010c66:	6813      	ldr	r3, [r2, #0]
 8010c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c6c:	6013      	str	r3, [r2, #0]
 8010c6e:	e7c2      	b.n	8010bf6 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010c70:	6822      	ldr	r2, [r4, #0]
 8010c72:	6813      	ldr	r3, [r2, #0]
 8010c74:	f043 0320 	orr.w	r3, r3, #32
 8010c78:	6013      	str	r3, [r2, #0]
 8010c7a:	e7c4      	b.n	8010c06 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010c7c:	6822      	ldr	r2, [r4, #0]
 8010c7e:	6813      	ldr	r3, [r2, #0]
 8010c80:	f023 0310 	bic.w	r3, r3, #16
 8010c84:	6013      	str	r3, [r2, #0]
 8010c86:	e7c6      	b.n	8010c16 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010c88:	6822      	ldr	r2, [r4, #0]
 8010c8a:	6813      	ldr	r3, [r2, #0]
 8010c8c:	f043 0308 	orr.w	r3, r3, #8
 8010c90:	6013      	str	r3, [r2, #0]
 8010c92:	e7c8      	b.n	8010c26 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010c94:	6822      	ldr	r2, [r4, #0]
 8010c96:	6813      	ldr	r3, [r2, #0]
 8010c98:	f043 0304 	orr.w	r3, r3, #4
 8010c9c:	6013      	str	r3, [r2, #0]
 8010c9e:	e7ca      	b.n	8010c36 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8010ca0:	2001      	movs	r0, #1
}
 8010ca2:	4770      	bx	lr

08010ca4 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8010ca4:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d905      	bls.n	8010cbc <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010cb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010cb6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8010cb8:	2001      	movs	r0, #1
  }
}
 8010cba:	4770      	bx	lr
{
 8010cbc:	b530      	push	{r4, r5, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8010cbe:	4b46      	ldr	r3, [pc, #280]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010cc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010cc4:	f042 0201 	orr.w	r2, r2, #1
 8010cc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8010ccc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010cd0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8010cd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8010cd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010cdc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8010cde:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010ce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8010ce6:	694a      	ldr	r2, [r1, #20]
 8010ce8:	f002 021f 	and.w	r2, r2, #31
 8010cec:	2001      	movs	r0, #1
 8010cee:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8010cf2:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8010cf6:	ea6f 0c02 	mvn.w	ip, r2
 8010cfa:	ea20 0002 	bic.w	r0, r0, r2
 8010cfe:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8010d02:	69cb      	ldr	r3, [r1, #28]
 8010d04:	b9c3      	cbnz	r3, 8010d38 <HAL_CAN_ConfigFilter+0x94>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8010d06:	4b34      	ldr	r3, [pc, #208]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010d08:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8010d0c:	ea0c 0000 	and.w	r0, ip, r0
 8010d10:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010d14:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010d16:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010d18:	68cd      	ldr	r5, [r1, #12]
 8010d1a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010d1e:	3048      	adds	r0, #72	; 0x48
 8010d20:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010d24:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8010d26:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010d28:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010d2c:	694c      	ldr	r4, [r1, #20]
 8010d2e:	f104 0e48 	add.w	lr, r4, #72	; 0x48
 8010d32:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8010d36:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8010d38:	69cb      	ldr	r3, [r1, #28]
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d01e      	beq.n	8010d7c <HAL_CAN_ConfigFilter+0xd8>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8010d3e:	698b      	ldr	r3, [r1, #24]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d133      	bne.n	8010dac <HAL_CAN_ConfigFilter+0x108>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8010d44:	4824      	ldr	r0, [pc, #144]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010d46:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8010d4a:	ea0c 0303 	and.w	r3, ip, r3
 8010d4e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8010d52:	690b      	ldr	r3, [r1, #16]
 8010d54:	bb8b      	cbnz	r3, 8010dba <HAL_CAN_ConfigFilter+0x116>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8010d56:	4820      	ldr	r0, [pc, #128]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010d58:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8010d5c:	ea0c 0303 	and.w	r3, ip, r3
 8010d60:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8010d64:	6a0b      	ldr	r3, [r1, #32]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d02e      	beq.n	8010dc8 <HAL_CAN_ConfigFilter+0x124>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8010d6a:	4a1b      	ldr	r2, [pc, #108]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010d6c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8010d70:	f023 0301 	bic.w	r3, r3, #1
 8010d74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8010d78:	2000      	movs	r0, #0
}
 8010d7a:	bd30      	pop	{r4, r5, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8010d7c:	4b16      	ldr	r3, [pc, #88]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010d7e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8010d82:	4310      	orrs	r0, r2
 8010d84:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010d88:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010d8a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8010d8c:	680d      	ldr	r5, [r1, #0]
 8010d8e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010d92:	3048      	adds	r0, #72	; 0x48
 8010d94:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8010d98:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010d9a:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010d9c:	688d      	ldr	r5, [r1, #8]
 8010d9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010da2:	3448      	adds	r4, #72	; 0x48
 8010da4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010da8:	6058      	str	r0, [r3, #4]
 8010daa:	e7c8      	b.n	8010d3e <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8010dac:	480a      	ldr	r0, [pc, #40]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010dae:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8010db2:	4313      	orrs	r3, r2
 8010db4:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8010db8:	e7cb      	b.n	8010d52 <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8010dba:	4807      	ldr	r0, [pc, #28]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010dbc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8010dc6:	e7cd      	b.n	8010d64 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8010dc8:	4903      	ldr	r1, [pc, #12]	; (8010dd8 <HAL_CAN_ConfigFilter+0x134>)
 8010dca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
 8010dd4:	e7c9      	b.n	8010d6a <HAL_CAN_ConfigFilter+0xc6>
 8010dd6:	bf00      	nop
 8010dd8:	40006400 	.word	0x40006400

08010ddc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8010ddc:	b570      	push	{r4, r5, r6, lr}
 8010dde:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8010de0:	f890 5020 	ldrb.w	r5, [r0, #32]
 8010de4:	b2ed      	uxtb	r5, r5
 8010de6:	2d01      	cmp	r5, #1
 8010de8:	d006      	beq.n	8010df8 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8010dea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010df0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8010df2:	2501      	movs	r5, #1
  }
}
 8010df4:	4628      	mov	r0, r5
 8010df6:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8010df8:	2302      	movs	r3, #2
 8010dfa:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010dfe:	6802      	ldr	r2, [r0, #0]
 8010e00:	6813      	ldr	r3, [r2, #0]
 8010e02:	f023 0301 	bic.w	r3, r3, #1
 8010e06:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8010e08:	f7ff fea0 	bl	8010b4c <HAL_GetTick>
 8010e0c:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8010e0e:	6823      	ldr	r3, [r4, #0]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	f013 0f01 	tst.w	r3, #1
 8010e16:	d00c      	beq.n	8010e32 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010e18:	f7ff fe98 	bl	8010b4c <HAL_GetTick>
 8010e1c:	1b83      	subs	r3, r0, r6
 8010e1e:	2b0a      	cmp	r3, #10
 8010e20:	d9f5      	bls.n	8010e0e <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e28:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8010e2a:	2305      	movs	r3, #5
 8010e2c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8010e30:	e7e0      	b.n	8010df4 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010e32:	2500      	movs	r5, #0
 8010e34:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8010e36:	e7dd      	b.n	8010df4 <HAL_CAN_Start+0x18>

08010e38 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8010e38:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8010e3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e40:	fa5f fc8c 	uxtb.w	ip, ip
 8010e44:	f1bc 0f01 	cmp.w	ip, #1
 8010e48:	f200 8095 	bhi.w	8010f76 <HAL_CAN_GetRxMessage+0x13e>
{
 8010e4c:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010e4e:	b951      	cbnz	r1, 8010e66 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8010e50:	6804      	ldr	r4, [r0, #0]
 8010e52:	68e4      	ldr	r4, [r4, #12]
 8010e54:	f014 0f03 	tst.w	r4, #3
 8010e58:	d110      	bne.n	8010e7c <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010e5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010e60:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8010e62:	2001      	movs	r0, #1
 8010e64:	e077      	b.n	8010f56 <HAL_CAN_GetRxMessage+0x11e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8010e66:	6804      	ldr	r4, [r0, #0]
 8010e68:	6924      	ldr	r4, [r4, #16]
 8010e6a:	f014 0f03 	tst.w	r4, #3
 8010e6e:	d105      	bne.n	8010e7c <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010e70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010e76:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8010e78:	2001      	movs	r0, #1
 8010e7a:	e06c      	b.n	8010f56 <HAL_CAN_GetRxMessage+0x11e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8010e7c:	f101 041b 	add.w	r4, r1, #27
 8010e80:	0124      	lsls	r4, r4, #4
 8010e82:	6805      	ldr	r5, [r0, #0]
 8010e84:	592c      	ldr	r4, [r5, r4]
 8010e86:	f004 0404 	and.w	r4, r4, #4
 8010e8a:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8010e8c:	2c00      	cmp	r4, #0
 8010e8e:	d164      	bne.n	8010f5a <HAL_CAN_GetRxMessage+0x122>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8010e90:	f101 041b 	add.w	r4, r1, #27
 8010e94:	0124      	lsls	r4, r4, #4
 8010e96:	6805      	ldr	r5, [r0, #0]
 8010e98:	592c      	ldr	r4, [r5, r4]
 8010e9a:	0d64      	lsrs	r4, r4, #21
 8010e9c:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8010e9e:	6804      	ldr	r4, [r0, #0]
 8010ea0:	f101 0c1b 	add.w	ip, r1, #27
 8010ea4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8010ea8:	f854 400c 	ldr.w	r4, [r4, ip]
 8010eac:	f004 0402 	and.w	r4, r4, #2
 8010eb0:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8010eb2:	6804      	ldr	r4, [r0, #0]
 8010eb4:	4464      	add	r4, ip
 8010eb6:	6864      	ldr	r4, [r4, #4]
 8010eb8:	f004 040f 	and.w	r4, r4, #15
 8010ebc:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8010ebe:	6804      	ldr	r4, [r0, #0]
 8010ec0:	4464      	add	r4, ip
 8010ec2:	6864      	ldr	r4, [r4, #4]
 8010ec4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8010ec8:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8010eca:	6804      	ldr	r4, [r0, #0]
 8010ecc:	4464      	add	r4, ip
 8010ece:	6864      	ldr	r4, [r4, #4]
 8010ed0:	0c24      	lsrs	r4, r4, #16
 8010ed2:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8010ed4:	6802      	ldr	r2, [r0, #0]
 8010ed6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010eda:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8010ede:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8010ee0:	6802      	ldr	r2, [r0, #0]
 8010ee2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010ee6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8010eea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010eee:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8010ef0:	6802      	ldr	r2, [r0, #0]
 8010ef2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010ef6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8010efa:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8010efe:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8010f00:	6802      	ldr	r2, [r0, #0]
 8010f02:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010f06:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8010f0a:	0e12      	lsrs	r2, r2, #24
 8010f0c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8010f0e:	6802      	ldr	r2, [r0, #0]
 8010f10:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010f14:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8010f18:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8010f1a:	6802      	ldr	r2, [r0, #0]
 8010f1c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010f20:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8010f24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010f28:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8010f2a:	6802      	ldr	r2, [r0, #0]
 8010f2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010f30:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8010f34:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8010f38:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8010f3a:	6802      	ldr	r2, [r0, #0]
 8010f3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010f40:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8010f44:	0e12      	lsrs	r2, r2, #24
 8010f46:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010f48:	b979      	cbnz	r1, 8010f6a <HAL_CAN_GetRxMessage+0x132>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8010f4a:	6802      	ldr	r2, [r0, #0]
 8010f4c:	68d3      	ldr	r3, [r2, #12]
 8010f4e:	f043 0320 	orr.w	r3, r3, #32
 8010f52:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8010f54:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8010f56:	bc30      	pop	{r4, r5}
 8010f58:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8010f5a:	f101 041b 	add.w	r4, r1, #27
 8010f5e:	0124      	lsls	r4, r4, #4
 8010f60:	6805      	ldr	r5, [r0, #0]
 8010f62:	592c      	ldr	r4, [r5, r4]
 8010f64:	08e4      	lsrs	r4, r4, #3
 8010f66:	6054      	str	r4, [r2, #4]
 8010f68:	e799      	b.n	8010e9e <HAL_CAN_GetRxMessage+0x66>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8010f6a:	6802      	ldr	r2, [r0, #0]
 8010f6c:	6913      	ldr	r3, [r2, #16]
 8010f6e:	f043 0320 	orr.w	r3, r3, #32
 8010f72:	6113      	str	r3, [r2, #16]
 8010f74:	e7ee      	b.n	8010f54 <HAL_CAN_GetRxMessage+0x11c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010f76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010f7c:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8010f7e:	2001      	movs	r0, #1
}
 8010f80:	4770      	bx	lr
	...

08010f84 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010f84:	4a07      	ldr	r2, [pc, #28]	; (8010fa4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8010f86:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010f88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010f8c:	041b      	lsls	r3, r3, #16
 8010f8e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010f90:	0200      	lsls	r0, r0, #8
 8010f92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010f96:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8010f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8010fa0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8010fa2:	4770      	bx	lr
 8010fa4:	e000ed00 	.word	0xe000ed00

08010fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010fa8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010faa:	4b19      	ldr	r3, [pc, #100]	; (8011010 <HAL_NVIC_SetPriority+0x68>)
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010fb2:	f1c3 0c07 	rsb	ip, r3, #7
 8010fb6:	f1bc 0f04 	cmp.w	ip, #4
 8010fba:	bf28      	it	cs
 8010fbc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010fc0:	f103 0e04 	add.w	lr, r3, #4
 8010fc4:	f1be 0f06 	cmp.w	lr, #6
 8010fc8:	d918      	bls.n	8010ffc <HAL_NVIC_SetPriority+0x54>
 8010fca:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010fcc:	f04f 3eff 	mov.w	lr, #4294967295
 8010fd0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8010fd4:	ea21 010c 	bic.w	r1, r1, ip
 8010fd8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010fda:	fa0e fe03 	lsl.w	lr, lr, r3
 8010fde:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010fe2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	db0b      	blt.n	8011000 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fe8:	0112      	lsls	r2, r2, #4
 8010fea:	b2d2      	uxtb	r2, r2
 8010fec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010ff0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8010ff4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8010ff8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	e7e5      	b.n	8010fcc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011000:	f000 000f 	and.w	r0, r0, #15
 8011004:	0112      	lsls	r2, r2, #4
 8011006:	b2d2      	uxtb	r2, r2
 8011008:	4b02      	ldr	r3, [pc, #8]	; (8011014 <HAL_NVIC_SetPriority+0x6c>)
 801100a:	541a      	strb	r2, [r3, r0]
 801100c:	e7f4      	b.n	8010ff8 <HAL_NVIC_SetPriority+0x50>
 801100e:	bf00      	nop
 8011010:	e000ed00 	.word	0xe000ed00
 8011014:	e000ed14 	.word	0xe000ed14

08011018 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011018:	3801      	subs	r0, #1
 801101a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801101e:	d20b      	bcs.n	8011038 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011020:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011024:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011026:	4a05      	ldr	r2, [pc, #20]	; (801103c <HAL_SYSTICK_Config+0x24>)
 8011028:	21f0      	movs	r1, #240	; 0xf0
 801102a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801102e:	2000      	movs	r0, #0
 8011030:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011032:	2207      	movs	r2, #7
 8011034:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011036:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8011038:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 801103a:	4770      	bx	lr
 801103c:	e000ed00 	.word	0xe000ed00

08011040 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011040:	2300      	movs	r3, #0
 8011042:	2b0f      	cmp	r3, #15
 8011044:	f200 80da 	bhi.w	80111fc <HAL_GPIO_Init+0x1bc>
{
 8011048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104a:	b083      	sub	sp, #12
 801104c:	e03a      	b.n	80110c4 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801104e:	2207      	movs	r2, #7
 8011050:	e000      	b.n	8011054 <HAL_GPIO_Init+0x14>
 8011052:	2200      	movs	r2, #0
 8011054:	40aa      	lsls	r2, r5
 8011056:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011058:	3402      	adds	r4, #2
 801105a:	4d69      	ldr	r5, [pc, #420]	; (8011200 <HAL_GPIO_Init+0x1c0>)
 801105c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011060:	4a68      	ldr	r2, [pc, #416]	; (8011204 <HAL_GPIO_Init+0x1c4>)
 8011062:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8011064:	ea6f 020c 	mvn.w	r2, ip
 8011068:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801106c:	684e      	ldr	r6, [r1, #4]
 801106e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8011072:	d001      	beq.n	8011078 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8011074:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8011078:	4c62      	ldr	r4, [pc, #392]	; (8011204 <HAL_GPIO_Init+0x1c4>)
 801107a:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 801107c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 801107e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011082:	684e      	ldr	r6, [r1, #4]
 8011084:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8011088:	d001      	beq.n	801108e <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 801108a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 801108e:	4c5d      	ldr	r4, [pc, #372]	; (8011204 <HAL_GPIO_Init+0x1c4>)
 8011090:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011092:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8011094:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011098:	684e      	ldr	r6, [r1, #4]
 801109a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 801109e:	d001      	beq.n	80110a4 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80110a0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80110a4:	4c57      	ldr	r4, [pc, #348]	; (8011204 <HAL_GPIO_Init+0x1c4>)
 80110a6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80110a8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80110aa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80110ac:	684d      	ldr	r5, [r1, #4]
 80110ae:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80110b2:	d001      	beq.n	80110b8 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80110b4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80110b8:	4c52      	ldr	r4, [pc, #328]	; (8011204 <HAL_GPIO_Init+0x1c4>)
 80110ba:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80110bc:	3301      	adds	r3, #1
 80110be:	2b0f      	cmp	r3, #15
 80110c0:	f200 809a 	bhi.w	80111f8 <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 80110c4:	2201      	movs	r2, #1
 80110c6:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80110c8:	680c      	ldr	r4, [r1, #0]
 80110ca:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80110ce:	ea32 0404 	bics.w	r4, r2, r4
 80110d2:	d1f3      	bne.n	80110bc <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80110d4:	684c      	ldr	r4, [r1, #4]
 80110d6:	1e65      	subs	r5, r4, #1
 80110d8:	2d01      	cmp	r5, #1
 80110da:	d903      	bls.n	80110e4 <HAL_GPIO_Init+0xa4>
 80110dc:	2c11      	cmp	r4, #17
 80110de:	d001      	beq.n	80110e4 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80110e0:	2c12      	cmp	r4, #18
 80110e2:	d112      	bne.n	801110a <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 80110e4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80110e6:	005e      	lsls	r6, r3, #1
 80110e8:	2403      	movs	r4, #3
 80110ea:	40b4      	lsls	r4, r6
 80110ec:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80110f0:	68cc      	ldr	r4, [r1, #12]
 80110f2:	40b4      	lsls	r4, r6
 80110f4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80110f6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80110f8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80110fa:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80110fe:	684a      	ldr	r2, [r1, #4]
 8011100:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8011104:	409a      	lsls	r2, r3
 8011106:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8011108:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 801110a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801110c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8011110:	2203      	movs	r2, #3
 8011112:	fa02 f20e 	lsl.w	r2, r2, lr
 8011116:	43d4      	mvns	r4, r2
 8011118:	ea25 0502 	bic.w	r5, r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801111c:	688a      	ldr	r2, [r1, #8]
 801111e:	fa02 f20e 	lsl.w	r2, r2, lr
 8011122:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8011124:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011126:	684a      	ldr	r2, [r1, #4]
 8011128:	2a02      	cmp	r2, #2
 801112a:	d001      	beq.n	8011130 <HAL_GPIO_Init+0xf0>
 801112c:	2a12      	cmp	r2, #18
 801112e:	d10f      	bne.n	8011150 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8011130:	08dd      	lsrs	r5, r3, #3
 8011132:	3508      	adds	r5, #8
 8011134:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011138:	f003 0607 	and.w	r6, r3, #7
 801113c:	00b6      	lsls	r6, r6, #2
 801113e:	220f      	movs	r2, #15
 8011140:	40b2      	lsls	r2, r6
 8011142:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011146:	690a      	ldr	r2, [r1, #16]
 8011148:	40b2      	lsls	r2, r6
 801114a:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 801114c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8011150:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011152:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011154:	684a      	ldr	r2, [r1, #4]
 8011156:	f002 0203 	and.w	r2, r2, #3
 801115a:	fa02 f20e 	lsl.w	r2, r2, lr
 801115e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8011160:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011162:	684a      	ldr	r2, [r1, #4]
 8011164:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8011168:	d0a8      	beq.n	80110bc <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801116a:	2200      	movs	r2, #0
 801116c:	9201      	str	r2, [sp, #4]
 801116e:	4a26      	ldr	r2, [pc, #152]	; (8011208 <HAL_GPIO_Init+0x1c8>)
 8011170:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8011172:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8011176:	6454      	str	r4, [r2, #68]	; 0x44
 8011178:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801117a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801117e:	9201      	str	r2, [sp, #4]
 8011180:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8011182:	089c      	lsrs	r4, r3, #2
 8011184:	1ca5      	adds	r5, r4, #2
 8011186:	4a1e      	ldr	r2, [pc, #120]	; (8011200 <HAL_GPIO_Init+0x1c0>)
 8011188:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801118c:	f003 0503 	and.w	r5, r3, #3
 8011190:	00ad      	lsls	r5, r5, #2
 8011192:	220f      	movs	r2, #15
 8011194:	40aa      	lsls	r2, r5
 8011196:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801119a:	4a1c      	ldr	r2, [pc, #112]	; (801120c <HAL_GPIO_Init+0x1cc>)
 801119c:	4290      	cmp	r0, r2
 801119e:	f43f af58 	beq.w	8011052 <HAL_GPIO_Init+0x12>
 80111a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111a6:	4290      	cmp	r0, r2
 80111a8:	d01a      	beq.n	80111e0 <HAL_GPIO_Init+0x1a0>
 80111aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111ae:	4290      	cmp	r0, r2
 80111b0:	d018      	beq.n	80111e4 <HAL_GPIO_Init+0x1a4>
 80111b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111b6:	4290      	cmp	r0, r2
 80111b8:	d016      	beq.n	80111e8 <HAL_GPIO_Init+0x1a8>
 80111ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111be:	4290      	cmp	r0, r2
 80111c0:	d014      	beq.n	80111ec <HAL_GPIO_Init+0x1ac>
 80111c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111c6:	4290      	cmp	r0, r2
 80111c8:	d012      	beq.n	80111f0 <HAL_GPIO_Init+0x1b0>
 80111ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111ce:	4290      	cmp	r0, r2
 80111d0:	d010      	beq.n	80111f4 <HAL_GPIO_Init+0x1b4>
 80111d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111d6:	4290      	cmp	r0, r2
 80111d8:	f43f af39 	beq.w	801104e <HAL_GPIO_Init+0xe>
 80111dc:	2208      	movs	r2, #8
 80111de:	e739      	b.n	8011054 <HAL_GPIO_Init+0x14>
 80111e0:	2201      	movs	r2, #1
 80111e2:	e737      	b.n	8011054 <HAL_GPIO_Init+0x14>
 80111e4:	2202      	movs	r2, #2
 80111e6:	e735      	b.n	8011054 <HAL_GPIO_Init+0x14>
 80111e8:	2203      	movs	r2, #3
 80111ea:	e733      	b.n	8011054 <HAL_GPIO_Init+0x14>
 80111ec:	2204      	movs	r2, #4
 80111ee:	e731      	b.n	8011054 <HAL_GPIO_Init+0x14>
 80111f0:	2205      	movs	r2, #5
 80111f2:	e72f      	b.n	8011054 <HAL_GPIO_Init+0x14>
 80111f4:	2206      	movs	r2, #6
 80111f6:	e72d      	b.n	8011054 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80111f8:	b003      	add	sp, #12
 80111fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	40013800 	.word	0x40013800
 8011204:	40013c00 	.word	0x40013c00
 8011208:	40023800 	.word	0x40023800
 801120c:	40020000 	.word	0x40020000

08011210 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011210:	b10a      	cbz	r2, 8011216 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011212:	6181      	str	r1, [r0, #24]
 8011214:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011216:	0409      	lsls	r1, r1, #16
 8011218:	6181      	str	r1, [r0, #24]
  }
}
 801121a:	4770      	bx	lr

0801121c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801121c:	2800      	cmp	r0, #0
 801121e:	f000 81da 	beq.w	80115d6 <HAL_RCC_OscConfig+0x3ba>
{
 8011222:	b570      	push	{r4, r5, r6, lr}
 8011224:	b082      	sub	sp, #8
 8011226:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011228:	6803      	ldr	r3, [r0, #0]
 801122a:	f013 0f01 	tst.w	r3, #1
 801122e:	d03b      	beq.n	80112a8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011230:	4b9f      	ldr	r3, [pc, #636]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	f003 030c 	and.w	r3, r3, #12
 8011238:	2b04      	cmp	r3, #4
 801123a:	d02c      	beq.n	8011296 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801123c:	4b9c      	ldr	r3, [pc, #624]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 801123e:	689b      	ldr	r3, [r3, #8]
 8011240:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011244:	2b08      	cmp	r3, #8
 8011246:	d021      	beq.n	801128c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011248:	6863      	ldr	r3, [r4, #4]
 801124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801124e:	d04f      	beq.n	80112f0 <HAL_RCC_OscConfig+0xd4>
 8011250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011254:	d052      	beq.n	80112fc <HAL_RCC_OscConfig+0xe0>
 8011256:	4b96      	ldr	r3, [pc, #600]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801125e:	601a      	str	r2, [r3, #0]
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011266:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011268:	6863      	ldr	r3, [r4, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d050      	beq.n	8011310 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801126e:	f7ff fc6d 	bl	8010b4c <HAL_GetTick>
 8011272:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011274:	4b8e      	ldr	r3, [pc, #568]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 801127c:	d114      	bne.n	80112a8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801127e:	f7ff fc65 	bl	8010b4c <HAL_GetTick>
 8011282:	1b40      	subs	r0, r0, r5
 8011284:	2864      	cmp	r0, #100	; 0x64
 8011286:	d9f5      	bls.n	8011274 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8011288:	2003      	movs	r0, #3
 801128a:	e1ab      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801128c:	4b88      	ldr	r3, [pc, #544]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011294:	d0d8      	beq.n	8011248 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011296:	4b86      	ldr	r3, [pc, #536]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 801129e:	d003      	beq.n	80112a8 <HAL_RCC_OscConfig+0x8c>
 80112a0:	6863      	ldr	r3, [r4, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f000 8199 	beq.w	80115da <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112a8:	6823      	ldr	r3, [r4, #0]
 80112aa:	f013 0f02 	tst.w	r3, #2
 80112ae:	d054      	beq.n	801135a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80112b0:	4b7f      	ldr	r3, [pc, #508]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	f013 0f0c 	tst.w	r3, #12
 80112b8:	d03e      	beq.n	8011338 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80112ba:	4b7d      	ldr	r3, [pc, #500]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80112bc:	689b      	ldr	r3, [r3, #8]
 80112be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80112c2:	2b08      	cmp	r3, #8
 80112c4:	d033      	beq.n	801132e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80112c6:	68e3      	ldr	r3, [r4, #12]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d068      	beq.n	801139e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80112cc:	4b79      	ldr	r3, [pc, #484]	; (80114b4 <HAL_RCC_OscConfig+0x298>)
 80112ce:	2201      	movs	r2, #1
 80112d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112d2:	f7ff fc3b 	bl	8010b4c <HAL_GetTick>
 80112d6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80112d8:	4b75      	ldr	r3, [pc, #468]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f013 0f02 	tst.w	r3, #2
 80112e0:	d154      	bne.n	801138c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80112e2:	f7ff fc33 	bl	8010b4c <HAL_GetTick>
 80112e6:	1b40      	subs	r0, r0, r5
 80112e8:	2802      	cmp	r0, #2
 80112ea:	d9f5      	bls.n	80112d8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80112ec:	2003      	movs	r0, #3
 80112ee:	e179      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80112f0:	4a6f      	ldr	r2, [pc, #444]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80112f2:	6813      	ldr	r3, [r2, #0]
 80112f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80112f8:	6013      	str	r3, [r2, #0]
 80112fa:	e7b5      	b.n	8011268 <HAL_RCC_OscConfig+0x4c>
 80112fc:	4b6c      	ldr	r3, [pc, #432]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011304:	601a      	str	r2, [r3, #0]
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801130c:	601a      	str	r2, [r3, #0]
 801130e:	e7ab      	b.n	8011268 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8011310:	f7ff fc1c 	bl	8010b4c <HAL_GetTick>
 8011314:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011316:	4b66      	ldr	r3, [pc, #408]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 801131e:	d0c3      	beq.n	80112a8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011320:	f7ff fc14 	bl	8010b4c <HAL_GetTick>
 8011324:	1b40      	subs	r0, r0, r5
 8011326:	2864      	cmp	r0, #100	; 0x64
 8011328:	d9f5      	bls.n	8011316 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 801132a:	2003      	movs	r0, #3
 801132c:	e15a      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801132e:	4b60      	ldr	r3, [pc, #384]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011336:	d1c6      	bne.n	80112c6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011338:	4b5d      	ldr	r3, [pc, #372]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f013 0f02 	tst.w	r3, #2
 8011340:	d003      	beq.n	801134a <HAL_RCC_OscConfig+0x12e>
 8011342:	68e3      	ldr	r3, [r4, #12]
 8011344:	2b01      	cmp	r3, #1
 8011346:	f040 814a 	bne.w	80115de <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801134a:	4a59      	ldr	r2, [pc, #356]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 801134c:	6813      	ldr	r3, [r2, #0]
 801134e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011352:	6921      	ldr	r1, [r4, #16]
 8011354:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011358:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	f013 0f08 	tst.w	r3, #8
 8011360:	d042      	beq.n	80113e8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011362:	6963      	ldr	r3, [r4, #20]
 8011364:	b36b      	cbz	r3, 80113c2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011366:	4b53      	ldr	r3, [pc, #332]	; (80114b4 <HAL_RCC_OscConfig+0x298>)
 8011368:	2201      	movs	r2, #1
 801136a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801136e:	f7ff fbed 	bl	8010b4c <HAL_GetTick>
 8011372:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011374:	4b4e      	ldr	r3, [pc, #312]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011378:	f013 0f02 	tst.w	r3, #2
 801137c:	d134      	bne.n	80113e8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801137e:	f7ff fbe5 	bl	8010b4c <HAL_GetTick>
 8011382:	1b40      	subs	r0, r0, r5
 8011384:	2802      	cmp	r0, #2
 8011386:	d9f5      	bls.n	8011374 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8011388:	2003      	movs	r0, #3
 801138a:	e12b      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801138c:	4a48      	ldr	r2, [pc, #288]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 801138e:	6813      	ldr	r3, [r2, #0]
 8011390:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011394:	6921      	ldr	r1, [r4, #16]
 8011396:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801139a:	6013      	str	r3, [r2, #0]
 801139c:	e7dd      	b.n	801135a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 801139e:	4b45      	ldr	r3, [pc, #276]	; (80114b4 <HAL_RCC_OscConfig+0x298>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80113a4:	f7ff fbd2 	bl	8010b4c <HAL_GetTick>
 80113a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113aa:	4b41      	ldr	r3, [pc, #260]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f013 0f02 	tst.w	r3, #2
 80113b2:	d0d2      	beq.n	801135a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80113b4:	f7ff fbca 	bl	8010b4c <HAL_GetTick>
 80113b8:	1b40      	subs	r0, r0, r5
 80113ba:	2802      	cmp	r0, #2
 80113bc:	d9f5      	bls.n	80113aa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80113be:	2003      	movs	r0, #3
 80113c0:	e110      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80113c2:	4b3c      	ldr	r3, [pc, #240]	; (80114b4 <HAL_RCC_OscConfig+0x298>)
 80113c4:	2200      	movs	r2, #0
 80113c6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80113ca:	f7ff fbbf 	bl	8010b4c <HAL_GetTick>
 80113ce:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80113d0:	4b37      	ldr	r3, [pc, #220]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80113d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113d4:	f013 0f02 	tst.w	r3, #2
 80113d8:	d006      	beq.n	80113e8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80113da:	f7ff fbb7 	bl	8010b4c <HAL_GetTick>
 80113de:	1b40      	subs	r0, r0, r5
 80113e0:	2802      	cmp	r0, #2
 80113e2:	d9f5      	bls.n	80113d0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80113e4:	2003      	movs	r0, #3
 80113e6:	e0fd      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80113e8:	6823      	ldr	r3, [r4, #0]
 80113ea:	f013 0f04 	tst.w	r3, #4
 80113ee:	d077      	beq.n	80114e0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80113f0:	4b2f      	ldr	r3, [pc, #188]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 80113f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80113f8:	d133      	bne.n	8011462 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80113fa:	2300      	movs	r3, #0
 80113fc:	9301      	str	r3, [sp, #4]
 80113fe:	4b2c      	ldr	r3, [pc, #176]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011402:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011406:	641a      	str	r2, [r3, #64]	; 0x40
 8011408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801140e:	9301      	str	r3, [sp, #4]
 8011410:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8011412:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011414:	4b28      	ldr	r3, [pc, #160]	; (80114b8 <HAL_RCC_OscConfig+0x29c>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f413 7f80 	tst.w	r3, #256	; 0x100
 801141c:	d023      	beq.n	8011466 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801141e:	68a3      	ldr	r3, [r4, #8]
 8011420:	2b01      	cmp	r3, #1
 8011422:	d034      	beq.n	801148e <HAL_RCC_OscConfig+0x272>
 8011424:	2b05      	cmp	r3, #5
 8011426:	d038      	beq.n	801149a <HAL_RCC_OscConfig+0x27e>
 8011428:	4b21      	ldr	r3, [pc, #132]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 801142a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801142c:	f022 0201 	bic.w	r2, r2, #1
 8011430:	671a      	str	r2, [r3, #112]	; 0x70
 8011432:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011434:	f022 0204 	bic.w	r2, r2, #4
 8011438:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801143a:	68a3      	ldr	r3, [r4, #8]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d03d      	beq.n	80114bc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011440:	f7ff fb84 	bl	8010b4c <HAL_GetTick>
 8011444:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011446:	4b1a      	ldr	r3, [pc, #104]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801144a:	f013 0f02 	tst.w	r3, #2
 801144e:	d146      	bne.n	80114de <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011450:	f7ff fb7c 	bl	8010b4c <HAL_GetTick>
 8011454:	1b80      	subs	r0, r0, r6
 8011456:	f241 3388 	movw	r3, #5000	; 0x1388
 801145a:	4298      	cmp	r0, r3
 801145c:	d9f3      	bls.n	8011446 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 801145e:	2003      	movs	r0, #3
 8011460:	e0c0      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 8011462:	2500      	movs	r5, #0
 8011464:	e7d6      	b.n	8011414 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011466:	4a14      	ldr	r2, [pc, #80]	; (80114b8 <HAL_RCC_OscConfig+0x29c>)
 8011468:	6813      	ldr	r3, [r2, #0]
 801146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801146e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011470:	f7ff fb6c 	bl	8010b4c <HAL_GetTick>
 8011474:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011476:	4b10      	ldr	r3, [pc, #64]	; (80114b8 <HAL_RCC_OscConfig+0x29c>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f413 7f80 	tst.w	r3, #256	; 0x100
 801147e:	d1ce      	bne.n	801141e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011480:	f7ff fb64 	bl	8010b4c <HAL_GetTick>
 8011484:	1b80      	subs	r0, r0, r6
 8011486:	2802      	cmp	r0, #2
 8011488:	d9f5      	bls.n	8011476 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 801148a:	2003      	movs	r0, #3
 801148c:	e0aa      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801148e:	4a08      	ldr	r2, [pc, #32]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 8011490:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8011492:	f043 0301 	orr.w	r3, r3, #1
 8011496:	6713      	str	r3, [r2, #112]	; 0x70
 8011498:	e7cf      	b.n	801143a <HAL_RCC_OscConfig+0x21e>
 801149a:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <HAL_RCC_OscConfig+0x294>)
 801149c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801149e:	f042 0204 	orr.w	r2, r2, #4
 80114a2:	671a      	str	r2, [r3, #112]	; 0x70
 80114a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80114a6:	f042 0201 	orr.w	r2, r2, #1
 80114aa:	671a      	str	r2, [r3, #112]	; 0x70
 80114ac:	e7c5      	b.n	801143a <HAL_RCC_OscConfig+0x21e>
 80114ae:	bf00      	nop
 80114b0:	40023800 	.word	0x40023800
 80114b4:	42470000 	.word	0x42470000
 80114b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80114bc:	f7ff fb46 	bl	8010b4c <HAL_GetTick>
 80114c0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114c2:	4b4f      	ldr	r3, [pc, #316]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 80114c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c6:	f013 0f02 	tst.w	r3, #2
 80114ca:	d008      	beq.n	80114de <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114cc:	f7ff fb3e 	bl	8010b4c <HAL_GetTick>
 80114d0:	1b80      	subs	r0, r0, r6
 80114d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80114d6:	4298      	cmp	r0, r3
 80114d8:	d9f3      	bls.n	80114c2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80114da:	2003      	movs	r0, #3
 80114dc:	e082      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80114de:	b9e5      	cbnz	r5, 801151a <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80114e0:	69a3      	ldr	r3, [r4, #24]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d07d      	beq.n	80115e2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80114e6:	4a46      	ldr	r2, [pc, #280]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 80114e8:	6892      	ldr	r2, [r2, #8]
 80114ea:	f002 020c 	and.w	r2, r2, #12
 80114ee:	2a08      	cmp	r2, #8
 80114f0:	d051      	beq.n	8011596 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80114f2:	2b02      	cmp	r3, #2
 80114f4:	d017      	beq.n	8011526 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80114f6:	4b43      	ldr	r3, [pc, #268]	; (8011604 <HAL_RCC_OscConfig+0x3e8>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80114fc:	f7ff fb26 	bl	8010b4c <HAL_GetTick>
 8011500:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011502:	4b3f      	ldr	r3, [pc, #252]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801150a:	d042      	beq.n	8011592 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801150c:	f7ff fb1e 	bl	8010b4c <HAL_GetTick>
 8011510:	1b00      	subs	r0, r0, r4
 8011512:	2802      	cmp	r0, #2
 8011514:	d9f5      	bls.n	8011502 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8011516:	2003      	movs	r0, #3
 8011518:	e064      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 801151a:	4a39      	ldr	r2, [pc, #228]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 801151c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801151e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011522:	6413      	str	r3, [r2, #64]	; 0x40
 8011524:	e7dc      	b.n	80114e0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8011526:	4b37      	ldr	r3, [pc, #220]	; (8011604 <HAL_RCC_OscConfig+0x3e8>)
 8011528:	2200      	movs	r2, #0
 801152a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 801152c:	f7ff fb0e 	bl	8010b4c <HAL_GetTick>
 8011530:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011532:	4b33      	ldr	r3, [pc, #204]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801153a:	d006      	beq.n	801154a <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801153c:	f7ff fb06 	bl	8010b4c <HAL_GetTick>
 8011540:	1b40      	subs	r0, r0, r5
 8011542:	2802      	cmp	r0, #2
 8011544:	d9f5      	bls.n	8011532 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8011546:	2003      	movs	r0, #3
 8011548:	e04c      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801154a:	69e3      	ldr	r3, [r4, #28]
 801154c:	6a22      	ldr	r2, [r4, #32]
 801154e:	4313      	orrs	r3, r2
 8011550:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011552:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011556:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011558:	0852      	lsrs	r2, r2, #1
 801155a:	3a01      	subs	r2, #1
 801155c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011560:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011562:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011566:	4a26      	ldr	r2, [pc, #152]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 8011568:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 801156a:	4b26      	ldr	r3, [pc, #152]	; (8011604 <HAL_RCC_OscConfig+0x3e8>)
 801156c:	2201      	movs	r2, #1
 801156e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8011570:	f7ff faec 	bl	8010b4c <HAL_GetTick>
 8011574:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011576:	4b22      	ldr	r3, [pc, #136]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801157e:	d106      	bne.n	801158e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011580:	f7ff fae4 	bl	8010b4c <HAL_GetTick>
 8011584:	1b00      	subs	r0, r0, r4
 8011586:	2802      	cmp	r0, #2
 8011588:	d9f5      	bls.n	8011576 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 801158a:	2003      	movs	r0, #3
 801158c:	e02a      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 801158e:	2000      	movs	r0, #0
 8011590:	e028      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
 8011592:	2000      	movs	r0, #0
 8011594:	e026      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011596:	2b01      	cmp	r3, #1
 8011598:	d026      	beq.n	80115e8 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 801159a:	4b19      	ldr	r3, [pc, #100]	; (8011600 <HAL_RCC_OscConfig+0x3e4>)
 801159c:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801159e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80115a2:	69e2      	ldr	r2, [r4, #28]
 80115a4:	4291      	cmp	r1, r2
 80115a6:	d121      	bne.n	80115ec <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80115a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80115ac:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80115ae:	428a      	cmp	r2, r1
 80115b0:	d11e      	bne.n	80115f0 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80115b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80115b4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80115b8:	401a      	ands	r2, r3
 80115ba:	428a      	cmp	r2, r1
 80115bc:	d11a      	bne.n	80115f4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80115be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80115c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80115c4:	428a      	cmp	r2, r1
 80115c6:	d117      	bne.n	80115f8 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80115c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80115cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d114      	bne.n	80115fc <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 80115d2:	2000      	movs	r0, #0
 80115d4:	e006      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80115d6:	2001      	movs	r0, #1
}
 80115d8:	4770      	bx	lr
        return HAL_ERROR;
 80115da:	2001      	movs	r0, #1
 80115dc:	e002      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 80115de:	2001      	movs	r0, #1
 80115e0:	e000      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80115e2:	2000      	movs	r0, #0
}
 80115e4:	b002      	add	sp, #8
 80115e6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80115e8:	2001      	movs	r0, #1
 80115ea:	e7fb      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 80115ec:	2001      	movs	r0, #1
 80115ee:	e7f9      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
 80115f0:	2001      	movs	r0, #1
 80115f2:	e7f7      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
 80115f4:	2001      	movs	r0, #1
 80115f6:	e7f5      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
 80115f8:	2001      	movs	r0, #1
 80115fa:	e7f3      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
 80115fc:	2001      	movs	r0, #1
 80115fe:	e7f1      	b.n	80115e4 <HAL_RCC_OscConfig+0x3c8>
 8011600:	40023800 	.word	0x40023800
 8011604:	42470000 	.word	0x42470000

08011608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011608:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801160a:	4b33      	ldr	r3, [pc, #204]	; (80116d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	f003 030c 	and.w	r3, r3, #12
 8011612:	2b04      	cmp	r3, #4
 8011614:	d05b      	beq.n	80116ce <HAL_RCC_GetSysClockFreq+0xc6>
 8011616:	2b08      	cmp	r3, #8
 8011618:	d15b      	bne.n	80116d2 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801161a:	4b2f      	ldr	r3, [pc, #188]	; (80116d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011628:	d02c      	beq.n	8011684 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801162a:	4b2b      	ldr	r3, [pc, #172]	; (80116d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 801162c:	6858      	ldr	r0, [r3, #4]
 801162e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8011632:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8011636:	ebbc 0c00 	subs.w	ip, ip, r0
 801163a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 801163e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8011642:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8011646:	ea4f 118c 	mov.w	r1, ip, lsl #6
 801164a:	ebb1 010c 	subs.w	r1, r1, ip
 801164e:	eb63 030e 	sbc.w	r3, r3, lr
 8011652:	00db      	lsls	r3, r3, #3
 8011654:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011658:	00c9      	lsls	r1, r1, #3
 801165a:	eb11 0c00 	adds.w	ip, r1, r0
 801165e:	f143 0300 	adc.w	r3, r3, #0
 8011662:	0259      	lsls	r1, r3, #9
 8011664:	2300      	movs	r3, #0
 8011666:	ea4f 204c 	mov.w	r0, ip, lsl #9
 801166a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 801166e:	f7fe fdab 	bl	80101c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011672:	4b19      	ldr	r3, [pc, #100]	; (80116d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801167a:	3301      	adds	r3, #1
 801167c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 801167e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8011682:	e027      	b.n	80116d4 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011684:	4b14      	ldr	r3, [pc, #80]	; (80116d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8011686:	6858      	ldr	r0, [r3, #4]
 8011688:	f3c0 1088 	ubfx	r0, r0, #6, #9
 801168c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8011690:	ebbc 0c00 	subs.w	ip, ip, r0
 8011694:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8011698:	ea4f 138e 	mov.w	r3, lr, lsl #6
 801169c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80116a0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80116a4:	ebb1 010c 	subs.w	r1, r1, ip
 80116a8:	eb63 030e 	sbc.w	r3, r3, lr
 80116ac:	00db      	lsls	r3, r3, #3
 80116ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80116b2:	00c9      	lsls	r1, r1, #3
 80116b4:	eb11 0c00 	adds.w	ip, r1, r0
 80116b8:	f143 0300 	adc.w	r3, r3, #0
 80116bc:	0299      	lsls	r1, r3, #10
 80116be:	2300      	movs	r3, #0
 80116c0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80116c4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80116c8:	f7fe fd7e 	bl	80101c8 <__aeabi_uldivmod>
 80116cc:	e7d1      	b.n	8011672 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80116ce:	4803      	ldr	r0, [pc, #12]	; (80116dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80116d0:	e000      	b.n	80116d4 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80116d2:	4803      	ldr	r0, [pc, #12]	; (80116e0 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80116d4:	bd08      	pop	{r3, pc}
 80116d6:	bf00      	nop
 80116d8:	40023800 	.word	0x40023800
 80116dc:	007a1200 	.word	0x007a1200
 80116e0:	00f42400 	.word	0x00f42400

080116e4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80116e4:	2800      	cmp	r0, #0
 80116e6:	f000 809b 	beq.w	8011820 <HAL_RCC_ClockConfig+0x13c>
{
 80116ea:	b570      	push	{r4, r5, r6, lr}
 80116ec:	460d      	mov	r5, r1
 80116ee:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80116f0:	4b4f      	ldr	r3, [pc, #316]	; (8011830 <HAL_RCC_ClockConfig+0x14c>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f003 0307 	and.w	r3, r3, #7
 80116f8:	428b      	cmp	r3, r1
 80116fa:	d208      	bcs.n	801170e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80116fc:	b2cb      	uxtb	r3, r1
 80116fe:	4a4c      	ldr	r2, [pc, #304]	; (8011830 <HAL_RCC_ClockConfig+0x14c>)
 8011700:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011702:	6813      	ldr	r3, [r2, #0]
 8011704:	f003 0307 	and.w	r3, r3, #7
 8011708:	428b      	cmp	r3, r1
 801170a:	f040 808b 	bne.w	8011824 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	f013 0f02 	tst.w	r3, #2
 8011714:	d017      	beq.n	8011746 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011716:	f013 0f04 	tst.w	r3, #4
 801171a:	d004      	beq.n	8011726 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801171c:	4a45      	ldr	r2, [pc, #276]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 801171e:	6893      	ldr	r3, [r2, #8]
 8011720:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011724:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011726:	6823      	ldr	r3, [r4, #0]
 8011728:	f013 0f08 	tst.w	r3, #8
 801172c:	d004      	beq.n	8011738 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801172e:	4a41      	ldr	r2, [pc, #260]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 8011730:	6893      	ldr	r3, [r2, #8]
 8011732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011736:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011738:	4a3e      	ldr	r2, [pc, #248]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 801173a:	6893      	ldr	r3, [r2, #8]
 801173c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011740:	68a1      	ldr	r1, [r4, #8]
 8011742:	430b      	orrs	r3, r1
 8011744:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	f013 0f01 	tst.w	r3, #1
 801174c:	d032      	beq.n	80117b4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801174e:	6863      	ldr	r3, [r4, #4]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d021      	beq.n	8011798 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011754:	1e9a      	subs	r2, r3, #2
 8011756:	2a01      	cmp	r2, #1
 8011758:	d925      	bls.n	80117a6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801175a:	4a36      	ldr	r2, [pc, #216]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 801175c:	6812      	ldr	r2, [r2, #0]
 801175e:	f012 0f02 	tst.w	r2, #2
 8011762:	d061      	beq.n	8011828 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011764:	4933      	ldr	r1, [pc, #204]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 8011766:	688a      	ldr	r2, [r1, #8]
 8011768:	f022 0203 	bic.w	r2, r2, #3
 801176c:	4313      	orrs	r3, r2
 801176e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8011770:	f7ff f9ec 	bl	8010b4c <HAL_GetTick>
 8011774:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011776:	4b2f      	ldr	r3, [pc, #188]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 8011778:	689b      	ldr	r3, [r3, #8]
 801177a:	f003 030c 	and.w	r3, r3, #12
 801177e:	6862      	ldr	r2, [r4, #4]
 8011780:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8011784:	d016      	beq.n	80117b4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011786:	f7ff f9e1 	bl	8010b4c <HAL_GetTick>
 801178a:	1b80      	subs	r0, r0, r6
 801178c:	f241 3388 	movw	r3, #5000	; 0x1388
 8011790:	4298      	cmp	r0, r3
 8011792:	d9f0      	bls.n	8011776 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8011794:	2003      	movs	r0, #3
 8011796:	e042      	b.n	801181e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011798:	4a26      	ldr	r2, [pc, #152]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 801179a:	6812      	ldr	r2, [r2, #0]
 801179c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80117a0:	d1e0      	bne.n	8011764 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80117a2:	2001      	movs	r0, #1
 80117a4:	e03b      	b.n	801181e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80117a6:	4a23      	ldr	r2, [pc, #140]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 80117a8:	6812      	ldr	r2, [r2, #0]
 80117aa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80117ae:	d1d9      	bne.n	8011764 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80117b0:	2001      	movs	r0, #1
 80117b2:	e034      	b.n	801181e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80117b4:	4b1e      	ldr	r3, [pc, #120]	; (8011830 <HAL_RCC_ClockConfig+0x14c>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f003 0307 	and.w	r3, r3, #7
 80117bc:	42ab      	cmp	r3, r5
 80117be:	d907      	bls.n	80117d0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80117c0:	b2ea      	uxtb	r2, r5
 80117c2:	4b1b      	ldr	r3, [pc, #108]	; (8011830 <HAL_RCC_ClockConfig+0x14c>)
 80117c4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f003 0307 	and.w	r3, r3, #7
 80117cc:	42ab      	cmp	r3, r5
 80117ce:	d12d      	bne.n	801182c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80117d0:	6823      	ldr	r3, [r4, #0]
 80117d2:	f013 0f04 	tst.w	r3, #4
 80117d6:	d006      	beq.n	80117e6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80117d8:	4a16      	ldr	r2, [pc, #88]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 80117da:	6893      	ldr	r3, [r2, #8]
 80117dc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80117e0:	68e1      	ldr	r1, [r4, #12]
 80117e2:	430b      	orrs	r3, r1
 80117e4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	f013 0f08 	tst.w	r3, #8
 80117ec:	d007      	beq.n	80117fe <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80117ee:	4a11      	ldr	r2, [pc, #68]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 80117f0:	6893      	ldr	r3, [r2, #8]
 80117f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80117f6:	6921      	ldr	r1, [r4, #16]
 80117f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80117fc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80117fe:	f7ff ff03 	bl	8011608 <HAL_RCC_GetSysClockFreq>
 8011802:	4b0c      	ldr	r3, [pc, #48]	; (8011834 <HAL_RCC_ClockConfig+0x150>)
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801180a:	4a0b      	ldr	r2, [pc, #44]	; (8011838 <HAL_RCC_ClockConfig+0x154>)
 801180c:	5cd3      	ldrb	r3, [r2, r3]
 801180e:	40d8      	lsrs	r0, r3
 8011810:	4b0a      	ldr	r3, [pc, #40]	; (801183c <HAL_RCC_ClockConfig+0x158>)
 8011812:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8011814:	4b0a      	ldr	r3, [pc, #40]	; (8011840 <HAL_RCC_ClockConfig+0x15c>)
 8011816:	6818      	ldr	r0, [r3, #0]
 8011818:	f7ff f94c 	bl	8010ab4 <HAL_InitTick>
  return HAL_OK;
 801181c:	2000      	movs	r0, #0
}
 801181e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011820:	2001      	movs	r0, #1
}
 8011822:	4770      	bx	lr
      return HAL_ERROR;
 8011824:	2001      	movs	r0, #1
 8011826:	e7fa      	b.n	801181e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8011828:	2001      	movs	r0, #1
 801182a:	e7f8      	b.n	801181e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 801182c:	2001      	movs	r0, #1
 801182e:	e7f6      	b.n	801181e <HAL_RCC_ClockConfig+0x13a>
 8011830:	40023c00 	.word	0x40023c00
 8011834:	40023800 	.word	0x40023800
 8011838:	08011ca8 	.word	0x08011ca8
 801183c:	20000000 	.word	0x20000000
 8011840:	20000008 	.word	0x20000008

08011844 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011844:	4b01      	ldr	r3, [pc, #4]	; (801184c <HAL_RCC_GetHCLKFreq+0x8>)
 8011846:	6818      	ldr	r0, [r3, #0]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	20000000 	.word	0x20000000

08011850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011850:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011852:	f7ff fff7 	bl	8011844 <HAL_RCC_GetHCLKFreq>
 8011856:	4b04      	ldr	r3, [pc, #16]	; (8011868 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011858:	689b      	ldr	r3, [r3, #8]
 801185a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 801185e:	4a03      	ldr	r2, [pc, #12]	; (801186c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011860:	5cd3      	ldrb	r3, [r2, r3]
}
 8011862:	40d8      	lsrs	r0, r3
 8011864:	bd08      	pop	{r3, pc}
 8011866:	bf00      	nop
 8011868:	40023800 	.word	0x40023800
 801186c:	08011cb8 	.word	0x08011cb8

08011870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011870:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011872:	f7ff ffe7 	bl	8011844 <HAL_RCC_GetHCLKFreq>
 8011876:	4b04      	ldr	r3, [pc, #16]	; (8011888 <HAL_RCC_GetPCLK2Freq+0x18>)
 8011878:	689b      	ldr	r3, [r3, #8]
 801187a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801187e:	4a03      	ldr	r2, [pc, #12]	; (801188c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8011880:	5cd3      	ldrb	r3, [r2, r3]
}
 8011882:	40d8      	lsrs	r0, r3
 8011884:	bd08      	pop	{r3, pc}
 8011886:	bf00      	nop
 8011888:	40023800 	.word	0x40023800
 801188c:	08011cb8 	.word	0x08011cb8

08011890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011890:	b510      	push	{r4, lr}
 8011892:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011894:	6802      	ldr	r2, [r0, #0]
 8011896:	6913      	ldr	r3, [r2, #16]
 8011898:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801189c:	68c1      	ldr	r1, [r0, #12]
 801189e:	430b      	orrs	r3, r1
 80118a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80118a2:	6883      	ldr	r3, [r0, #8]
 80118a4:	6902      	ldr	r2, [r0, #16]
 80118a6:	431a      	orrs	r2, r3
 80118a8:	6943      	ldr	r3, [r0, #20]
 80118aa:	431a      	orrs	r2, r3
 80118ac:	69c3      	ldr	r3, [r0, #28]
 80118ae:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80118b0:	6801      	ldr	r1, [r0, #0]
 80118b2:	68cb      	ldr	r3, [r1, #12]
 80118b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80118b8:	f023 030c 	bic.w	r3, r3, #12
 80118bc:	4313      	orrs	r3, r2
 80118be:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80118c0:	6802      	ldr	r2, [r0, #0]
 80118c2:	6953      	ldr	r3, [r2, #20]
 80118c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118c8:	6981      	ldr	r1, [r0, #24]
 80118ca:	430b      	orrs	r3, r1
 80118cc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80118ce:	69c3      	ldr	r3, [r0, #28]
 80118d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118d4:	d035      	beq.n	8011942 <UART_SetConfig+0xb2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80118d6:	6803      	ldr	r3, [r0, #0]
 80118d8:	4a60      	ldr	r2, [pc, #384]	; (8011a5c <UART_SetConfig+0x1cc>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	f000 8091 	beq.w	8011a02 <UART_SetConfig+0x172>
 80118e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80118e4:	4293      	cmp	r3, r2
 80118e6:	f000 808c 	beq.w	8011a02 <UART_SetConfig+0x172>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80118ea:	f7ff ffb1 	bl	8011850 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80118ee:	2100      	movs	r1, #0
 80118f0:	1803      	adds	r3, r0, r0
 80118f2:	4149      	adcs	r1, r1
 80118f4:	181b      	adds	r3, r3, r0
 80118f6:	f141 0100 	adc.w	r1, r1, #0
 80118fa:	00c9      	lsls	r1, r1, #3
 80118fc:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8011900:	00db      	lsls	r3, r3, #3
 8011902:	1818      	adds	r0, r3, r0
 8011904:	6863      	ldr	r3, [r4, #4]
 8011906:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801190a:	ea4f 7393 	mov.w	r3, r3, lsr #30
 801190e:	f141 0100 	adc.w	r1, r1, #0
 8011912:	f7fe fc59 	bl	80101c8 <__aeabi_uldivmod>
 8011916:	4a52      	ldr	r2, [pc, #328]	; (8011a60 <UART_SetConfig+0x1d0>)
 8011918:	fba2 3100 	umull	r3, r1, r2, r0
 801191c:	0949      	lsrs	r1, r1, #5
 801191e:	2364      	movs	r3, #100	; 0x64
 8011920:	fb03 0311 	mls	r3, r3, r1, r0
 8011924:	011b      	lsls	r3, r3, #4
 8011926:	3332      	adds	r3, #50	; 0x32
 8011928:	fba2 2303 	umull	r2, r3, r2, r3
 801192c:	095b      	lsrs	r3, r3, #5
 801192e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8011932:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8011936:	f003 030f 	and.w	r3, r3, #15
 801193a:	6821      	ldr	r1, [r4, #0]
 801193c:	4413      	add	r3, r2
 801193e:	608b      	str	r3, [r1, #8]
    }
  }
}
 8011940:	e08a      	b.n	8011a58 <UART_SetConfig+0x1c8>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011942:	6803      	ldr	r3, [r0, #0]
 8011944:	4a45      	ldr	r2, [pc, #276]	; (8011a5c <UART_SetConfig+0x1cc>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d02f      	beq.n	80119aa <UART_SetConfig+0x11a>
 801194a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801194e:	4293      	cmp	r3, r2
 8011950:	d02b      	beq.n	80119aa <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011952:	f7ff ff7d 	bl	8011850 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011956:	2300      	movs	r3, #0
 8011958:	1802      	adds	r2, r0, r0
 801195a:	eb43 0103 	adc.w	r1, r3, r3
 801195e:	1812      	adds	r2, r2, r0
 8011960:	f141 0100 	adc.w	r1, r1, #0
 8011964:	00c9      	lsls	r1, r1, #3
 8011966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801196a:	00d2      	lsls	r2, r2, #3
 801196c:	1810      	adds	r0, r2, r0
 801196e:	f141 0100 	adc.w	r1, r1, #0
 8011972:	6862      	ldr	r2, [r4, #4]
 8011974:	1892      	adds	r2, r2, r2
 8011976:	415b      	adcs	r3, r3
 8011978:	f7fe fc26 	bl	80101c8 <__aeabi_uldivmod>
 801197c:	4a38      	ldr	r2, [pc, #224]	; (8011a60 <UART_SetConfig+0x1d0>)
 801197e:	fba2 3100 	umull	r3, r1, r2, r0
 8011982:	0949      	lsrs	r1, r1, #5
 8011984:	2364      	movs	r3, #100	; 0x64
 8011986:	fb03 0311 	mls	r3, r3, r1, r0
 801198a:	00db      	lsls	r3, r3, #3
 801198c:	3332      	adds	r3, #50	; 0x32
 801198e:	fba2 2303 	umull	r2, r3, r2, r3
 8011992:	095b      	lsrs	r3, r3, #5
 8011994:	005a      	lsls	r2, r3, #1
 8011996:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 801199a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801199e:	f003 0307 	and.w	r3, r3, #7
 80119a2:	6821      	ldr	r1, [r4, #0]
 80119a4:	4413      	add	r3, r2
 80119a6:	608b      	str	r3, [r1, #8]
 80119a8:	e056      	b.n	8011a58 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 80119aa:	f7ff ff61 	bl	8011870 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80119ae:	2300      	movs	r3, #0
 80119b0:	1802      	adds	r2, r0, r0
 80119b2:	eb43 0103 	adc.w	r1, r3, r3
 80119b6:	1812      	adds	r2, r2, r0
 80119b8:	f141 0100 	adc.w	r1, r1, #0
 80119bc:	00c9      	lsls	r1, r1, #3
 80119be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80119c2:	00d2      	lsls	r2, r2, #3
 80119c4:	1810      	adds	r0, r2, r0
 80119c6:	f141 0100 	adc.w	r1, r1, #0
 80119ca:	6862      	ldr	r2, [r4, #4]
 80119cc:	1892      	adds	r2, r2, r2
 80119ce:	415b      	adcs	r3, r3
 80119d0:	f7fe fbfa 	bl	80101c8 <__aeabi_uldivmod>
 80119d4:	4a22      	ldr	r2, [pc, #136]	; (8011a60 <UART_SetConfig+0x1d0>)
 80119d6:	fba2 3100 	umull	r3, r1, r2, r0
 80119da:	0949      	lsrs	r1, r1, #5
 80119dc:	2364      	movs	r3, #100	; 0x64
 80119de:	fb03 0311 	mls	r3, r3, r1, r0
 80119e2:	00db      	lsls	r3, r3, #3
 80119e4:	3332      	adds	r3, #50	; 0x32
 80119e6:	fba2 2303 	umull	r2, r3, r2, r3
 80119ea:	095b      	lsrs	r3, r3, #5
 80119ec:	005a      	lsls	r2, r3, #1
 80119ee:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80119f2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80119f6:	f003 0307 	and.w	r3, r3, #7
 80119fa:	6821      	ldr	r1, [r4, #0]
 80119fc:	4413      	add	r3, r2
 80119fe:	608b      	str	r3, [r1, #8]
 8011a00:	e02a      	b.n	8011a58 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011a02:	f7ff ff35 	bl	8011870 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011a06:	2100      	movs	r1, #0
 8011a08:	1803      	adds	r3, r0, r0
 8011a0a:	4149      	adcs	r1, r1
 8011a0c:	181b      	adds	r3, r3, r0
 8011a0e:	f141 0100 	adc.w	r1, r1, #0
 8011a12:	00c9      	lsls	r1, r1, #3
 8011a14:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	1818      	adds	r0, r3, r0
 8011a1c:	6863      	ldr	r3, [r4, #4]
 8011a1e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011a22:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8011a26:	f141 0100 	adc.w	r1, r1, #0
 8011a2a:	f7fe fbcd 	bl	80101c8 <__aeabi_uldivmod>
 8011a2e:	4a0c      	ldr	r2, [pc, #48]	; (8011a60 <UART_SetConfig+0x1d0>)
 8011a30:	fba2 3100 	umull	r3, r1, r2, r0
 8011a34:	0949      	lsrs	r1, r1, #5
 8011a36:	2364      	movs	r3, #100	; 0x64
 8011a38:	fb03 0311 	mls	r3, r3, r1, r0
 8011a3c:	011b      	lsls	r3, r3, #4
 8011a3e:	3332      	adds	r3, #50	; 0x32
 8011a40:	fba2 2303 	umull	r2, r3, r2, r3
 8011a44:	095b      	lsrs	r3, r3, #5
 8011a46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8011a4a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8011a4e:	f003 030f 	and.w	r3, r3, #15
 8011a52:	6821      	ldr	r1, [r4, #0]
 8011a54:	4413      	add	r3, r2
 8011a56:	608b      	str	r3, [r1, #8]
}
 8011a58:	bd10      	pop	{r4, pc}
 8011a5a:	bf00      	nop
 8011a5c:	40011000 	.word	0x40011000
 8011a60:	51eb851f 	.word	0x51eb851f

08011a64 <UART_WaitOnFlagUntilTimeout>:
{
 8011a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a68:	4605      	mov	r5, r0
 8011a6a:	460f      	mov	r7, r1
 8011a6c:	4616      	mov	r6, r2
 8011a6e:	4699      	mov	r9, r3
 8011a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a74:	682b      	ldr	r3, [r5, #0]
 8011a76:	681c      	ldr	r4, [r3, #0]
 8011a78:	ea37 0404 	bics.w	r4, r7, r4
 8011a7c:	bf0c      	ite	eq
 8011a7e:	2401      	moveq	r4, #1
 8011a80:	2400      	movne	r4, #0
 8011a82:	42b4      	cmp	r4, r6
 8011a84:	d11f      	bne.n	8011ac6 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8011a86:	f1b8 3fff 	cmp.w	r8, #4294967295
 8011a8a:	d0f3      	beq.n	8011a74 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011a8c:	f1b8 0f00 	cmp.w	r8, #0
 8011a90:	d005      	beq.n	8011a9e <UART_WaitOnFlagUntilTimeout+0x3a>
 8011a92:	f7ff f85b 	bl	8010b4c <HAL_GetTick>
 8011a96:	eba0 0009 	sub.w	r0, r0, r9
 8011a9a:	4540      	cmp	r0, r8
 8011a9c:	d9ea      	bls.n	8011a74 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011a9e:	682a      	ldr	r2, [r5, #0]
 8011aa0:	68d3      	ldr	r3, [r2, #12]
 8011aa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011aa6:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aa8:	682a      	ldr	r2, [r5, #0]
 8011aaa:	6953      	ldr	r3, [r2, #20]
 8011aac:	f023 0301 	bic.w	r3, r3, #1
 8011ab0:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011ab2:	2320      	movs	r3, #32
 8011ab4:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8011ab8:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8011abc:	2300      	movs	r3, #0
 8011abe:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8011ac2:	2003      	movs	r0, #3
 8011ac4:	e000      	b.n	8011ac8 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8011ac6:	2000      	movs	r0, #0
}
 8011ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011acc <HAL_UART_Init>:
  if (huart == NULL)
 8011acc:	b358      	cbz	r0, 8011b26 <HAL_UART_Init+0x5a>
{
 8011ace:	b510      	push	{r4, lr}
 8011ad0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8011ad2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8011ad6:	b30b      	cbz	r3, 8011b1c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8011ad8:	2324      	movs	r3, #36	; 0x24
 8011ada:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8011ade:	6822      	ldr	r2, [r4, #0]
 8011ae0:	68d3      	ldr	r3, [r2, #12]
 8011ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011ae6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f7ff fed1 	bl	8011890 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011aee:	6822      	ldr	r2, [r4, #0]
 8011af0:	6913      	ldr	r3, [r2, #16]
 8011af2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8011af6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011af8:	6822      	ldr	r2, [r4, #0]
 8011afa:	6953      	ldr	r3, [r2, #20]
 8011afc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8011b00:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8011b02:	6822      	ldr	r2, [r4, #0]
 8011b04:	68d3      	ldr	r3, [r2, #12]
 8011b06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011b0a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011b10:	2320      	movs	r3, #32
 8011b12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011b16:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8011b1a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8011b1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8011b20:	f7fe ff4c 	bl	80109bc <HAL_UART_MspInit>
 8011b24:	e7d8      	b.n	8011ad8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8011b26:	2001      	movs	r0, #1
}
 8011b28:	4770      	bx	lr

08011b2a <HAL_UART_Receive>:
{
 8011b2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8011b32:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	2b20      	cmp	r3, #32
 8011b3a:	d15d      	bne.n	8011bf8 <HAL_UART_Receive+0xce>
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	460d      	mov	r5, r1
 8011b40:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8011b42:	2900      	cmp	r1, #0
 8011b44:	d05c      	beq.n	8011c00 <HAL_UART_Receive+0xd6>
 8011b46:	2a00      	cmp	r2, #0
 8011b48:	d05c      	beq.n	8011c04 <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 8011b4a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d05a      	beq.n	8011c08 <HAL_UART_Receive+0xde>
 8011b52:	2301      	movs	r3, #1
 8011b54:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b58:	f04f 0900 	mov.w	r9, #0
 8011b5c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011b60:	2322      	movs	r3, #34	; 0x22
 8011b62:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8011b66:	f7fe fff1 	bl	8010b4c <HAL_GetTick>
 8011b6a:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8011b6c:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8011b70:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8011b74:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8011b78:	e01d      	b.n	8011bb6 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011b7a:	9600      	str	r6, [sp, #0]
 8011b7c:	463b      	mov	r3, r7
 8011b7e:	2200      	movs	r2, #0
 8011b80:	2120      	movs	r1, #32
 8011b82:	4620      	mov	r0, r4
 8011b84:	f7ff ff6e 	bl	8011a64 <UART_WaitOnFlagUntilTimeout>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d13f      	bne.n	8011c0c <HAL_UART_Receive+0xe2>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011b8c:	6923      	ldr	r3, [r4, #16]
 8011b8e:	b933      	cbnz	r3, 8011b9e <HAL_UART_Receive+0x74>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b98:	f825 3b02 	strh.w	r3, [r5], #2
          pData += 2U;
 8011b9c:	e00b      	b.n	8011bb6 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f825 3b01 	strh.w	r3, [r5], #1
          pData += 1U;
 8011ba8:	e005      	b.n	8011bb6 <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bb2:	f805 3b01 	strb.w	r3, [r5], #1
    while (huart->RxXferCount > 0U)
 8011bb6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	b1c3      	cbz	r3, 8011bee <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 8011bbc:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8011bbe:	b292      	uxth	r2, r2
 8011bc0:	3a01      	subs	r2, #1
 8011bc2:	b292      	uxth	r2, r2
 8011bc4:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011bc6:	68a3      	ldr	r3, [r4, #8]
 8011bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011bcc:	d0d5      	beq.n	8011b7a <HAL_UART_Receive+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011bce:	9600      	str	r6, [sp, #0]
 8011bd0:	463b      	mov	r3, r7
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	2120      	movs	r1, #32
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f7ff ff44 	bl	8011a64 <UART_WaitOnFlagUntilTimeout>
 8011bdc:	b9c0      	cbnz	r0, 8011c10 <HAL_UART_Receive+0xe6>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011bde:	6923      	ldr	r3, [r4, #16]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d1e2      	bne.n	8011baa <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011be4:	6823      	ldr	r3, [r4, #0]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	f805 3b01 	strb.w	r3, [r5], #1
 8011bec:	e7e3      	b.n	8011bb6 <HAL_UART_Receive+0x8c>
    huart->RxState = HAL_UART_STATE_READY;
 8011bee:	2320      	movs	r3, #32
 8011bf0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	e000      	b.n	8011bfa <HAL_UART_Receive+0xd0>
    return HAL_BUSY;
 8011bf8:	2002      	movs	r0, #2
}
 8011bfa:	b003      	add	sp, #12
 8011bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8011c00:	2001      	movs	r0, #1
 8011c02:	e7fa      	b.n	8011bfa <HAL_UART_Receive+0xd0>
 8011c04:	2001      	movs	r0, #1
 8011c06:	e7f8      	b.n	8011bfa <HAL_UART_Receive+0xd0>
    __HAL_LOCK(huart);
 8011c08:	2002      	movs	r0, #2
 8011c0a:	e7f6      	b.n	8011bfa <HAL_UART_Receive+0xd0>
          return HAL_TIMEOUT;
 8011c0c:	2003      	movs	r0, #3
 8011c0e:	e7f4      	b.n	8011bfa <HAL_UART_Receive+0xd0>
          return HAL_TIMEOUT;
 8011c10:	2003      	movs	r0, #3
 8011c12:	e7f2      	b.n	8011bfa <HAL_UART_Receive+0xd0>

08011c14 <memset>:
 8011c14:	4402      	add	r2, r0
 8011c16:	4603      	mov	r3, r0
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d100      	bne.n	8011c1e <memset+0xa>
 8011c1c:	4770      	bx	lr
 8011c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8011c22:	e7f9      	b.n	8011c18 <memset+0x4>

08011c24 <__libc_init_array>:
 8011c24:	b570      	push	{r4, r5, r6, lr}
 8011c26:	4d0d      	ldr	r5, [pc, #52]	; (8011c5c <__libc_init_array+0x38>)
 8011c28:	4c0d      	ldr	r4, [pc, #52]	; (8011c60 <__libc_init_array+0x3c>)
 8011c2a:	1b64      	subs	r4, r4, r5
 8011c2c:	10a4      	asrs	r4, r4, #2
 8011c2e:	2600      	movs	r6, #0
 8011c30:	42a6      	cmp	r6, r4
 8011c32:	d109      	bne.n	8011c48 <__libc_init_array+0x24>
 8011c34:	4d0b      	ldr	r5, [pc, #44]	; (8011c64 <__libc_init_array+0x40>)
 8011c36:	4c0c      	ldr	r4, [pc, #48]	; (8011c68 <__libc_init_array+0x44>)
 8011c38:	f000 f818 	bl	8011c6c <_init>
 8011c3c:	1b64      	subs	r4, r4, r5
 8011c3e:	10a4      	asrs	r4, r4, #2
 8011c40:	2600      	movs	r6, #0
 8011c42:	42a6      	cmp	r6, r4
 8011c44:	d105      	bne.n	8011c52 <__libc_init_array+0x2e>
 8011c46:	bd70      	pop	{r4, r5, r6, pc}
 8011c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c4c:	4798      	blx	r3
 8011c4e:	3601      	adds	r6, #1
 8011c50:	e7ee      	b.n	8011c30 <__libc_init_array+0xc>
 8011c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c56:	4798      	blx	r3
 8011c58:	3601      	adds	r6, #1
 8011c5a:	e7f2      	b.n	8011c42 <__libc_init_array+0x1e>
 8011c5c:	08011cc8 	.word	0x08011cc8
 8011c60:	08011cc8 	.word	0x08011cc8
 8011c64:	08011cc8 	.word	0x08011cc8
 8011c68:	08011ccc 	.word	0x08011ccc

08011c6c <_init>:
 8011c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6e:	bf00      	nop
 8011c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c72:	bc08      	pop	{r3}
 8011c74:	469e      	mov	lr, r3
 8011c76:	4770      	bx	lr

08011c78 <_fini>:
 8011c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c7a:	bf00      	nop
 8011c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c7e:	bc08      	pop	{r3}
 8011c80:	469e      	mov	lr, r3
 8011c82:	4770      	bx	lr
